


To detect recording errors within a sector, at the end of the sector
added a checksum field.


But this alone is not enough. Only rarely does the head stand straight, шс
a new Ryte on the trail begins. As a rule, it would be in the middle of a byte
start reading. However, since the data is sent consecutively bit by bit without gaps
stored, it is impossible to identify the beginning of a byte.

That is, first of all, a start of recording is found. One speaks
here from a synchronization of the head,


For this purpose, specially defined rite sequences and recording marks are placed on the dis-
written on a chain that carry an easy-to-recognize pattern.


There are two different types of these marks. One precedes each sector address
field, this is the "address mark"; a second one precedes 'each data field of a sector,
the "data mark".


Each of these markers are preceded and followed by sync bytes
immediately the data, so you can clearly distinguish whether you are in front of a
data recording or in front of an address field.


Further space is lost on the diskette due to "recording gaps" that
located after 'each data field of a sector. These gaps are urgently needed
to compensate for fluctuations in the rotational speed within certain limits
(Figure 1.7).


Such a basic structure of the floppy disk must first be created before any data is written to it
be made. This process is called "initialization";
Genes command available. When initialized, the subdivision into
Sectors are made and all address and data marks are written.


Data Gap Sector Data Gap Sector
Them


AM 2





Data field address !data data field
brand | brand brand | brand
Track and Checksum Track and
Sektoradresse Sektoradresse


Figure 1.7 Data structure on a floppy disk


- 20 -


From the 8110 1.6 it can be seen that the sectors are not sequential from 1 to lb
but are numbered in Jer jumps on the disk. With this little trick
it is possible to rotate several consecutive disks during one revolution
to be able to read sectors and thus significantly speed up access,


After these explanations, it should be understandable how each individual from the computer
sector can be found on the floppy disk.

But as a rule, you don't want to know anything about the individual sectors you are looking for
a very specific program on the diskette or a file that you
As a rule, you will also find more than one program on a floppy disk
or saved a file. How do you get such a complete
drawing whether to have to keep records of sectors yourself?


A whole track of the floppy disk was sacrificed for this purpose. On the track @, the outermost
track, a table of contents of the diskette is created in which it is recorded
which programs and files are stored on the disk and where to find them
are. With the DUS command *DIR' you can access this table of contents on the
output screen.


The last sector of this track Ø still has a special use. in him becomes tur
Each sector of the floppy disk is noted as to whether it is free or contains valid data.


The floppy disk controller





To connect a drive to a computer, a diskette controller (floppy
Disk Contraller) vom Type LASER DI4B benstigt.


This is connected to the Sustem-Rus of the computer and has ап the jerk
side two 28-pole plug-in connections for the connection of one or two running
to work,


The task of the floppy disk control is the implementation of logical orders, such as e.g
"Read a program" in single steps to specifically control the drives;
2.8. Step pulses for track adjustment, read a bit, write a kit, motor
on, engine off etc...


The floppy disk control also contains the floppy disk operating system (Disk Üpe-
rating system), called DOS for short, This is stored and expanded in іп SK-RüMs
the BASIC language range of the computer by 17 commands, which are used to operate the dis-
chain station are required. These include "INIT" for diskette initialization
ation, "SAVE® and "LOAD" for saving or loading a BASIC program.


=
24 -


This diskette operating system is addressed using addresses 4000 -
SFFF (hexadecimal, kept free for this extension purpose. It will
in addition, a 318 rod working area is reserved at the end of the RAM area.


Installation of the floppy disk system





Basically applies that all connections of electronic components only with
to be made or released with the power off. How fast
is otherwise an expensive fully integrated module due to the voltage peaks that occur
destroyed.


This also applies to the connection of the floppy disk system. So make sure
sure that the power supply to the computer system has been interrupted.


The floppy disk controller is first connected to the system bus on the back of the
connected. This is the plug strip, on the front one may be present
memory expansion was connected. You can now see this on the top of the
Connect floppy disk controller.


There are two 28-pin connector strips on the back of the floppy disk controller
to connect the drives, they bear the designations "Di" for drive і and
"Dz" fur Laufwerk Z


If you only have one drive, connect it to "Di".
Each drive requires a separate power supply. The 5-pin DIN connector
of the power pack is plugged into the corresponding socket on the back of the drive.


pin,


Now connect the power packs to a mains socket, and your setup is complete.
crush


You should make sure that when making or breaking the network connection
there is no floppy disk in the drive, as this may destroy the data content


could.


You should then always interrupt the power supply to your floppy disk drives
if you do not work with the system for a long period of time.


- 24 -


It is advisable to use a 270 voit -
Procure a power strip with an illuminated on/off switch. бо you can at
Completion of the work by simply pressing a button, the entire power supply
break.


Remember that LASER 11 and УГ200 calculators with internal ӛк Rah min-
at least one Iök memory extension must be available.





Figure 1.8 Floppy disk drive, lok memory expansion and floppy disk control


System initialization








After successful installation, turn on your computer as usual.


The calculator's initialization routine automatically recognizes that a floppy
system is connected and briefly starts the engine of the
its drive. In doing so, the read/write head is positioned on track B
are the clicking noises).


1

y

ERROR
1


Der Text "BASIC V2.8° oder "BASIC V1.2" 
is replaced by the text “DOS BASIC V1.6,


This is the sure sign for you that your floppy disk drive is initiali-
is sırt


You now have the previously mentioned 17 additional diskette Ie commands
work available.


Of course, this is not done if you do not have any additional
have connected any storage expansion,
Instead, the message appears there

"TINSUFFICIENT MEMORY FOR DOS’. 


You can work with your computer as before, but you have no
ability to access the disk.


Technical specifications


Floppy disks - standard 5 174 inches
5550 {single sided, single density) 


Recording format - single-sided
single density
48 tracks
to Sector / Spur
128 Byte / Sector


Capacity - Bu KB
Drive - 88 revolutions / minute
Power supply - +54, +124 DC voltage


via separate power supply


2. 105 – The operation


Structure of the LASER-DOS


The LASER disk operating system, called D0S for short (Disk Üperating System), is
an additional approx. 8 KB large program package, which is in RÜM blocks in the housing
has been accommodated in the floppy disk controller.


It includes the memory area from address 18484 14000Н) to address 24575
{iSFFFH), which is kept free in the LASER computers for such expansion purposes
(Figure 2.0).


BASIC- 
Interpreter 


16384 — — 4000 H 


24576 — — 6000 H 
not occupied

26624 — — 6800 H 
/0-Aagezzep

28672 — 1 — 7000 H 
image storage

30720 — — 7800 H 


BASIC-
21485 — Communications Range





— 7AE9 N
free memory
for programs
Е 310 Byte- max
max. DOS working area :
65535 — | —FFFF H 


Figure 2.1 The memory allocation of the LASER 1i@, 210, 310 and the VZ200


When you turn on the computer, you will see the presence of the diskette operating system
automatically recognized by the initialization routine of the standard RüMs and with
initialized, ie embedded in the sequence routines of the BASIC interpreter.

The floppy disk operating system has its own command interpreter, which
17 recognizes additional input commands independently and creates its own execution routines
toast.

The additional commands are exclusively diskette operations.


ons that enable you to save and retrieve programs and also to guide
own databases on the floppy disk.


Use of DOS commands


Kommando - Syntax


The available commands are displayed without any special marking as usual
che BASIC instructions entered.


Most of these commands can be used in BASIC programs as well as in direct
mode, ie for immediate execution from the screen.


However, a select few are limited to one mode or another. When exactly


which command may be used is specified in the detailed descriptions
noted.


In terms of syntax, the commands can be classified into three categories!


- Commands that do not address a file
Kossando [parameter }

- Commands that address a file
Kommando "Pzisipale" G, ragaveirg 1

- Commands that address two files
Komsado "Dateinamei","Dateinane2" 


-28-


Parameters are additional information required by some commands. Are
If several parameters are required, they must be separated by commas.


A small restriction arises when using BASIC-Pro-
grams.

The additional disk commands are not recognized if they are used with IF statements
must be specified directly after a THEN or ELSE.

They must always be used as an independent command either at the beginning of a line or
be entered after a command separator "i".


108 IF A= 1 THEN RUN "XYZ" falsch 
180 IF A= 1 THEN RUN "ХҮ" richtig 
or


188 IRA <> 1 TNEM 120
118 RUN "XYZ" 
120......


File Types and Specifications
The LÄSER-DOS differentiates between three different types of чоп files:


- BASIC-Programmdateıen 
with the label "T" as file type (= text file).


BASIC programs on the diskette are saved in this file type
saved.
- Machine program files


with the label "BR" as file type (=binary file).


in this file type, machine programs are stored on the disc
chain saved.


- 77 -


- Data files
with the identifier *D* as file type i=data).


This file type stores your personal information,
if you save this from a BASIC program on the floppy disk
want to take off.


BASIC and machine programs are stored on the diskette in the same format.
chert, The different type identification is only in the table of contents and
causes different treatment when loading and starting,


Data batteries have a completely different structure, which is why there are also
limitations in the use of individual commands,


If you want to address a file on the diskette or create a new one, then in the
commands require the specification of a file name, which must be included in the table of contents
is entered on the diskette.


A file name can be a maximum of eight characters long and can be any book
consist of a sequence of letters, characters or digits.


In the commands, the file name must always be given in quotation marks. Included
may also the final quotation mark, in contrast to other BASIC references
not be forgotten, even if no further information is given.


Unfortunately, the LASER-DOS does not allow using a string variable instead
the file name; this must always be specified in full directly in the command. This
makes flexible handling of different data files more difficult. How do you feel-
can still help is noted in chapter 5 "Tips for programming".


Kossando overview


The 17 additional disk commands can be divided into three functional groups:
put in order.


General Instructions


INIT Initialize a floppy disk.
With this command d:e becomes the basic structure
put on the disk, ie sıe wirg ın
Tracks and sectors divided.


DRIVE n Drive selection.
With this you can connect one of the two
bare drives for further processing
choose.


Copy DCOPY disks.
With this command you copy the content
one disk to another,


STATUS Output diskette status.
With "STATUS* you can still
empty space on the floppy disk.
{only from DISK BASIC V 1.2


File Management Features


DIR output of the table of contents,
All programs stored on the disk
and files are recorded on the screen
listed.


SAVE "name" Save a BASIC program.
An in-memory BASTL program
is used with the file name 'пате aut the hs-
chain written.


LOAD "name" Load a BASIC program.


The BASIC program identified by "name*
is read from the floppy disk.


- 31 -


BSAVE "pavé", ahhh, eree


BLOAD "паве" 


BRUN will say


KEM 'naneli', "nase?"


DCOPY "name" 


Load and start a BASIC program.
The BASIL program denoted by "name".
is read from disk and immediately
started.


Saving a machine program

A machine in memory
program is created with the file name "name".
written to the disk.


Loading a machine program.
The ті? "пале" specified machine program:
is read from the floppy disk


Loading and starting a machine program.
The machine program specified with "name*
is read from the diskette and started,


renaming a file,
The file named "namel" will open
of the disk ın "name?" renamed,


Delete a file.
The file labeled “паве" is stored on the
disk erased.


Copy a program.

The BASIC or
Machine program is switched to another
Disk copied.


Storage and processing of data


OPEN "will tell" ‚p


РЕВ "name" ,vari{[var2...,‚varn)


open a data file.
The data file designated nit "паве" will be
open for writing or reading,


Write іп a data file.
The variables specified in the command become
summarized in a record and in the
Data file "name" written.


-22-


INS "name" ,‚varilvar2....varn] 


CLOSE "паве" 


Reading from a data file.
A data record is read from the "name" file
and іп transfer the specified variables.


Closing a data file.
The data file denoted by "name" is
closed.


3. The individual DOS commands


General Instructions
HOT


Prepare a floppy disk

Syntax: INIT 

allowed as direct command and in program mode.

The INIT command creates a floppy disk for storing programs


or data prepared; it is *initialized*.


This means that the ıin the section "Recording Structure
provided basic structure is produced on the diskette.


48 tracks are set up, each with ió sectors and all address
and data marks written.


After writing, each sector is individually addressed and checked
had read.


The entire initialization process takes about 2-3 minutes.


After correct implementation, BASIC responds with READY, and it can do that
next command to be entered.


The initialization process can be stopped at any time by pressing the BREAK button
be aborted.


- 35 -


Danger:
With the INIT command, a non-write-protected diskette without


Each further check is overwritten, ie any data on it
get lost,


Possible mistakes:


FDISK WRITE PROTECTED The floppy disk's write-protect notch
is pasted over.


"DISK 1/0 ERROR An error occurred during control reading.


(faulty disk or bad zen
- see insertion)


DRIVE 


drive selection


Syntax: DRIVE n 


n = drive number (1 о. 2)


Allowed as direct command and in program mode.


The DRIVE command is used to select one of the two that can be connected
drives,


After switching on the computer and after each copy command {DCOPY) is
automatically always drive 1 selected.


if you want to access drive 2, you must first access it with DRIVE 2
be switched,


All DOS commands, on DiOPY, are executed on the selected drive
guided. Therefore, make sure that you always select the correct drive
have chosen. An "INIT" command, for example, leads to the wrong drive
inevitably to the destruction of a diskette that happens to be there
important data.


- % -


If you are not sure which drive is currently selected, do this
as a precaution, execute a corresponding DRIVE command \DRIVE i
or DRIVE 2) off.


The DRIVE command. only changes the DüS-internal pointers, a floppy disk
access does not take place.


Possible mistakes


FUNCTION CODE ERROR Wrong drive selection
{not 1 or 2)


DCOPY 
Copy disk
Suntax: IKORU
only allowed as a direct command.
The DCOPY command without further parameter specification leads to the complete
Copy a floppy disk to a second initialized floppy disk.
Copying is ті? one or two drives possible. during a run
However, you must copy the diskettes several times during the copying process.
change tray.


After entering the command, you will first be asked to select the output
and destination drive prompted.


SOURCE DISK (1/2)? (Source = Quelle) 
DESTINATION DISK (1/2)? iDestination = Ziel) 
Answer each of these questions by pressing the "1" or '2° button,


Only own one drive; so answer "1" to each question.


- 1 -


Command execution can be aborted with CTRL/BREAK.

After the drive selection, the copying process begins, this includes the entire
RAM memory used to transfer as little as possible between source and destination
having to switch drives.

Copy from one drive to a second and the whole works
copying process automatically. With only one drive {from I to I or

from Z to 2) before each read or write operation you are given the opportunity


insert the correct diskette.


INSERT SOURCE DISKETTE 
(PRESS SPACE WHEN READY) 


before each reading from the source diskette, or


INSERT DESTINATION DISKETTE 
{PRESS SPACE WHEN READY) 


before each write to the target disk.


You can start the copy process at any time by pressing the BREAK
Cancel button.


The completion of the copying process is indicated with READY.


Danger


- Note that the target disk must first be initialized.


- Data on the destination disk will be saved. overwritten {on rich-
pay attention to the choice of drive and diskette)


- All available RAM area is overwritten by DCOPY, ie
any data or programs located there must be backed up or
then reload.


- When using "Extended BASIC", a new initialization is then
Calculator setup required {power off/on).


- After completion, independent of a previous DRIVE command,
always drive 1 selected.


-18-


Possible mistakes


ILLEGAL DIRECT An attempt was made to use the DEOPY command
call from a program.


?DISK WRITE PROTECTED The write-protect notch of the target disk
is pasted over.


DISK 1/0 ERROR Write or read error on one of the


both disks.
{defective or bad /centring)


annotation


This is one of the most important DOS commands.


As already mentioned at the beginning, no floppy disk is permanently on
reliable data storage (attrition).


So make the programs that are important to you from every diskette
and contains data, a copy


- after the initial creation or acquisition


- after any significant change in content.


STATUS 
Output of the diskette status


{only from DISK BASIC V 1.23


Syntax: STATUS 


Allowed as direct command and in program mode.


The STATUS command uses the space still available on the diskette


determined and issued,


- 39 -


The output comes in two forms. In the first line is the number
of the free sectors in the form


nn RECORDS FREE 
issued.
The second line specifies the free butes in the form


nn.nnn K BYTES FREE 


Example:


STATUS 
80 RECORDS FREE 
18.8 K BYTES FREE 


Possible mistakes:


DISK 1/0 ERROR The usage overview of the diskette
could not be read correctly.


File - management functions

YOU
Output of the table of contents
Syntax: DIR 


Allowed as direct command and in programa mode.


The DIR command displays a list of all on the screen
programs and files stored on the diskette.


- 40 -


The listing includes file type and file name.


Possible file types:


T = BASIC - program {text file}
B = machine program {binary file)
D = data - file


Example:


YOU
8:5
B: LOSE
TAB. LAND 
TSANSCHR
D:FILE
READY 


The disk contains
- two machine programs, SCHACH and KALAH,


- two BASIC programs, AB.LAND and ANSCHR and
- a data file called FILE.


The listing can be stopped by pressing the spacebar (SPACE) and
be continued with the same button.


Possible mistakes:


FDISK 170 ERROR The table of contents of the diskette
could not be read properly.


SAVE 


Saving a BASIC program to floppy disk


Syntax: SAVE "name" 


- 4 -


"name = maximum 8-digit Programmmane,
enclosed in quotation marks.


Allowed as direct command and in program node,


A BASIC program residing in memory is named under the file name


"name" stored on the disk,


The program is given the type designation "T" (text file).


in direct mode the end of the storage process is indicated with READY
displayed.


In program mode, the program is saved with the one following "SAVE".
command continued.
Example:

SAVE "KARTEI®".


transfers a BASIC program in memory
under the name "KARTEI" on the diskette,


Possible mistakes:


TEYNTAX ERROR - no filename specified
- Filename not in quotes
- No end of line after the file name
(RETURN) or command separator "i".


FDISK WRITE PROTECTED The floppy disk's write-protect notch is
taped over.
?FILE ALREADY EXISTS A file with the same name already exists


available on the disk.


DIRECTORY FULL There is no more space in the table of contents
available {maximum 128 entries).


lg;
- in' -


?DISK FULL There is not enough on the floppy disk
Number of free sectors for the program
available.

DISK 1/0 ERROR When writing or reading the floppy disk
an error occurred.


The write process can be aborted at any time by pressing the EREAK button.
become. However, depending on when the button is pressed, it will not
always deleted the entry in the table of contents {error 1т 005),

Therefore, to ensure trouble-free diskette management, sell it
in such a case, check the table of contents with DIR and, if necessary, the
Delete file manually with ERA.


LOAD 


Loading a BASIC program from diskette


Syntax: LOAD "name" 


"name" = maximal B-stelliger Programmnane, 
enclosed in quotation marks.


Admitted as a direct command and in the Pragram mode,


A PASIE file saved on the diskette with the file name "name"
Program is loaded into memory.


The completion of the loading process is indicated with READY.


Example:
LOAD "KFZ" 
transfers the BASIC program KFZ from the diskette


into storage.


- 43 -


You can then view a BASIC program loaded in this way with LIST
view and modify if necessary.


Danger:


Before writing a modified program back to the floppy disk
you must first delete the program located there with "ERA".
or give the modified program a different name.


Example:


LOAD "XYZ" 
>READY 
LIST 


. modify


ERA "XYZ" 
>READY
SAVE "XII"


After reading the program is definitely in the direct mode
{BASIC warning start) branches, regardless of whether the call is direct or
from a program


The reading process can be stopped at any time by pressing the BREAK button
be aborted.


Possible mistakes:


?SYNTAX ERROR - no filename specified
- Filename not in double quotes
locked in
- After "name* no end of line (RETURN) or
command separator ":",


?FILE NOT FOUND - No program could be found on the diskette
of the given name can be found.


= 44 -


?FILE TYPE MISMATCH - A file was found on the diskette
same name foundn, this is however
not a BASIC program (file type = T).


DISK 1/0 ERROR - occurred while reading from the floppy disk
error on.
{Faulty disk or centering
problem)


RUN 


Load and start a BASIC program


Syntax: RUN "nane" 


"name" = maximal 8-stelliger Programmmane, 
іп enclosed in quotation marks,


Approved as direct comaando and in program mode,


A BASIC programı saved under "name" on the diskette
is loaded into memory and executed.


Example:
RUN "GRAFIK" 


The BASIC program "GRAPHIC" is loaded and
- executed.


Possible mistakes:


?SYNTAX ERROR - no filename specified
- Filename not in double quotes
locked in
- After "name" no end of line (RETURN) or
Command separator ":".


-45 -


?FILE NOT FOUND - No program could be found on the diskette
can be found with the given name.


?FILE TYPE MISMATCH - A file was found on the diskette
same name found, however, this is
not a BASIC program (file type = T).


DISK 1/0 ERROR - occurred while reading from the floppy disk
error on.


{Faulty disk or centering
problem) 


BSAVE 


Saving a machine program on diskette


Syntax! BSAVE "pave" , bro ,eeee


maximum 8-digit program name,
enclosed in quotation marks.


"name 


aaaa = program start address, 4 digits;
in hexadecimal notation.


eeee = program end address, 4 digits,
in hexadecimal notation.


Allowed as direct command and in program mode.


A machine program located in memory is referenced by the address
“адаа” to the address “eeee” under the file name “name” on the
written to disk.


In the table of contents it is given the type designation "B* (binary file).
In direct mode, the completion of the storage process is indicated with READY.


The program is switched to program mode with the command following BSAVE
continued.


Instead of a machine program, this command can also be used by anyone
transfer any memory area to the floppy disk and then
reloaded with BLOAD.


Only BRUN requires an executable machine program because this
starts immediately after loading.


Example:
RSAVE "BOWLING", 8000, 94FF 


The machine program "BOWLING" is from address
80AAH to address 94FFH on the diskette.


Possible mistakes:


TSYNTAX ERROR - no filename specified
- Filename not in quotes
= Start and/or end address missing
- Start or end address not 4 digits long
hexadezymal (B ~ Е)
- parameters not separated by comma,


DISK WRITE PROTECTED The write-protect notch of the floppy disk is
taped over.
?FILE ALREADY EXISTS A file with the same name already exists


available on the disk.


?DIRECTORY FULL in the table of contents is no more space
available (maximum 128 entries).

?DISK FULL There is not enough on the floppy disk
Number of free sectors for the program
available,

"DISK 1/0 ERROR When writing or reading the floppy disk


an error occurred.


-47-


The writing process can be terminated at any time by pressing the BREAK button.
become. However, it does not depend on the time at which the button is pressed
the entry in the table of contents is always deleted (error in DOS).

In order to ensure trouble-free diskette management, you should therefore
in such a case, check the table of contents with DIR and, if necessary, the
Delete file manually with ERA.


BLOAD 


Loading a machine program from diskette


Syntax: М ОА) "name" 
'name* = maximum d-digit program name,
іп Quotation marks included.
Allowed as direct command and in program mode.
A file saved on the floppy disk with the file name "name".
Machine program is loaded into memory.
With a direct command, the end of the loading process is marked with READY


displayed, in the program ad the program is displayed with the one following BLOAD
command continued.


Example:


BLOAD "UPROI” 
Machine program UPROI is loaded from the diskette.
The command is particularly suitable for using BSAVE to save


Load machine program routines from a BASIC program
and call it as a subroutine via USR.


Example:


220 BLOAD "UPROL": "LOAD SUBROUTINE

220 POKE 30852,0: 7158 START ADDRESS = 00

240 ROKE 30863, i76: "MSR STARTADRESSE = Ra
250 А = VSR(®): "CALL SUBRGUTINE


The UPROI subprogram is to be loaded from diskette and is called
Address ВОН can be called.


Possible mistakes:


?SYNTAX ERROR - no filename specified
- Filename not in quotes
locked in
- After 'name' no end of line (RETURN?) or
Command separator ":*,


?FILE NOT FOUND - No program could be included on the diskette
can be found with the given name.


IFILE TYPE MISMATCH - A file was found on the floppy disk
found with the same name, but this is
no machine program (file type = B).


?DISK 1/0 ERROR - occurred while reading from the floppy disk
error on.
{Faulty disk or centering
problem) 


= 49 -


BRUN 


Loading and starting a machine program


Syntax: BRUN "name" 


"name" = maximal 8-stelliger Programmnane, 
enclosed in quotation marks,


Allowed as direct command and in program mode,


A file saved on the floppy disk with the file name "name".
Machine program is loaded into memory and executed.


The program starts exclusively at the Frogram start address
{see BSAVE),


Example!
BRUN *FIFFI" 


The machine program "FIFFI* is loaded and started.


Possible mistakes:


?SYNTAX ERROR - no filename specified
- Filename not in quotes
locked in
~ No end of line (RETURN) after "'name" or
command separator ":",


"FILE NOT FOUND - No program could be found on the diskette
can be found with the given name.


?FILE TYPE MISMATCH - A file was found on the diskette


same name foundn, this is however
no machine program 'file type = В).


- 58 -


DISK 1/0 ERROR - occurred while reading from the floppy disk
error on.
(faulty disk or centering
problem) 


RENAME 


Renaming files and programs


Syntax: REN "nanel","nane?2" 


"“nanei” = file/program name, old, max. 8 characters,
enclosed in quotation marks.


"Surname?" = file/program name, new, max. B digits,
enclosed in quotation marks.


Allowed as direct command and in program mode.


A program located on the diskette under the name "namel".
or a file is in "name?" renamed.


Example:
REN "OTTO", *ANTON" 


The "OTTO" file is renamed to "ANTON".


Possible mistakes:


?SYNTAX ERROR = "namel" and/or "name2" are missing.
- "namei" or "name? not in
quotation marks
- Names not separated by commas.


- 5j -


?DISK WRITE PROTECTED The disk's write-protect notch
is pasted over


ЗЕГЕ МОТ FOUND The file named "namel" is
not on the disk.


ТЕНЕ ALREADY EXISTS The file named 'name?* is
already on the disk.


DISK 170 ERROR When reading or writing the content-
directory an error occurred.


DCOPY 


Copy a program


Syntax: DCOPY "name" 
"name" = maxımal 8-stelliger Programmname, 
enclosed in quotation marks.
Only permitted as a direct command,
The DCOPY command with specification of a program name causes copying
this program from one floppy disk to another.


After entering the command, you will first be asked to specify the initial
and destination drive prompted.


SOURCE DISK (1/2)? 
DESTINATION DISK (1/2)? 


Answer each of these two questions by pressing the
41%- or *2°-Таѕіе,


If you only have one drive, answer 717 to each question,


You can abort command execution with CTRL/BREAK.


- 52 -


After selecting the drive, the copying process begins. The copy is done
by calling the LOAD and SAVE routines, as they are also used with LÜAB and BLÜAD,
or used with SAVE and BSAVE.


For this reason, not a single one bothers with the DSOPY command
Copy the data file (file type = D) because it is structured differently.


Copy to only one drive {SOURCE DISK = DESTINATION DISK), so
will be prompted before loading


INSERT SOURCE DISKETTE 
(PRESS SPACE WHEN READY) 


and before writing the prompt


INSERT DESTINATION DISKETTE 
{PRESS SPACE WHEN READY) 


output {SOURCE = source, DESTINATION = destination).


If you have inserted the correct diskette, press
the space bar to continue the function.


You can interrupt the copying process at any time with the BREAK button.
If you do this during the writing process, please note the
wise at SAVE and BSAVE.


When copying is complete, the message READY appears.


Example: {°>' denotes system outputs)


>READY 

DCOPY "EMIL" 

>SOURCE DISK (1/2)? 

1

>DESTINATION DISK (1/2)? 
1

>INSERT SOURCE DISKETTE 
>{PRESS SPACE WHEN READY) 
spacebar


. loading process


- 51 -


>INSERT DESTINATION DISKETTE 
>{PRESS SPACE WHEN READY)
spacebar


write operation


>READY


The program to be copied overwrites its original memory
area in RAM.


After copying is complete, regardless of a previous DRIVE
Command, always drive 1 selected.


Possible mistakes:


FILLEGAL DIRECT An attempt was made to use the DCOPY command
call from a program.


?SYNTAX ERROR “павеі" not in quotes
locked in.

?FILE NOT FOUND The program is on the original diskette
"namei" does not exist.

?FILE TYPE MISMATCH An attempt was made to read a data file
copy,

FDISK WRITE PROTECTED The write-protect notch of the target disk


is taped over.


?ҒЦЕ ALREADY EXISTS There is already a
Programa with the name "namel" exist.


DIRECTORY FULL The directory of the target disk is
full. The program can no longer
will wear immax. 128 files/programs).


DISK FULL There is no more space on the target disk
available.


-54 -


DISK 170 ERROR Write or read error on one of the
both disks.


ERASE 


Delete a file or program on the floppy disk.


Syntax: ERA "name" 
"name" = maximum 9-digit program or
Filename, іп double quotes.
Allowed as direct command and in program mode,
A program or data file denoted by "name" is opened
deleted from the disk.


To do this, the entry in the table of contents is deleted and all
released sectors occupied by this file.


Example!
WAS "GIVED"


The file with the name "DATI" is deleted,


Possible mistakes:


25ҰМТАХ ERROR - no filename specified
- Filename not in double quotes


DISK WRITE PROTECTED The write-protect notch of the floppy disk is
taped over
?FILE NOT FOUND The specified file is not on the


Disk included.


"DISK 1/0 ERROR Write or read error on the floppy disk.


- 55 -


Storage and processing of data n


File organization and access


The LASER-DOS allows you to transfer data to the dis-
store the chain and then process it again.


This data is stored in special data files with the type code "D".
lays.


The form of storage offered is "sequential". Sequential means that the
Data in the file is stored one after the other, like a cassette. The
Reading or writing of data always starts at the beginning of the file, further reading and
Write calls access the following positions of the file,


In contrast to this is the "direct" type of access (random access), with which
Any data in a file can be accessed directly. But unfortunately supported
the LASER-DOS does not use this type of memory as standard. But she lets herself be with something
assembler/machine language skills and those described in the last chapter
Easily recreate utility routines.


Sequential access is data flow oriented, ie the number of characters for a
A write or read operation may vary. One also speaks here of data sets
variable length, where a record is the sum of data items starting with a
Write or read call written to or read from the diskette
become.


Sequential files represent the simplest form of data storage and playback
recovery. They are ideal for storing raw data without taking up much space
between the individual data elements. Data is sent in the same
read again as they were written.


In order to be able to access a data file, it must first be opened. In addition
a special ÖPEN call is available. By opening you specify
also the type of access, whether data is to be written or read.

After completing the data manipulations, each data file should start with білет (105Е-


call to be closed.


When editing data files you should consider some important points
observe:


- 56 -


If a non-existing file is opened for writing, then
it is newly created and it is positioned at the beginning of the file.


If an existing file is opened for writing, the file
end positioned, ie the file is positioned with the following write calls
expanded,


If you want to rewrite an existing file from the beginning, you have to
delete them beforehand.


After opening, reading always begins at the beginning of the file. Search data
within a file, you must read over the preceding ones.


To update a sequential file, read the source file
and write the updated data to a new file.


When reading the file, the exact structure of the data record to be read must be specified
be known. This does not refer to the length of the sentence and the
individual items; But you have to count the number of items and that
Format 'of each individual element (string, integer, etc.) know and for
Each element provide a corresponding receiving field.

Within the file, the data is in ASCII format only
filed. The individual elements are separated by commas.

2 B. the number 1.2345 takes up 8 bytes of memory, inclusive
a space for the leading sign and another space
sign at the end.

The text "ROBERT MAIER" takes up 12 bytes on the disk.


A data set should not exceed 228 bytes in length
otherwise difficulties with the internal data structure of the
BASIC occur.


The 288 bytes count
- the individual characters
- the komsas as element separators
- for numbers, the sign and
an extra space
- a final RETURN (CR) at the end of the sentence


A maximum of two files can be opened at the same time, with the
Access types can be the same or mixed.


-57 -


Danger
If your system reports вії 015К-ВАЅІС У1.0, you are working


just one file at a time as a precaution. Management of two
open files is still faulty there and can lead to significant
lead to data loss.


- The DOS does not tell you when the end of the file is reached when reading, you
have to define this yourself, for example by entering a specific end identifier
write to the file last.


Example of sequential output:


A table of English to metric conversion data should be provided.
be saved.


English unit! Metric unit


amame aa eae maaaana Å amaa a am eee ae ae and a mae eaaa and ae maea


i 


1 inch! 2.54001 are
i Mile t 1.60935 km
1 Acre ! 4046.85 am 
і Cubic Inch ! 2.201839 ltr 
and 0.5. Galleon! 3,785 r

1 Liquid Quart |! 2.9463 Itr 

and 165! 0.45459? kg


The data should be structured as follows on the floppy disk and in a data file
be entered with the name "ENG>MET":


"English unit -> Metric unit” , conversion factor


z.B.  "IN->0M", 2.54001 


The following program creates such a file.


18
20
thirty
40
50
68
70


OPEN "ENGSMET" 1 

FOR I4 = 1707 

READ E$,F 

REYA "EMC>MET", EF, R

NEXT 

CLOSE "ENG>MET" 

DATA "IN->CM® 2.548001, "MI->KM*,1.68935, "ACRE->0KM” , 2055. ВБЕ-6 


- 58 -


80 DATA "CU. IN-ALTR" 1.6387 16E-2, "GAL->LTR" 3, 785 
78 DATA "LIQ.QT->LTR’,B. 9463, "LB->KG" ,0.45359 
188 END 


Line 18 creates the file "ENG:MET" and opens it for writing.
In line 48, one data record is written to the file.
Line 50 closes the "ENG MET” file again.


Example of sequential input:


The following program reads the file "ENG MET" into two parallel matrices and
then asks about conversion problems.


10 CLEAR 1000 
20 01M E#(6),E (6)

30 OREM "EMBMET",0

A ROV 15 = 0706

50 IM) "EMAHMET" ,E(19,E (17)

60 NEXT 

70 CLOSE "THE GIFT:

188 CLS: PRINT * CONVERSION ENGLISH=}METRIC'

110 PRINT: FOR 1% = 0 T0 6 

128 PRINT TAB); USING "(HR ) 7 д MIRESI)
138 NEXT 

140 PRINT 8320, "WHICH CONVERSION 00-6)":

158 INPUT W%: IF W2 > 6 THEN 198 

16B INPUT "ENGLISH VALUE" ;V

170 PRINT "THE METRIC VALUE IS" Var(WX)

180 ІМРІЛ "CONTINUE WITH RETURNS" 5X

198 6070 100


Line 38 opens the file for input. Reading begins on
Dateianfang.

In line 58, a data record with the elements E$ (unit) and F
(factor) read and distributed to the matrices.

Note; daf the variable list when reading in is the same as that of the write command
ів previous program is.

In line 78 the file is closed again.


-59-


Updating a file


If you want to add one or more sentences to an existing file, open
this file for writing and simply enter additional records with PR# that
appended to the existing database.


If you want to change data within a file, sc recommends the following
drive {not with DISK BASIC VI.B).


1.


2,


3.
4

5.
6.
1.
8.


Open the file to be edited for reading.

Open a second new file for writing
Reading a record and editing the data
Writing the record to the new file
Repeat points 3 and 4 to the end of the file
Close both files

Delete the source file

Rename the new file to the original file


Reim DISK BASIC Vi.B remains only the solution, the file to be processed completely іп
read the memory, edit it and write it completely to the new file.
However, this limits the size of the file to the available memory,


OPEN 


open a file


Syntax: OREM "nane',n


"паве" = maximum 8-digit file name, in


Quotation marks included.


type of access
B - reading
1 - writing


3
n


Permitted only in program mode.


With the OPEN command, a data file (type = D) is created for writing
or open for reading.


a- 


The OPEN command internally creates a file
control block containing function codes and pointers.


Furthermore, according to the access code on the data: is positioned:
- When reading, always at the beginning of the file
- When writing to a new file, to the beginning of the file


- When writing to an existing file at the end of the file,


Since only two file control blocks are provided in the system,
only two files can be open at a time. The access type is ofıne
It can be both for writing, both for reading or one for reading
and the second opened for writing (see constraint DISK
BASIC Vi. on the previous pages).


Example:
OREM "TE5T",0


The data file "TEST' is opened for reading.


A data file can only be opened once at a time. the
trying to open the same file again results in an error message.


Since the file control blocks {FCR) are located outside the BASIC programs
find, a file stays open if the calling program is before the
CLOSE call was aborted due to an error or by pressing the BREAK key
and perhaps is no longer in memory. Such a file is running
no longer open easily.


Should the case arise that a BASIC program is aborted,


without closing its files cleanly, you should close it by direct
command (LOSE make up "filename".


Possible mistakes:


ILLEGAL DIRECT An attempt was made to use the ÖPEN command
run in direct mode.


- fi -








?5YNTAX ERROR - one or both parameters are missing
no comma as a separator

- !name* not in quotes
Access type not 8 or I


IFILE ALREADY OPEN File is already open, possibly with the
Close direct command "CLOSE*.


IFILE TYPE MISMATCH The file addressed in the OPEN command is
no data file


?FILE NOT FOUND A file to open for reading is not
available on the disk.


?DISK BUFFER FULL There are already two files open and
there is no longer a file control block
Disposal.

DISK 1/0 ERROR An error occurred while reading from the floppy disk
on.


PR# 


Writing records to a file


Syntax: FOR 'our',Eleaentenliste


"name" = maximum 8-digit file name, in
Quotation marks included.


Item List = List of variables and values ​​included in the
file are to be written. The single ones
Elements are to be separated by commas.


Permitted only in program mode.


Compiles a data record from the values ​​of the element list and
causes writing to the data file.


- 52 -
t 


This must first have been opened with an ÖPEN command for writing,


Example:


200 Аі = -40,450: 8% = "STRING-WERT" 
210 OREM "TE5T",1

220 RYU% “TEST”, А1, 8%, "PAS MAYA 5"

230 CLOSE “TEST” 

240 END 


After opening the "TEST" file in line 210, a data
compiled and written to this file.


The data record contains the current values ​​of Al and B$ and additionally the
String "THAT'S IT". The values ​​can later be used with an IN# command
be read in again


It is important to ensure that the list of elements of the INd command is in
reference to the number and type of elements is the same as the PR# command.


The values ​​represented by the item list should
not be longer than 200 characters in total. This includes the values
itself also all separators (commas) between the values
numeric values ​​additionally the sign place and a final
spaces and finally the data record end identifier {CR}.


oak


full
m
kch


The record in the previous example would have a length of


-40 456 "STRING VALUE, THAT'S IT


Unfortunately, one often does not know exactly how to create the element list
large the individual variables will be at the time of storage.
Then only careful estimation helps. Always stay safe
page and if in doubt, split your item list into multiple PR#
commands up.


Unfortunately, the PR# command does not notice when a data record is too long.
This is simply written to the diskette in its entirety.
Reading in with the IN# command then causes problems, whereby im
simplest case "only" data is lost.


- 63 -


Writing a data set does not necessarily cause a physical
lic writing to the file. Are always written to the floppy disk

full sectors only. The data of the PR& command is stored in an internal
Buffer collected that is the size of a sector. Whenever the

When the buffer is full, it is transferred to a free sector on the disk
and then a new free sector is determined. This writing one
Sectors can be done in the middle of a PRe command; there can also be several
PR& commands may be required to fill a sector.


A data set to be written sit PR# is written regardless of sector boundaries
written. The sector is also referred to as a physical unit,
while a record represents a logical unit.


Possible mistakes:


ILLEGAL DIRECT An attempt was made to use a PR& command
to execute directly.


?SYNTAX ERROR - no filename specified
- Filename not in quotes
- no item in the list
- no comma as separator


?FILE NOT OPEN File not previously opened.

"ILLEGAL WRITE The file was opened for reading.

MISK WRITE PROTECTED The disk's write-protect notch is on
taped over

?DISK FULL There was no free sector on the floppy disk


more to be identified.


DISK 1/0 ERROR When reading or writing occurred on the
disk an error.


Danger
If one of these errors occurs, the program with the corresponding


error message ended. Please note that this file is subsequently
was not closed, you should do this manually.


- bh - 


IN# 


Reading records from a file


Syntax: IN# "nane" ‚Elesentenliste 


"name" = maximum 8-digit file name, in
Quotation marks included.


Item List = list of variables from the file
are to be read. The single ones
Variables are to be separated by commas.


Permitted only in program mode.


IN# reads a record from the specified file and assigns the elements
of this set to the specified variables.


The file must first have been opened for reading with an OPEN command.


Example:


200 OREM "TEST",0
210 IN# "TEST",X,A$,B$ 
220 CLOSE "TEST" 


This example refers to the example of the PR# command created
th data record in the "TEST" file. The data stored there are the
Assigned in sequence after the variables of the IN# command.


After executing line 218, the variables contain the following values:


X = -40,456 
A$ = "STRING-WERT" 
B$ = "THAT'S IT"


-465 -


The element list of the IN# command must match that of the PR& command with regard to
match the number and type of variables. The order is the same
to comply with different types, the naming is irrelevant,


If records are read continuously from a file with IN#, the result is
the difficulty in detecting the end of file at the right time. a special
The LASER-DÜOS has a target "END OF FILE" identifier.


There are various possible solutions:


~ the number of sentences is known, they are read out in:
program counted with a counter,


- a second small file contains the record counter for the
main file.


= before each correct data record is a short prefix
written, composed of only a single alphanumeric
characters (e.g. PR "пате", "А").


In the reading program, before each reading of a data
first read this label {zR, ІҢ “name”, A$)

If the receiving string variable is then empty, that's it
End of file reached.


Possible mistakes:


"ILLEGAL DIRECT The IN# command was used as a direct
entered command,


TGYNTAX ERROR - no filename specified
- Filename not in quotes
- no item in the list
- no comma as separator


ТЕПЕ МОТ OPEN The specified file is not
open,

?ILLEGAL READ The file was opened for writing.

2015К 1/0 ERROR occurred while reading from disk


error on,


- & - 


?REDO One of the specified variables matches from
Type-her not to those from the floppy disk
read data.

The program continues, the variable
remains empty.


?ЕХТКА TGNÜRED In the variable list of the IN# command
fewer variables are given than values
are present in the data set, the
` numbered values ​​are ignored, the pro-
gram keeps running


29 The variable list contains more variables
exist as values ​​in the data set. The


Frogram now expects the input of the
missing values ​​using the keyboard.


Danger


If one of these errors occurs (except REDO, EXTRA IGNORED and ??), then
the program ends after the corresponding message has been output. Note
Please ensure that this file has not been closed, you should do so manually
repeat.


CLOSE 


Closing a data file


Syntax! CLOSE "name" 
"name" = maximum 8-digit file name, in
Quotation marks included.


Allowed as direct command and in program mode


With the CLÜSE command, a previously processed data file
closed,


- 6 -


Веі a file opened for reading or inactive file {ie the last
File access was not made to this file) or in direct mode
only the file control block (FCB = File Control Block) is frej-
given. Disk access does not take place.


However, if the CLOSE command is given in program mode and the closed
closing file is open for writing and currently active, then
additionally the last sector in the buffer back to the
Written to disk so that no data is lost.


It's good programmer use, every file opened after use too
to close again. However, it is essential for output files, be it
because you accept possible data losses.


Example:
CLOSE "WOW MAP"


The "MAILBOX" data file is closed.


It is always necessary to close and reopen a file
possible if you want to change the access type (e.g. from writing to
Read).


If the file to be closed is not open at all, ie it is not a
open file control block exists for this file, the CLOSE
Command skipped without any error message. This is suitable in front of everyone
to prophylactically close all files used in a program at the end
close without checking which one is currently open.


Possible mistakes:


7SYNTAX ERROR - no filename specified
- Filename not in quotes
sign,
?DISK WRITE PROTECTED The disk's write-protect notch


is pasted over.


?DISK 1/0 ERROR Occurred while writing to the floppy disk
an error on.


- %8-


4, error messages


Summarized listing of the possible DÜS error messages and their
probable causes.


DIRECTORY FULL An attempt was made to download a program or
save a file to the floppy disk
whose table of contents is already 120
contains entries.


DISK BUFFER FULL An attempt was made to open a file with OPEN
open although two files have already been opened
are net.

DISK FULL On the disk ісі Еріп free sector


more available,


DISK 1/0 ERROR An error occurred while writing or reading
on. eg address stamp not found;
checksum wrong etc


DISK WRITE PROTECTED An attempt was made to write to a floppy disk
write whose write-protection notch
is sticky.

?FILE ALREADY EXISTS A file to save to disk


Program is already included there.


"FILE ALREADY OPEN An OPEN call was made to a
Dropped file that is already open.


?FILE NOT FOUND A file addressed for reading or a
The program to be loaded is not on the
diskette present.


FILE NOT OPEN An attempt was made to open a . with ІМ or PR#


edit a file that has not been previously
was opened.


- 9 -


?FILE TYPE MISMATCH 


?ILLEGAL DIRECT 


?ILLESAL READ 


?ILLEGAL WRITE 


?INSUFFICIENT MEMORY FOR DÜS


An attempt was made to wrong a file
edit type.


LOAD/RUN = file type not equal to "Т"
BLOAD/BRUN - file type not equal to °R"
OPEN - file type not equal to "D"
DCOPY - file type = *D'


An attempt was made to use a DEOPY command in the
Apply program mode, or one of the
Kommandos ÖPEN, IN¥ oder PRE im Direkt-
Modus. 


The IN# command was executed for a file
set that is open for writing.


The PRE command was issued for a file
sets that is open for reading.


An attempt was made to install the DOS system on a


LASER 110 or VZ208 without memory expansion
to initialize.


- 78 -


5. Programming tips


i. As already mentioned in the description of the last sections, there is
Problem that when aborting a program due to an error or the BREAK key
necessarily also all files are completed correctly.


A restart of such a program after error correction or similar leads
then usually to the message "FILE ALREADY GPEN".


You can now manually complete these files in direct mode if their
names are known


However, this is not sufficient for new files to be created in a program.
Such files must then also be deleted, otherwise
with a renewed OPEN the file is updated and your data
have multiple times in the file.


In all these cases, the following procedure is recommended:


With all programs under development, you define

at the end a block with CLOSE calls and possibly also delete calls

for all files addressed in the program. With one of the above program
Then just call this routine with RUN linenumber
on.


Example:


You edit the three files DATI, DATZ for reading, and
DAT 3 is rebuilt.


x own program


4808 END 


20000 CLOSE "DATI” 
20010 CLOSE "DATZ2* 
20020 CLOSE "DATI" 
208398 WAS "GIVED"
20040 END 


- 1 -


2.


WITH.


If a program interruption occurs, clear it with RUN 20000
clean your files and after correction you can easily restart your program
beginning.


Often there is a need for a file to open when the program is started
must be present on the diskette (see sample program "Address directory"),
although it contains no data after
Use a similar procedure as chen by typing at the end of the actual
define the following lines in the program:
own program

6000 END 

18000 OPEN "MAILBOX" 1 

10010 CLOSE "MAILBOX” 

10020 END 
With RUN 10000 you create an empty file 'MAILBOX' on the floppy disk.
A bottleneck of the LASER-D0S is that the file names in the commands directly
must be specified and cannot be replaced by variables.


How can you still edit different files in one program?


To understand the solution below, you need knowledge of the BASIC
program structure required.


Here are the most important points:


- The start address of an MSIC program can be found in the
Memory locations 7BA4H and 7BASH (30884 and 30885 decimal).


- A BASIC line has the following structure:


2 bytes - longer to the next line
2 Bytes - tenancy number
n bytes ~ line text


1 byte ~ line end identifier (Х'#0” 1


- 72 -


Іа line text contained BASIC keywords, except the DOS
Commands are shown in the text as single-character "TOKENS".

In a program listing between line number and line
text inserted spaces is not part of the parts,


Taking these conditions into account, the example below can be used
easy to understand and replicate.


The key point of this example is that all file calls start at the beginning of the
program are located, are therefore easier to count and in later program
Changes are not postponed.


Example


Depending on the user's selection, a program evaluates one of three possible values
DATI, DATZ or DAT3 files.


10 GOTO 188 

20 OPEN "DATI", O:RETURN 

3a IN# "PATI", A$, VF, C: KETIM
48 CLOSE "DATI" RETURN 


100 CLEAR 1000 
118 A=PEEK(30885)#256+PEEK (30884 ) 
120 (15th


138 INPUT "DATEIVERSION (1-3)"3%$ 

140 IF X$C"1" OR X$>"3" THEN 128 

150 ROKE A+23, A5C(X%)

188 ROKE Аг42,А5С(Х%)

170 ROKE Аг859,А5С(Х%)

188 60501 20

190 505/3 50

i edit the data, possibly several records
. read with GOSUB 30,


80 GOSUB 40 
418 END 


Line 1@ executes a jump to the actual beginning of the program.


On lines 28, 30 and 40 are the file calls as individual subroutines
Are defined.


- T -


In line 118 the program start address is determined.
The desired file version is requested in lines 138 and {48.


If correct, this is included on lines 150, 160 and 178 in the filenames
of lines 28, 38 and 48.


Lines 188, 198 and 488 show the file processing as an example
Subroutine call indicated.


- 74 -


6. Application example "address management"


The program *Adrefverwaltung® shown on the following pages shows
a typical application example for diskette processing with the LASER-DUS.


It allows the entry, storage and editing of up to 1 addresses.
The addresses are stored on the diskette in a "MAILBOX" file.


The editing procedure was developed with regard to the weaknesses of DOS BASIC 1.8
selected in such a way that when the program starts, the entire contents of the file are stored in memory

s and at the end of the editing he changes completely to the dis-

chain is written back.


operation of the program


The program is loaded and started with RUN "ANSCHR”. Immediately after the

At the start, the content of the "MAILROX" file is transferred to the program-internal matrices.
This file must be on the floppy disk, otherwise the program will
output of an error message ended,


After the loading process, the menu is displayed


(1) NEW ENTRY

(2) UPDATE ENTRY
{3) DELETE ENTRY

(4) READ ENTRY

{53) LIST SORTED
(8) EXIT PROGRAM


You select one of these functions by entering the corresponding number.


After completing functions 1 to 5, which in my opinion are self-explanatory, it returns
Program back to menu output.


After completing function 6, the program is terminated.
If the data content was changed during the program run, the addresses


before executing the functions 5 and &, if necessary, alphabetically after
sorted by name and first name.


In the function ó, the data are returned to the floppy disk if they have been changed.
wrote.


When starting the program, it expects the MAILRÜX file to be present
the program for the first time, there is no such Date: available on the diskette
the. You can use the following procedure to create an empty *MAILROX" file on the
Create disk:


LOAD "CONNECT®
RUN 3808 
RUN 


This creates a file "MAILBOX" and then starts the actual one
main program.

To the program structure

The program is modular, ie each function is in a ın itself
completed routine,

After starting, the "MAILBOX" file is first read in (lines 220 - 280).
Please note that a solution was chosen for this file for the end identifier

where in front of 'each "real" data record a label with a short alphanum. text
is saved. The label is read and evaluated in the lines


248 and 258, reading the "real" sentence at line 288. -


On the individual program routines for address processing (functions 1-3).
not be addressed in detail. These have nothing to do directly with the DOS.


You can analyze the routines yourself if necessary.

Just a hint. To sort the addresses {lines 2200 - 2398) a
"SHELL" SORT method is used, which is somewhat complicated in terms of structure
ter, but in terms of runtime it is considerably better than the simple and usual one


"BUBBLE" SORT ist. 


The data is written back to the diskette in lines 1800 to
1928.


- 7 -


For security reasons, the data is first saved in a temporary file "TEMP".
written, The old file "MAILBOX" is then deleted and then the
temporary file renamed to “MAILBOX”, Dis has the advantage that when occurring
Errors during writing (DISK FULL or similar) at least still have the old file in front of
is available.


If you are interested in the program, simply type it in and save it
on the disk with SAVE "ANSCHR”.


- 77 -


IDO NNNNNNNNIZNNNNNNNNNNENNNENNNENNNINNENENEEE


192%

120 7% ADDRESS - ADMINISTRATION

138'*
RE 
188?


168 CLEAR 2008 
178 HD$=* ADDRESS DIRECTORY"

190 ŠÍM MM%(99),UM%(99),71%(99),57%(99),M8%199),R1.%199),07%(99)
200 'READ ADDRESS LIST

218 GOSUB 2450 

220 OPEN “NO MAP? COW

238 FOR N=8 TO 188

240 IN# "MAILEOX" AS 

250 IF A$ = '" THEN 200 

260 INB “MAILBOX”, NNS(N) VNSIN) TISCN) STEINI NRSIN) PLSIN) SEARCH)
270 NEXT N 

280 CLOSE “MAILBOX” 

3@0 ”PRINT MENU

310 50805 2400

328 PRINT 

330 PRINT TABi4)5*(1) NEW ENTRY"

340 PRINT TAR(4);"12) UPDATE ENTRY"

35@ PRINT TAB(4)5*(3) DELETE ENTRY®

360 PRINT TABi4)4"(4) READ ENTRY"

370 PRINT TAB(4);"(5) SORTED LIST®

380 PRINT TABi4}5"(6) EXIT PROGRAM"

390 50905 2500 |

ABO AS=INKEY$: IF A$ < "1" ОВ Аф > "6" THEN 400 

418 IF A$ = "1" THEN 588 


420 IF A$ = "2° TNEM 700

530 ІР Аф = "3" THEN 1200 
440 IF A$ = "4" THEN 1380 
450 IF A$ = "5" ТНЕМ 1500 


460 IF 50 = 1 GOSUB 2200 

478 IF MO = 1 60TO 1800 

480 CLS: END 

388 "NEW ENTRY

510 5050V 2400

328 IF N=99 PRINT 'FILE MAILBOX ALREADY FULL': GOTO 2458
330 INPUT "NACHNAME "МФ: IF NN$ = "" THEN 518 

548 INPUT "VORNAME " IVN$ 

230 INPUT "TITLE VERY

560 INPUT "STRASSE "157% 


- 78 -


378 INPUT "HAUSNUMMER "NR 

580 INPUT "ZIP CODE" SPL$

590 IMRIL "OYAT 507%

500 50508 2000

618 IF GF = 1 THEN 2558 

62B NNS(N)=NN$: VNS(N)=VN$: TI$(N)=TI$: STS(N)=ST$: NRIN)=NR
GIB PLS(N)=PL$: OT$(N)=0T$

Hey Ma M1

650 M = 1: 50 = 1

660 PRINT: PRINT "ENTRY COMPLETED*

678 6070 2508

700 'UPDATE ENTRY

710 60508 2100: 60508 2000

720 IF GF = @ THEN 27800 

738 GOSUR 2408

748 PRINT "1. NACHNAME: ";NN${]) 

750 PRINT "2ND FIRST NAME: "zVNSCH

768 PRINT *3. TITLE: KTF)

770 РКІМТ "4. STRASSE: ";57%(1) 

780 PRINT "5, NAME : * WT)

790 PRINT "6. PLZ: "РЖ 

808 PRINT "7. ORT: 8107%(1) 

810 GOSUR 2500

820 AF-IMKEÜ%: IR AF < "0° OV AF > "7" TNEM 820
830 IR AF = "0" TNEM 308

S40 IF AS > "1" ТНЕМ 890 

858 INPUT "LAST NAME * {ММ

WOW IR IMF = "" THEN 738

870 IE NNCHNNSCH) THEN MMC = MAF: 50 = 1: M = 1
880 6070 720

890 IF A$ > "2" THEN 930 
900 IMRO "VORNAME" {UM
910 IF VN$<>VN${I) THEN VN$(I)=VN$: 50 
920 6070 720

930 ІР АФ > "3" THEN 970 
940 INPUT "TITEL" ";TI$ 

958 IF TISOTISCH TNEM TIF(1)=TIF: MO = 1
960 6070 730

978 IF A$ > "4" THEN 1010 

980 INPUT "STRASSE * ;57% 

998 IR 57%‹>57%(1) TNEM 57%(1)=57%: M0 = 1
1000 6070 730

1010 IF A$ > "5" THEN 1050 

1020 INPUT "HAUSNUMMER ”iNR 


and: M№= 1


- 79 -


1838 IF NRONR{(I) THEN NR(I)=NR: MO = 1 

1040 6070 730

1050 IF A$ > "6" THEN 1090 

1050 INPUT "ZIP CODE * {Р.Ф

1878 IF PL$CPL$(I) THEN PL$(I)=PL$: MO = 1 
1080 6070 738

1090 IMRIL "OYAT" 07%

YES ИЗ 078520781) TNEM 07% (1)-07%: MO = 1
1118 6070 738

1200 "DELETE ENTRY

1218 GOSUR 2100: 50508 2000

1220 IF GF = @ THEN 2700 

1238 PL$(I) = "XXX" 

1240 PRINT: PRINT "ENTRY DELETED"

1250 M0 = 1: GOTO 2680 

1308 "READ ENTRY

1305 IR 50 = 1 6050V 2200

1310 60508 2100: 60908 2000

1320 IF 6F = 8 THEN 2708 

1330 GOSUB 2488 

1348 PRINT TI8(1)

1350 PRINT VN$(I)" °NNSCH) 

1368 IF ST$(I) = "" THEN 1398 

1370 PRINT ST$(1); 

1380 IF NR{I) = @ PRINT " " ELSE PRINT NRII) 
1390 ІР PL$(I) = "" THEN 1395 ELSE PRINT PLSD" "5 
1395 PRINT 07%(1) 

1488 I = I + 1: G0SUB 1618 

1410 IF I < N THEN 1338 ELSE 200 

1500 "OUTPUT LIST

1510 IR 50 = 1 60508 2200

1520 1 = 0

1530 60508 2200

1540 IF N = O PRINT "NO ENTRIES EXIST”: GOTO 2500
1558 FOR J = 1 Т0 12 

1568 IF I = N THEN 1688 

1570 IF PL$(I) = "XXXX* THEN 1590 

1580 RAIMT MASI)", "VNS(I)

159% I= I + 1: NEXT J 

1600 GOSUB i610: IF I < N THEN 1538 ELSE 308 
1618 PRINT 3488, "<RETURN> = WEITER, <E> = ЕМЕ"; 
1628 A$ = INKEY$ 

1638 A$ = INKEY$: IF A$ = "* THEN 1638 

1648 IF A$ = "E" THEN I = N: RETURN 


- 80 -


1550 IF A$ <> CHR$(13) THEN 1630 
1668 RETURN 

1800 'WRITE DATA TO DISKETTE
1810 GOSUR 2450

1820 OPEN "TEMP", t 

1830 IF N = 0 THEM 189

1848 Fô I = @ TO Ni

1850 IF PL${I) = "XXXX* THEN 1888 
1868 PR# "TEMP", "A" 

1878 PR# “TEMP”,MM%(1),U8%(1),T1%(12.576(1),MN(1),P1%(1),07%(1)
1880 NEXT I 

1898 CLOSE "TEMP" 

1900 ERA "MAILBOX" 

1910 REN "TEMP", "MAILBOX" 

1928 CLS: END 

2008 "SEARCH ENTRY IN LIST
2018 FOR I = B TÖ N-i 

2020 IF PL$(I) = "XXXX" THEN 2060 
2030 IF NN$ <> NN${(I) THEN 2060) 
2048 IF VN$ = "" THEN 2978 

2050 IF UM = UM(1) THEM 2070
2060 NEXT I: GF = 0: RETURN 

2070 GF = 1: RETURN 

2100 "READ SEARCH CRITERIA
2110 GOSUB 2408 

2120 INPUT "LAST NAME" INN$

2138 IF NN$ = "" THEN 2118 

2140 INPUT "VORNAME "zVN$ 

2158 RETURN 

2200 "SORT THE ENTRIES
2218 GOSUR 2458: 50 = 0

2220 IF N X 2 RETURN 


2230 M = M

2248 M = INT (M/2): IR M = @ RETURN
2250 Ј = 1: К= М-М

2200 1 = J

ZRL=SIrNM

22908 X-1-1:Ю:i-1

2290 IF NN$(X) < NNS(Y) THEN 2398 


2300 IF NN$(X) > NN$(Y) THEN 2320 

2310 IF VN$(X) <= VN$S(Y) THEN 23 

2320 NNS=NN$(X): VNS=VN$(X): TI$=TI${(X): ST$=ST$(X):i NR=NR(X) 
2338 Ri-P1,8(1): 078-0789: M8 (X)-M846(N): UNSCKI=VNSCY)
2340 T1%02-T19(Y): 57%(3)-578(Y): MYA(X)-MƢ(Y)


- 81 -


2350 PL$(X)=PL$(Y): OT${X)=0T$(Y)! NNS(Y)=VOICE
2300 VN$(Y)=VN$: TI$(Y)=TI$: ST$(Y)=ST$: NR(Y)=NR
2370 PL$(Y)=PL$: OT$(Y)=0T$

2380 I = I - M: IF I > B THEN 2270 

239 J=. +1: IFJ >K THEN 2240 ELSE 2256 
2400 'HEADER EXCEPT

2410 CLS: PRINT HD$: PRINT: RETURN 

2428 "PLEASE WAIT

2868 C15: REIMT 9228, "nnn. VITTE NAYATEM zhyn"
2470 RETURN 

2508 'READ DIGIT

2510 PRINT: PRINT "PLEASE ENTER NUMBER t@=END)": PRINT
2520 А% - INKEYS 

2530 RETURN 

2558 "MESSAGE "ADDRESS EXISTS"

2568 PRINT: PRINT "ADDRESS ALREADY EXISTS"
2600 "WAIT FOR RETURN

2618 PRINT: INPUT "WEITER MIT <RETURN>" X 

2620 6070 300

2708 "MESSAGE "ADDRESS NOT AVAILABLE"

271@ PRINT: PRINT "ADDRESS NOT AVAILABLE"
2728 6070 2500

3000 OREM "MASH VOH", i

3010 SACE "MASH VOH"

3020 END 


- 82 -


7. Vechnische Inforaationen





Structure and organization of the diskette








Structure of the diskette after initialization


Before you can work with a diskette, the basic structure of the


Tracks and sectors must be present.


This basic structure is set to the using the initialization (INIT command).
written to disk.


It consists of 40 tracks with 16 sectors each, each with 178 bytes of data capacity. How
already noted in the "Recording Structure" section, comes after Each Sector
a certain "overhead" consisting of necessary synchronization and addressing
fields. This results in a total length of 154 bytes per sector.


Such a sector has the following basic structure:


Byte 8 -6 
Byte 7 - 18 
Byte 11 - 13 
Byte 14 - 19 
Byte 20 - 23 
Byte 24 - 151 


Byte 152 - 153 


Adreß-Synchronisation 7 x BF 


Adreßmarke PFE E? 18 C2:

Adreffeld 

Byte 11 = Track number (8 - 39)

Byte 12 = Sector number (Bf - 15)

Byte 13 = Prüfsumme "Adreßteld" 
{Spur& + Sector)

Data synchronization 6 x 280

Data mark X C3 1B E7 FE?

Data field = 128 bytes


checksum "data field"


When initializing mrd Each sector is fully written, with data field
and Checksum {byte 24 - 153) = Pop.


The sectors are not numbered sequentially around the disk, but in
Arranged in triple jumps (see Figure 1.6). This ensures that continuous
sectors of a track can be reached during one revolution of the disk,
if a certain processing time in between is not exceeded.


This is 94 ms from the end of a sector to the beginning of the next sector in
appears in numerical order under the read/write head. 94 ms is one
huge amount of time in which to do extensive data manipulation.


Of the tracks on a floppy disk, 39 are available for storing programs and data
Disposal,


The first track of a diskette (track 8) is used for diskette management. on it
which is the table of contents of the diskette and a sector allocation overview,


Table of Contents


The first 15 sectors of track @ (sector 0 - 14) contain the
directory of the diskette.


Each entry occupies a space of 16 bytes,


This gives a capacity of 8 entries per sector and 8 x 15 = 178 entries in the
entire table of contents (see error message "?DIRECTORY FULL").


An entry in the table of contents has the following structure:


Byte 8 occupancy status / file type
® - End of used entries in the table of contents
I - released entry (e.g. after a "ЕКА" )
D - entry refers to a data file
T - Entry refers to a text file tBASIC-Progr. )
B - entry refers to a binary file (machine
Program)


Byte 1 delimiter {always 7:7)


- 84 -


Bytes 2 -9 file name


Byte 10 - ii Address of the first sector of this file
Byte 10 - Track number
Byte 11 - Sector number


Ейе 12-13 only if file type = T or B
Program start address in memory


Byte 14 - 15 only with file type = T or B
Program end address in memory


With the "DIR" command, the first IB bytes are simply 'without any preparation
Each occupied entry is output on the screen.


If a file is deleted, only the status byte (byte 0) ац? ° 1°
set. All other entries are retained.


The sector administration


The last sector of track 8 contains the occupancy overview for the sectors
the floppy disk.


A bit is reserved there for each sector from track I, which indicates whether the corresponding
relevant sector is free (bit = B} or occupied (bit = 1).


With 39 tracks and 15 sectors per track, that gives 624 required bits, or 78
Bytes containing relevant information in this sector.


When writing a file, this allocation overview is used to determine the required
relevant sectors for storage. The sectors are always
ren occupied and by deleting evti. gaps that have arisen are filled.


mapping example!


Spur O Sector 15


Byte ü ==} Lane 1, Sector Q - 7
Exchange! ==} Lane 1, Sector 8 - 15
Byte 2 ==} Track 2, Sector 8 - 7
Byte 77 ==>" Track 39, Sector 3 - 15


Storage of programs and files


All programs stored on the diskette receive a corresponding entry
in the table of contents, where the first byte is the type of file or program
is noted.


Between text files (BASIC programs) and binary files (machine programs).
this type designation is the only difference. The recording structures are
identical.


The different type designation causes a different treatment after loading
or starting such a program {see command descriptions LOAD/RUN or
BLOAD/ BRUN). 


In the table of contents is in bytes 10 и. I1 a pointer to the first
sector occupied by this program.


Bytes 12 - 15 of the table of contents contain the information in which
This program's memory area is to be transferred when loading, thereby containing the
Bytes 12 and 13 the start address and bytes 14 and 15 the end address of the
carrying range,


The data sectors contain in bytes 8 - 125 of the data field a 1:1 Коріе des
memory area, ie in binary data representation,


The sectors occupied by a program do not have to be physically consecutive
lie, but can be scattered on the disk. In order to still
To be able to read them contiguously, the individual sectors are shown one below the other.


In bytes 126 and 127 of the data field is a pointer to the next
Sector of this program (track and sector number? or ° 0° 1 last occupied
Sector,


Веі data files with the type designation 'D' are missing in the table of contents the
Indicates a memory area to be occupied, bytes 12 - 15 are irrelevant.


The pointer to the first occupied sector is also contained in bytes I® and 11.
hold.


As with the programs, the individual sectors of the file are linked to one another.


Each sector of a data file contains in the first 126 bytes of the data field the
actual data and a pointer in the last two bytes of the data field
the next occupied sector or '8' at the end of the file.


The structure of the data in the
first 126 bytes.


Data representation is in ASCII format only. The storage takes place on
the basis of data sets, with 'each PR# command being a complete data set
is written to the file.


Records contain a defined end identifier. This is the ASCII character for
"Carriage Return" X’2D’. 


A data record is not based on sector boundaries. There can be multiple records
be included in a sector; a record can also span multiple sectors
extend. Except for the first record of a file, the records don't have to
begin at a sector boundary.


Within the records, the various data fields are separated by commas


separated, they are assigned to the variables defined in the IN# command when reading
grasslands.


- 87 -


Memory resident workspaces





To process the diskettes, the DOS uses the last 310 bytes of the available
different data structures are created in the RAM memory, in which
tion vectors, file management blocks, and I/O buffers are located {Figure 1.73.


OF THE-
vectors


data buffer


the sector-
Occupancy overview
(MARANEA)





у--”0 =—— RAM-Endaddress —310






+67
+77





+ 231





Figure 7.1 The memory areas of the D0S


DOS vectors
The first 67 bytes of this DOS work area contain the DOS vectors.


The start of the DOS vectors is set by the D0S during system initialization with the
788 register 'IY' addressed. The D0S expects this register to be read by user pro-
programs is not changed, otherwise it will inevitably lead to a system crash and
possibly also to the destruction of data content on the diskette (bitter experience of the
Author).


The DOS vector area is structured as follows:


DOSVTR=II


Name Byte Offset Meaning





FILNO t IY+8 file number.
When editing a data file
here the number of the used file
Management Blocks (FCB).
@ = ESVI, 1 = ГСВ2


FNAM 8 days ago Dateiname.
Name of the file to edit. is from
User program before each file/
Enter program access.


TYPE 2 IY+9 file type.
Byte I = Soll-Type. 
Byte 2 = Ist-Type. 
From the user program is in the first byte
the type of the to edit specify file.


DK 1 ІҮ11 selected drive,
Х'10' = drive i
80 = drive 2
at initialization
L10 set.


RUST 1 1ү+12 access type.
0 = read
1 = write
Must be set by the user program.
With the BASIC this is done with the OPEN
Commando.


SOURCE 1 1Ү+13 Output drive (source) at
DCOPY command (1 or 2)


UBFR 2 Iy+tä Address of a user buffer area,
to or from which data is transferred
should be.


- 89 -


DESTIN 


SCTR 


TREK 


RETRY 


DRAKE


NSCT


NTRK 


RSVI


RSV2


DBFR 


LTHEPY 


PADR


13


ke


IY+16


IY+17


TY+18


IY+19


TY+28


IY+21


[Y+22


1+23


IY+36


IY+49


IY+51


1+52


Rhyme loading and saving programs
Is this the program area.

When reading data files it is the
BASIC input/output buffer


Target drive for the DCOPY command
il or 2)


number of the sector to be addressed,
number of the track to be addressed,


Retry counter on read errors
{Probation sum).

Appears on initialization

10 set.


current track number over which the
read/write head is located.


Notepad for the next one to address-
trench Sector,


Bookmark for the next address-
by Spur,


File Management Block i.
(Structure see own description)


file management block 2,
(Structure see own description)


Pointer to the data buffer of the DÜS for
writing and reading a sector
This is right next to it
to the DÜS vectors in the working area.


Copy of the command byte for the floppy
ten control.


Pointer to the DOS buffer into which

the sector occupancy overview between
is saved,

This is located behind the data


- 98 -


buffer in the work area.


TRKENT 1 1ү+54 track counter for the DCOPY command,

TRKPTR 1 11453 Track pointer for the DEOPY command.

PHASE 1 IY+56 step pulse raster for track adjustment
lung, 

DERYF i IY+57 Flag for DCOPY

RESVE 18 1Ү%58 reserved for extensions.


File Control Blocks (FCB)
Within the DÜS vectors are two 13-byte file management
tion blocks, FORl and ҒОВ2,


These are required when editing data files to display status and
to keep control information about the file being accessed.


Уот ӨРЕМ - command a free file management block is determined and with the
required parameters for the file to be opened.


The IN# and PR# commands are based on the corresponding file
management block, eg which sector of the file is to be read and at which byte this
Sector to continue processing.


The file management blocks are released again by the CLOSE command.


Since there are only two of these blocks, only two files can be created at the same time
to be open.


- 1 -


A file management block has the following structure:


FCRI bzw. FCBZ


Name Bytes Meaning
we 0000000070701 ы.
FLAG 1. indicates the status of the FCB.


8 - FCB not assigned.

1 - FCB occupied, file currently not active

2 - FCR busy, file active.
Active means that z.!t. a
current sector of this file to
processing is in the data buffer


ACCESS l Access type for this file.
ß - reading
1 - writing
FNAM 8 file name
TRK# 1 Track number
SCTR# 1 sector number of the currently in work


common sector of the file.


PTR 1 Pointer to the next to be processed
Byte im oa Sector.


input/output buffer


In the DOS work area there are two buffer areas, one for the intermediate
mechanical storage of the sectors to be read or written and a second for
the sector occupancy overview.


Data Buffer_(DBFR)


This buffer has a size of 154 bytes and serves as intermediate storage for the
direct data exchange with the floppy disk.


When writing, the sectors are transferred from the data buffer to the diskette,
when reading, the sectors are transferred from the diskette to the data buffer.


During initialization, the 18 bytes of the data marker are written before the data buffer.
sets, so that when writing a sector, a complete block of information
tTag + data field) is available.


During normal read/write operations, only the first 178 bytes of the
Data buffer used to hold the data field of a sector.


The full length of 154 bytes is only required during diskette initialization.
necessary to scan a complete sector, including all synchronization
to be able to record fields, address fields and identifiers.


Sector Occupancy Overview (МАР)


At the end of the DOS workspace is an 88-byte buffer area, in
the sector allocation overview from sector 15 of track 8 on the diskette
is cached.


When saving a program or writing a data file, the
Sector selection and occupancy exclusively in this buffer area after to
Beginning of the current sector was read. Only when the saving process for the
program is complete, the occupancy overview is also back on the floppy disk
written.


- 93 -


8. Communication between the D05 and the floppy disk controller


The connection between the DOS and the floppy disk control is established via 4 on/off
output ports, these are the ports IH in hexadecimal notation. 11H,
12H and 13H.


PORT I@H = Kommando-Register (ü/P LATCH) 


The control information is transferred to the command register of the dis-
transfer chain control.


bit ? = drive 2 - select {1 = yes)

Bit 6 = access type {8 = write, i = read)

Bit 5 = Output pulse when writing to diskette
bit 4 = drive i - select (i = yes)

Bits 3-8 = step phases for toe adjustment


A copy of the port contents is kept in the DOS vectors in the LTHEPY field
this.


This field is initialized ті? 70118 00017,


The current stride phases are held in the "PHASE" field of the BOS vectors
and edited.


The selected drive is in the DK field.

When turning on a drive, drive selection (DK) and the step
phase (PHASE) linked to the content of LTHCPY,

PORT 11H = READ and STROBE SHIFT-Register 


The data is read from the diskette via this port. they will bit-
serially inserted from the left by the floppy disk controller.


- 95 -


PORT 12H = POLL DATA 

This port is used for synchronization when reading,

A negative pulse is generated when port 1i receives the next bit for
right.

PORT 13H = Schreibschutz-Status (READ/WRITE PROTECT STATUS) 


The write protection status of a floppy disk can be determined via this port
den (write protect notch taped over or not).


The result is passed in bit 7.
{1 = read only)


- 9 -





9, The most important DOS routines and their application іп machine programs


call and overview


As already mentioned several times, дає 005 occupies the address space 4000H to SFFFH. It
can be found in RüM blocks that are built into the floppy disk controller. The
Floppy disk control is connected to the system PBus of the computer.


The presence of a floppy disk controller is indicated when the computer is switched on
Checking a specific byte folder {AA 55 E7 18) determined. Will this ayte sequence
found, the subsequent initialization routine is called up automatically
fen, which, among other things, wraps around a BASIC vector so that the special DÜS commands are recognized
and can be executed.

This is the RESTART 10 vector at address 7803H in the BASIC communications
rich. If this vector is called by BASIC within the command analysis {at
address ID5AH), sa first checks the DOS whether a special Dọ5 command is pending.
If not, the program continues with the normal BASIC command execution.
puts. if a DüS command is recognized, the necessary execution
tinen called in DOS.


The DOS vector area in memory is also used by the DOS initialization routine.
constructed and filled with initial values.


If a floppy disk controller is connected to the system bus, you can within
of a machine program also ar the corresponding ayte sequence at address 4000H
check over.


The DOS itself consists of a number of self-contained routines. A
A large part of it can also be called up from machine programs, so that iIndividual
dual disk and data handlers can be programmed and executed.


You could edit the existing DOS file system with it, but also completely


create new structures and forms of processing, so 2. Ё, діе previously mentioned file
en with direct access that are not supported by DOS.


- 07 -


Jumping to the individual routines directly at their start addresses would be one of the
opportunities for use. They were the programs thereby however on a D0S version
fixed, since each time the DOS is changed, some of these addresses also change.
pushes


A more elegant solution is to use a jump bar at the top of the DOS that
was created by the manufacturer for such a purpose and calling up the
most important subroutines.


The call is made using the 789 reference


CALL uhhh


The following subroutines are accessible via this jump bar!





Name call function

РИВОК CALL 4009H Turn on the drive

PWROFF САЦ айан Turn off the drive

ERROR CALL ABBEN DOS error handling

RIMAP CALL ӘЛІН Load sector allocation grid

CLEAR CALL 4014H Clear sector

БУМАР CALL 4017H write sector occupancy grid
INIT САП АМАН Diskette initialization

651 CALL 4B1DH Interpret command parameters

HEX CALL 4020H Umwandlung ASCII in HEX 

IDAM CALL 4023H Look for address mark on diskette |
CREATE CALL 4026H Write entry to table of contents
MAP CALL 4029H Find a free sector

SEARCH CALL 402CH Search file in table of contents


- 98 -


FIND CALL ABZFH Search for free space in the table of contents


WRITE CALL 4032H Write sector to disk
READ CALL 4035H Read sector from disk

DLY CALL 4038H n milliseconds delay

STPIN САЦ. Advance 403BH head n tracks

STPOUT CALL 403EH Reset head n tracks

LOAD CALL 4041H load a program

SAVE CALL 4044H save a program


However, before you call one of these subroutines, very specific
parameters must be set, e.g. entry of the file name in the DOS vector, running
sales selection in the field DK etc...


It is also important to know what the results of such a subroutine are
where to deliver and which possible error codes may be reported.


You should also know which registers are modified in the subroutines;
so you can save them beforehand.


The following pages describe each of these subroutines with their
Input and output variables, registers used and error codes. For this 'each
a function description and an application/call example.


Two additional functions that you can't access via the jump bar, but
easy to program yourself are also listed. These are the running
factory selection and checking the write protection of the diskette.


Be careful not to change register IY in your program. There will
the start address of the DOS vectors is entered during initialization, which is not
not only the DOS, but also you constantly use when using the above routines
gene.


Some routines return error codes in register A. they should
check this in any case, whether your call was successful or not.


- 99 -


All data moved between the calculator and the floppy disk uses the
Data buffer in the DOS work area as temporary storage. Remember that at
every time a sector is read or written, its content is changed.


The operating system generates an interrupt every 28 ms, which normally
sometimes used to update the screen content and the keyboard
evaluate.

These interruptions are, however, in the case of diskette access, where it is very precise
leading intervals does not matter, not desirable} you would have error-free access
to make impossible.

For this reason you must use DI (disable interrupts) before accessing the floppy disk.


switch off the interrupts and then again with EI (enable interrupts).
turn on.


In many cases, you must also check for yourself whether the diskette to be processed
is read-only} otherwise write operations are performed anyway.


PWRON 

Turn on a drive

Call: CALL 4006H

Input: DK {(IY+11) in the DOS vectors = drive identifier
x'10° = drive 1
80' = drive 2

Exit! ~-

Registers used: A

Error handling: none


The drive selected in DK will be powered on. The drive motor is running
and the red LED on the front of the drive lights up.


- 188 -


Before accessing this drive, you should wait a few
wait a few milliseconds for the rotation speed to stabilize
this.


Example:


Disable DI sinterrupts
LD A 50H ` įSelect drive Z
LD (TҮ+11), A

CALL Ман Turn on the drive
LD RC, 50 wait 150ms

CALL 4038H 


Drive 2 powers on, then waits
the program 5B ms for stabilization.
PWROFF 

Turn off a drive

Call: CALL 4BBEH

Entry! ~-

Exit! -

Registers used: A

Error handling: none


A powered-on drive is powered off. The drive motor remains
stop and the LED on the front of the drive will turn off.


Example:


СА. МЕН Turn off the drive


- 181 -


ERROR 
DOS - error handling
Call: САП ABBEH or
JR WOMAN
Input: A = error code (d - 17)
Exit: Jump to the BASIC interpreter
Registers used! АҒ, RC, DE, HL
error handling! no
According to the error code transferred in the A register, an error
message issued. A possibly switched on drive is switched off
(with error code > i).
This routine differs from the other routines in that
not to the calling program after completion, but to the BASIC


interpreter is jumped.
The stack pointer is set to the BASIC stack.


Ас generated message further procedure
| 8 none to the BASIC interpreter (1B9AH)
і TSYNTAX ERROR output and further expiration over 1997H
2 ?FILE ALREADY EXISTS zum BASIC-Interpreter {1B9AH) 
3 DIRECTORY FULL -- 
4 DISK WRITE PROTECTED | -"- 
5 ?FILE NOT LOADED --
6 DISK 1/0 ERROR -'- 
7 DISK FULL -'- 


18


11


13
14
15
16


17


Example:


Annotation:


IFILE ALREADY OPEN 
IDISK 1/0 ERROR
IDISK 1/0 ERROR
IUNSUPPORTED DEVICE 
IFILE TYPE MISMATCH 
IFILE NOT FOUND 
IDISK BUFFER FULL
ADDITIONAL READ


ILLEGAL WRITE 


BREAK 
LD 8,7 
CALL WOMEN


zur BREAK-Rautine (1DABH) im BASIC 


'Load error code 7
Output message "DISK FULL".


The message "?DISK FULL" is output, and then
BASIC responds with READY.


Based on the line number field in the BASIC communication area (78A2H).
differ from the ERRÖR routine, whether it is a direct command or


is a program command.


If the field 78A2H/78A3H contains a value not equal to X'FFFF', this is treated as
line nuts are interpreted and these are output after the error message nit
(error codes I - 16).


- 193 -


This function can perhaps be used when testing machine programs
also use it sensibly by setting certain values ​​in 7BAZH/TBAIH,
which gives you an indication of the corresponding error when an error occurs
place in the program.


Example:


üR А 'check whether error occurred
JR ZXY my, go on!
LD HL, 18 ıSet line identifier
LD{78A2H}, HL
JP ABBEH iCall error routine
XY . 


If A contains a value not equal to 9, then the corresponding
Error message with reference to the place of occurrence
spend.
z. A= 3, dann "?DIRECTORY FULL IN 10", 
RDMAP 
Sectors - load occupancy grid
Call: CALL АВН


Entry! The corresponding drive must be switched on.


Exit! The sector allocation grid is in the 88-ryte buffer
at the end of the DÜS work area {MAPAREA).


The drive remains powered on.
Benutzte Register: АҒ, ВС, DE, Hi
error handling! In the event of an error, this routine automatically


the ERRÖR routine branches. A separate evaluation is
not possible.


- 184 -


The sectors - occupancy overview (occupancy grid) is taken from sector 15
track 0 is loaded from the floppy disk into RAM and into the
MAPAREA transmitted at the end of the BOS work area.


Note that you are responsible for turning the drive on and off yourself
have to take care.


Example:


FROM
LD 
LD


LD
CALL 
CALL
CALL
LD
LD
NO


A, 10H 
(IY+11),A 
4008H 
BC, 50
4038H 
MIN
4BBBH
Ls {1Y+52) 
N, (1%53)


Disable interrupts
Select drive 1


turn on


'Wait 58ms

}Load allocation grid
turn off the drive
ıStart address occupancy
jraster in HL

;Enable interrupts again


The sector occupancy overview is from the floppy disk
loaded in drive 1. The starting address of the MAPAREA
is then available in the register pair HL

placed.


Internally called routines!


CLEAR 


READ 


Deleting a sector on the floppy disk


Call: CALL ABIAH


Input: The corresponding drive must be switched on.


- 15 -


SCTR (IY+H7) = Sector number
DRAFT (1Y+18) = Track number


Exit! The addressed sector becomes physical on the disk
turned off,


Registers used: AF, BC, DE, HL


Error handling: In the event of an error, the routine becomes independent
branched into the ERRÖR routine. A custom bug-
treatment is not possible.


The sector addressed in the DOS vectors SCTR (1Y+7) and TRCK (1Y+18).
is physically erased on the diskette, ie with binary zeros
(5700?) overwritten,


Note that you are responsible for turning the drive on and off yourself
have to take care.


Check before erasing the sector; whether the disk is not write-
is protected.


Example:
Disable DI interrupts
LD A, 80H select drive 2
LD {IY#11),A 
САШ. 400BH and switch on
LD ВС,50 ‚8 as warranted
CALL 4038H 
IN À, (13H) iCheck write protection
GOLD TO
LD Au
JP M, 40BEH 'read only'!
LD {1Y+17),12 i Set sector number
LD {1Y+18),28 'set track number
СІ ЯН Delete sector
CALL ӨМ Turn off the drive
ЕІ Turn on interrupts again


- 106 -


sector 12 in track 28 of the floppy disk in drive 7
turned off.


Internally called routines! WRITE


SVMAP
Sectors - write the allocation grid to the floppy disk
Call: CALL 4017H
Entry? The corresponding drive must be switched on


The current allocation grid is in the DüS work area
іп der MAPAREA, 


Output: The sector allocation grid was in sector 15 of track Ø
written to the floppy disk in the selected drive.


The drive remains powered on.
Registers used: AF, BC, DE, HL
Error handling: In the event of an error, the routine goes directly to the


ERROR routine branched. Own error handling
can not.


The sectors - occupancy overview (occupancy grid) is taken from the corresponding
buffer of the D0S work area (MAPAREA) to the data buffer |
and written from there to sector 15 of track 8 on the diskette

ben. 


Note that you are responsible for turning the drive on and off yourself
have to cause.


Before restoring, check that the diskette is not writable
is protected


- 187 -


Example:


FROM
LD 
LD
CALL 
LD
CALL
IN 
OR 
LD
JP 
CALL
CALL
NO


A 10H 
(IY+11),A 
4008
BC, 50
4038 n

A (13H) 

AT

5.4

M, AEH
4017H 
ADBBH


Disable interrupts
sSelect Drive 1


turn on
58ms wait


'Perform write protection


'read only!
ıWrite back allocation grid
turn off the drive
Turn on interrupts again


The sectors - occupancy overview is from бет 005-
Workspace {iMAPAREA) to the floppy disk in drive 1
written back {Track B, Sector 15).


Internally called routines:


HOT


Initialize diskette


Call: CALL 4BiAH


WRITE 


Input: DK {IY+11) = drive identifier


Х'10° = drive
PEF = drive i


re 


Exit! The floppy disk in the selected drive has been
initialized.


Registers used:


АЕ, BC, DE, Hi, BC', DE', HL'


- 148 -


error handling! In the event of an error, the routine takes direct action
branches into the ERRÜR routine. An own
Error handling is not possible.


Біле floppy disk in the selected drive is reinitialized,
ie it is divided into 48 tracks a 16 sectors and with the corresponding
appropriate synchronization and identification marks.


All data previously found on this diskette will be included
turned off,


This routine handles the powering on and off of the drive itself.


The write protection is checked by INIT, the interrupts are closed
off start,


Example:


Select LD As 10H drive
LD ARENA
САННАН ‚Initialize diskette
I also turn on interrupts


The diskette in drive I is initialized.


Internally called routines! SHAM
STPIN 
STPOUT 
DLY 


- 109-


CSI 


Interpret command parameters

Call: CALL 40109

Entry! HL = beginning address of an ın quotes
included file name.
This must end with CAP or ':'


be.


Exit! The file name was checked and entered in the FNAM field
Transmit DüS vectors.


HL = address of terminator
Registers used: AF, B, HL
Error handling: If the filename is not enclosed in double quotes,
closed or not properly closed, so will


branches to BASIC and the message "?SYNTAX ERROR"
issued.


The first eight characters of a quoted file
names are transferred to the FNAM field of the DOS vectors.


After the closing quotation mark there must be a BASIC line
end identifier X'Q@' or a command separator ':'.


This routine is used by DOS-BASIC to check the syntax.


Disk access does not take place.


Example:


LD HL, DNAMI 'address filename
FOR THE CALL, you are transferred to FNAM


DNAMI DEFM "MAP OU


- 110 -


The file name "MAILBOX" is used for a subsequent
Transfer addressing to the DüS vector FNAM.
HEX 
Conversion ASCII to HEX
Call: CALL 4820H


Start address of a 4 byte hexadecimal
Number in ASCII format.


Entrance: HL


equivalent hexadecimal value (binary)
Input address + 4


Output: DE
HL 


H H 


Registers used: АҒ, DE, HL


Error handling: Carry = В - no error


tarry = I - conversion error


This routine can be used to convert a hexadecimal address input from the
keyboard to binary equivalent.


This routine is used by DOS-BASIC 2.8. from the BSAVE command to the interpreter
tation and acceptance of the program start address and end address.


Example:
LD HL,ASCHI Address sASCII value
CALL 4820H sumwandein 
JR NC, Ai scarry=B? ok, u Al
LD Ari sCarry=1, "SYNTAX ERROR" 
Output JP 4ABBEH via ERRÖR routine
Al LD (BIN), DE }Store binary value


ASCII ZhM gas station
AM DEFS 2


The


The character string in the "ASCII" field is converted to the
hexadecimal value and stored in the "BIN" field.
EXECUTION
Look for the address mark on the diskette
Call: CALL 4023H
Input: The corresponding drive must be switched on.


SETR (1Y+17)
TREK (IY+18)


Sector number
Track number


Exit! if the return jump is error-free, the write/
Reading head directly in front of the data mark of the sector sought.


Registers used: АҒ, BC, DE, HL


Error handling: 8 - Address mark found
9 - Address mark not found
1


7 - BREAK button pressed


s >
H 


shepp A = @, ist Z-Flag gesetzt
Schepp A <> 0, ist Z-Flag gelöscht


This routine is used to pre-write or read a sector
to position the read/write head in front of the data mark of this sector.


IDAM first positions the head over the desired track and reads
then address mark after address mark until the desired sector is found.
The writing or reading process for the data field must then begin immediately,
because the disk keeps spinning.


In the READ and WRITE routines for reading and writing a sector, respectively
IDAM already integrated.


- 112 -


Example:


FROM
LD 
LD
CALL 
LD
CALL
LD
LD
CALL
JP 


Disable interrupts


As 80H select drive 2
(TU+11), A

4BB8H Power on drive
BC,58 'sd ms wait

4038H 

(1Ү%17),6 'address sector
{IY+18),Address14 track
4023H sector search

NZ, ABBEH 'Error or BREAK !


Read or write sector


The read/write head is intended for subsequent reading
or write before data mark of sector & track
14 are positioned.


Internally used routines! STPIN


CREATE 


STPOUT 


Write an entry in the table of contents


Call: CALL 4026H


Input: file name in FNAM (1Ү+1)
Bateityp in TYPE (IY+9) 


The assignment grid must be loaded {MAPAREA).


The drive must be powered on.


Output: The file was entered in the table of contents, the first
Data sector for this file has been reserved.


Registers used: AF, BC, DE, HL


- 13-


Error handling: - Entry made

- File already exists

no place in the table of contents

- no free sector {disk full)

- An address mark was not found
a checksum error occurred while reading


- the BREAK button was pressed.


yes
I


grandchild
I 


>» > 2» > ә р Б
n


An entry is made in the table of contents for the file specified in FNAM
made and the first free sector for this data: reserved.


First, SEARCH is used to check whether a file with the same name
already exists. If not, FIND creates a free entry 11
Determined table of contents and searched for a first free sector with MAP.
If both were successful, the entry in the table of contents is
signature


File type, separator ':', file name and the address of the first
sector into the found 1&-byte entry of the table of contents
carry, and the table of contents is written back.


The allocation grid should then also be returned to the diskette.
be written, since otherwise the first sector will not be definitively written.
If you forget this, it will later become a double occupancy of this sec-
tors led and dasit possibly to an inextricable mess of
Data.


Of course, rascals can take advantage of this and two different entries
for the same file with different names in the table of contents
Before calling CREATE, you should definitely disable the write protection


check the disk.


The success of the action can be checked by evaluating the A register
become.


- 114 -


it 
etc
--
Mr
4.4.
etc
y.


CALL 
THE
CALL
IN 
AR
LD 
dP 
CALL
LD
CALL
LD
CALL
OR 
Czech Republic
CALL
CALL
He


DNAM DEFM 


(TU, YN
8008N

VS, 50
40Z8N

A, (138)

And 5

4.4

M, 400EN
NIN

HL, DNAM 
40 i DH
IYD E
402N

A
¥7.40
421 7H
HBBRH 


"KANTEI":°


Disable interrupts
Select drive I
and turn on

150 ms Pause 


;Check write protection


iwrite protected 1
iLoad allocation grid
filenames in the field

ıFNAM transferred

Set Type = 'B'

ıEnter the file in the table of contents
error occured?

1Yes, to the ERROR routine
'Write back allocation grid
turn off the drive
Allow interrupts again


For the binary file *KARTEI" (type = RB) an entry is made ins
table of contents of the diskette in drive 1.


Internally used routines:


SEARCH 
FIND 
MAP 
READ 
WRITE 


sH 


MAP


Detect a free sector on the bisquette
Call: CALL 4029H


Input: The assignment grid must be in the DOS work area
stehen (MAPPING),


Exit! МӘСТ (1Ү%21) = sector number
NTRK(IY+22) = Spurnummer


The sector addressed with NSCT and NTRK became іп
internal allocation grid (МАРАНЕА) reserved,


Registers used: АҒ, RC, HL
Error handling: A=0 - Sector found
A-7


- no more sector free


This routine determines a free sector in the internal ventilation
Overview of the B0S (MAPAREA), previously with the current occupancy grid
уап track &, sector 15 of the disk should be filled,


If a free sector is determined, the corresponding bit in the
Occupancy overview on | set.


Please note, however, that a final assignment is only made when
шепп the allocation grid was written back to the floppy disk.


The result (the sector address) is stored in the NSCT and МТК fields of the
Pass DOS vectors. Do you want to access the sector, eg, with
WRITE, you must first enter this address in the SCTR and TRCK fields
transfer,


No diskette access is carried out by the MAP routine,


- 116 -


Example:


Disable DI interrupts

LD {1Y+11) ,BOH select drive 2

CALL 4008H and switch on

LD BRC, 50 

CALL 4038H 150 ms Pause 

CALL TRUE }Belegungsraster laden

CALL 4027H Determine free sector

OR А error?

JP NZ, A4BBEH Yes, to the ERRÖR routine

CALL 4017H ;Write back allocation grid
CALL 4BBBH Turn off the drive

Turn EI interrupts back on


There is a free sector on the floppy disk in drive 2
determined and documented. The address of the sector is in
passed to the NSCT and NTRK fields of the DOS vectors.
SEARCH 

Find file in table of contents

Call: CALL 48B2CH

Input: The drive must be powered on.

O FNAM (IY+) = Datename

Output: if file exists, type of file in TYPE+1 (IY+10).
The sector of the table of contents with those found
Entry is in the data buffer.
DE points to the byte after the name.
SCTR and TRCK contain the address of the sector.


Registers used: AF, BC, DE, HL


-1417 -


Error handling: Ас-й0 - file does not exist
А= 2 - file available
А= 9 - address mark not found
A= i@ - checksum error while reading
A=13 - File does not exist
A=17 - the BREAK button was pressed


The SEARCH routine checks whether the table of contents of the addressed
A file with the name stored in FNAM already exists on the diskette.


The result of the search is transferred in the A register.


A= 2 means that there is a corresponding entry
is,
The sector of the table of contents is in the data
puffer and DE points to the ryte behind the name of the
found entry (= address of the 1st sector of this
File).
The SCTR and TRCK fields of the DOS vectors contain the
Sector address within the table of contents,
The field TYPE+1 (IY+1@} contains the type of the found
File. You may have to evaluate this yourself.


A=B or A= 13
have the same meaning. The specified file is
not included in the table of contents of the diskette.
A=B - the end of valid entries has been reached.
А=13 - the end of the table of contents became
reached.


All other values ​​of A indicate error or actuation
towards the BREAK button.


Example:


Disable DI interrupts
LD {IY+11), 10H jSelect drive i
CALL 4BBBH and switch on

LD BC,58 

CALL 4038H 150 ms Pause 

CALL TRUE ;Beleqgungsraster laden


- 118 -


LD HL, DNAM ıTransfer file name to FNAN


CALL  4B1DH 
CALL 4026H Search for file in table of contents
OR А 
JR 1,Аі 'not available!
SR BDH
JR І.А not available!
СР 2 errors?
JP NZ, 400EH Yes, to the ERROR routine
IN A, (13H) 'Check write protection
üR А
LD А4 
JP M, 4BBEH sread-only, to the ERRÖR routine
EX DE, HL Address of the entry in HL
LD DE, -i0 ıHL to the beginning of the entry
ADD HL, DE
LD (НЕ), і release entry
CALL 4032H Sector of the content dir. write back
Б release occupied sectors in the occupancy grid
А1 САШ 40179 'Write back occupancy grid
(Ай ABBBH Turn off the drive
Turn EI sInterrupts back on


ШАМ DEFM ° "DIARY"?


The "DIARY" file, if present, will appear in the table of contents
deleted from the floppy disk in drive 1. If not there,
the delete routine is skipped.


Note that this example has not been fully coded out.
In addition to deleting the entry in the table of contents


also all occupied sectors of this file in the occupancy
share grid.


Internally used routines! READ


-119 -


FIND 
look for a free entry in the table of contents
Call: CALL АЙ2ҒН
Input: The drive must be powered on


Exit! SCTR = sector number
TRCK = Spurnumser 


The addressed sector of the table of contents is set
in the data buffer.


HL points to the beginning of the free entry,


Registers used: AF, BC, DE, HL


Error handling: А= @ - ok, free entry determined
A=3 - no free entry available
A=9 - an address mark was not found
A=1B - checksum error occurred while reading
А = 17 – BREAK button pressed


A free entry appears in the table of contents of the switched-on floppy disk
determined.


The result is transmitted in register A.
If successful (A=8), the corresponding sector of the
Content directory in the data buffer and register pair HL points to the


Start of free entry.


The SCTR and TRCK fields contain the address of this sector.
An entry can now be made there.


- 128 -


Example:


FROM
LD 
CALL 
Generally
CALL
CALL
OR 
JP 
CALL
NO


{IY+11), 10H 
4BBBH

RC, 30 
4038 n
AF2GHN

A

M2, 90EN
400EN


tTurn off interrupts
'Select drive 1
turn on


58 ms Pause 

Determine ifree entry
ssuccessful?

in, to the ERROR routine
turn off the drive
sTurn interrupts back on


A free entry is made on the diskette in drive t
table of contents identified.


Internally used routines:


WRITE 


Write sector to disk


Call: CALL 4832H


READ 


Input: The drive must be powered on.


The sector to be written must be in the data buffer.


The address of the sector to be written must be in the
fields SCTR and TRCK of the DOS vectors.


Exit! The sector in the data buffer was written to the floppy disk
transfer.


Registers used!


АЕ, BC, DE, Hi) BC', DE', HL'


= Rbr


= 0 - ok, sector written
9 - Address stamp not found
t 


7 - the BREAK button was pressed


Error handling:


A
AT
A


The sensitive data in the data buffer are stored in the addressed sector
transferred to the floppy disk. The checksum is determined and sent to the sector
ended,


The sector including the data in front of the data buffer


mark (18 bytes) and the checksum are transmitted, i.e. a total of 148 bytes
are written to the disk.


Example:


Disable DI iInterrupts

LD {IY+11) 10H Select drive 1

CALL 4008H and switch on

LD 86,50 

CALL 4038H ‚30 ms Pause 

IN А, (ЗН) 'Check write protection

OR А 

L A,

JP MåADEH 'read only !

LD {IY+171.18 Sector number in SCTR

LD {(IY+t18),;5 ‚Spurnummer in TREK 

CALL 4032н Write sector to disk
OR À 'Error Occurred ?

JP M1,4JJEN iJa, zur ERROR-Routine

CALL 40OBH Turn off idrive

El 'turn interrupts back on


The data from the data buffer is stored on track 5, sector 18
written to the floppy disk in drive 1.


Internally used routines! IDAM


READ 

Read sector from disk

Call CALL 4B35H

Input: The drive must be powered on.
Address of the sector to be read in SCTR (IY+17) and
TREK (IY+18) of DOS vectors.
RETRY (IY+19) = number of read attempts

Exit! The read sector is in the data buffer.

Register in use! AF, RC, DE, HL


Error handling: - ok, sector was read


Address stamp not found
B - checksum wrong
7 - the BREAK button was pressed


k. e O 9
!


A
A
A
A


The sector addressed with SCTR and TRCK is transferred from the diskette to the
Transfer data buffer.


The checksum is determined and at the end of the sector тії the
value compared.


In the RETRY (IY+19) field of the DOS vectors you can specify how many read


attempts should be made if the checksum is incorrect (default value =
18).


Example:


Disable DI ¿interrupts
Ш {IY+11),BOH Select drive 2
CALL ABBBH and switch on

LD BC,58 58 ms Pause 

CALL 4038H 

LD аҮн7),18 ‚Sektornumser ip SCTR
LD {1Y+18),28 Spurnummer in TREK 


= 123 -


CALL 4835H read sector


OR А 'Error Occurred?

JP NZ, 4UBEH ıYes, to the ERRÖR routine

CALL 40ЙЕН Turn off the drive

ЕІ Turn on interrupts again


The data of sector 14 on track 28 is from the
Transfer disk in drive 2 to data buffer.


Internally used routines: IDAM


DL Y 
n milliseconds delay
Call: CALL 4038H
Entry! BC = number of milliseconds
Exit! -
Registers used: AF, RC
Error handling: -


This routine causes a delay whose duration is in milliseconds
is determined by the entry in the register pair BC.


Example:


Disable DI interrupts

LD BC, 1008 

CALL 4038H Wait 11 seconds

EI 'Allow interrupts again


causes a delay of one second,


STPIN 


Advance read/write head n tracks


Call: CALL AB3BH


Entry! The drive must be powered on.


BC = number of tracks


Exit! The read/write head was the appropriate
Number of tracks in front.
DTREK (IY+20) contains the new current track number.


Registers used:


Error handling:


AF, BC


The read/write head is moved by the number of tracks contained in B,
However, it is set up to a maximum of track 39.


Example:


FROM
LD 
CALL 
LD


CALL
CALL
NO


{IY+11)}, 10H 
8008N
80.50
4058N
B,18 
4B3BH
ME


sTurn off interrupts
'Select drive 1
turn on


150 as Pause 
;Put head in front of tracks


turn off the drive
ıAllow interrupts again


= 125 -


STPOUYT 

Reset read/write head n tracks

Call: CALL AB3EH

Input: The drive must be powered on.
ВС = number of tracks

Output: The read/write head was the corresponding
Number of tracks reset.
DTRCK (IY+28) contains the new current track number,

Registers used: AF, BC

Error handling: -


The read/write head is moved by the іп Ё contained number of tracks,
However, set back to track 0 at most,


Example:


Disable DI ıinterrupts

LD СҮ), Нн select drive 1

CALL 4008Н 'and turn on

LD BC,58 

CALL 4038H 150 ms Fause 

LD В,5 'Reset head 5 tracks
CALL 403ЕН 

CALL 400BH Power off drive

EI ıAllow interrupts again


LOAD
Loading a program or memory area
Exclamation: CALL AB41H


Input: file name in FNAM {IY+L)
File type in TYPE (ТҮ?)


Exit! 78A4/&5 = start address
T8F9/FA = Home addresses + I


Registers used: AF, BC, DE, HL


Error handling: А= 0 - ой
А = - address mark not found
A=18 - checksum error
A=12 - File found but wrong type


A=13 - File does not exist
A=17 - the BREAK button was pressed


The program specified in the FNAM field is copied from the floppy disk to memory
transfer.


After a successful course in the BASIC communication area at
Address 78Ah/AS is the start address and at address 78F9/FA the end addressti
of the memory area passed.


This routine only works for files that are in the table of contents
nis in bytes 12 and 13 the start address and in bytes 14 and 15
contain the end address ti of the file, ie not with standard data files.


If a program is run with the BASIC commands SAVE or BSAVE or by
saved machine programs with the SAVE routine, this is done
entry automatically.


The LOAD routine automatically turns the drive on and off and switches
also the interruptions.


Example:


LD (IY+11), BBH drive ? choose

LD HL, DNAM File name in FNAM

SASH AVN jeintragen

LD catch iTyp = 'P' (Binär-Datei)

SAP 4B4iH iProgramm laden

OR А error occurred ?

JR M7,40JEN iyas zur ERROR-Routine

Turn EI jInterrupts back on

РМАМ ’"GRAFDR":’ 

The binary file or machine program "GRAFDR" is created by

transferred to memory from the floppy disk in drive i.
Internally used routines: SEARCH


SAVE


READ 


Saving a program or memory area to floppy disk


Call:


Entry:


Exit!


CALL BROTHER


7BA4/A5 = start address of the memory area
TBF9/FA = end address+i of the memory area


The drive must be powered on.


FNAM {1Y+1) = Date-/Programname
TYPE {1Y+9) = type of file


The addressed memory area was written to the floppy disk
transferred and under the specified name in the content
directory entered.


Registers used: AF, BC, DE, HL


- 128 -


Error handling: If errors occur, the SAVE routine
branched directly into the ERRÜR routine. An own
Error handling is not possible.


A memory area or program is moved from memory to floppy disk
transfer. Start and end address are in the corresponding BASIC
to pointers 78A4 and 78F9.


This area will be named with the name specified in FNAM and the one in the first
Byte of TYPE entered type entered in the table of contents.


You must first switch on the floppy disk yourself; it will be turned off
upon completion of the save from the SAVE routine.


You should also check the write protection beforehand.
Example!


LD HL, BOBBH Start address

LD (78А4Н) HL 

LD HL , FOBOH endaddresse + 1

LD (78F9H}, HL

LD HL, DNAM {file name in FNAM

CALL 4ЙІШН transmitted

LD YD R ıType = binary file

LD {(IV+11)}, 10H iSelect drive 1

CALL АВН jand switch on

IN Ás (13H) 1Check write protection

OR А 

L.D. Ara

JP М,40ЙЕН ;read-only!

CALL 4044H ;Write memory area to diskette
Turn on El interrupts again


SHAM MEM °"TESTRAT":'


The page 8000 - SFFF is under the name "TESTDAT"
transferred to the floppy disk with type "B".


internally called routines: READ CREATE
MAP SEARCH 
WRITE 


- 179 -


To complement these rhombuses, here are two more functions that you
found in many of the previous examples.


DRIVE
Selecting a drive
This function cannot be accessed via the jump bar.
However, it is easy to carry out, since only the correct code
of the selected drive into the DK {IY+11) field of the DOS vectors
is to be entered.


Drive 1 = LD (IY+11),10H


LD (NIGHT), 80


drive ?
This code is used by the PWRON routine to do the right thing
drive selected and turned on,

WPROCT 

Check write protection
In many cases you are responsible for setting the write protection
to check the status of a diskette before performing a write operation
to lead.
You can get the information about this via port 13H. Is the write protection
notch of the diskette is pasted over, a | above-


give.


To do this, the drive must be selected and switched on.


- 130 -


Example:


IN 
OR 
LD 
JP 


A, (13H) 
A

Art 

M, 400EN


Read in port 13

‚Byte prufen 

Set error code

if negative, then the
Disk write protected.


If the floppy disk is write-protected, error code 4 is used in the
ERRÖR routine branches and there the message "DISK WRITE PROTECTED"


issued.


-131-


To.
9


month for
month over
30 pages
Programme 


every month:

** Programs for all common home computers

* Application examples from practice

* Market overview, tests and buying advice for additional equipment
and home computers

* Getting started tutorials on collecting

* Tips and tricks

* Interesting, current and entertaining from the
home computer scene

* News, Club nights
Get the latest issue from your local magazine
dealer or request an introductory booklet directly from the bird
Publisher, Reader Service HC, PO Box 67 40, 8700 Würzburg.





The entry-level models for pupils and students


LASER 210.8 KByte


8 colors, programming language BASIC.


LASER 310 with the same equipment as Laser 210,
but 18 KB RAM and with a typewriter keyboard.


Floppy disk controller for 2 drives
with LASER-DOS, storage capacity 80 Kbytes.








Generalimporteur: CE o TEC Trading GmbH 
Long row 29, 2000 Hamburg 1


active and creative computing


Sooner or later every computer owner gets the
Desire for floppy disk storage overpowering. Too large
are the advantages of direct access over the
sequential way of working. That's the only way you can do it all
Utilize the full potential of your device.


This volume describes the floppy disk operating system of the
Laser computer in its structure and its application
described in detail. In addition to the BASIC DOS commands
will also include the interface and applicability in
Machine programs explained. Application examples
make it easier to get started in the world of floppy disks.


VOGEL BOOK PUBLISHING
WURZBURG 


ISBN 3-8023-0868-9


