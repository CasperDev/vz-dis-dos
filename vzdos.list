# file opened: vzdos.asm
   1  0000              	DEVICE NOSLOT64K
   2  0000              	SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
   3  0000              ;***************************************************************************************************
   4  0000              ;
   5  0000              ; The R/W head is positioned to the desired track by applying the control signals to the stepper motor.
   6  0000              ; The stepper motor rotates 2 steps per track.
   7  0000              ;
   8  0000              ; In order to assure proper positioning of the R/W head after powering on, a step-out operation
   9  0000              ; (recalibration) is performed until it is locked at track 00 by the track 00 stopper.
  10  0000              ;
  11  0000              ; The drive is selected by activating the -BENBL line. After being selected, the drive motor
  12  0000              ; and the LED on the front panel bezel will be on.
  13  0000              ;
  14  0000              CR					EQU		$0d		; CR char
  15  0000              UP					EQU		$1b		; Cursor Up
  16  0000
  17  0000              SpaceKeyRow			equ		$68ef	; Address of Keyboard Row with SPACE key
  18  0000              SpaceKeyCol			equ		4		; Bit Number of Keyboard Column with SPACE key
  19  0000              BreakKeybRow		equ		$68df	; Address of Keyboard Row with BREAK key
  20  0000
  21  0000              BreakKeybMask		equ		%00000100	; Bitmask of Keyboard Column with BREAK key
  22  0000              BreakKeyCol			equ		2		; Bit Number of Keyboard Column with BREAK key
  23  0000
  24  0000
  25  0000              ;***************************************************************************************************
  26  0000              ;
  27  0000              ;   S Y S T E M   V A R I A B L E S
  28  0000              ;
  29  0000              ;---------------------------------------------------------------------------------------------------
  30  0000              SysVecParse			equ		$7804	;
  31  0000              SYS_BASIC_STACK		EQU		$78a0
  32  0000              SYS_MEMTOP_PTR    	EQU     $78B1   ; (WORD) Najwyższy dostępny adres RAM
  33  0000              SYS_STRING_SPACE	EQU		$78d6 	; String space pointer (current location).
  34  0000              SYS_BACKSP_STACK	EQU		$78e8   ; backspaced stack address
  35  0000              SYS_BASIC_PRG		equ		$7ae9	; address of first byte of BASIC program
  36  0000              SYS_BASIC_START_PTR	equ 	$78a4	; 16bit pointer to start of current BASIC Program
  37  0000              SYS_BASIC_END_PTR	equ 	$78f9	; 16bit pointer to end of current BASIC Program
  38  0000              SYS_ARR_START_PTR	equ 	$78fb	; 16bit pointer to start of area for BASIC arrays
  39  0000              SYS_ARR_END_PTR		equ 	$78fd	; 16bit pointer to end of area for BASIC arrays
  40  0000              BasicLineNumber		equ		$78a2	; Current line being processed by BASIC.
  41  0000              ErrorLineNumber		equ		$78ea	; BASIC Line where Error occoured
  42  0000              EditLineNumber		equ		$78ec	; BASIC Line currently edited
  43  0000
  44  0000
  45  0000              ;***************************************************************************************************
  46  0000              ;
  47  0000              ;   S Y S T E M   R O U T I N E S
  48  0000              ;
  49  0000              ;---------------------------------------------------------------------------------------------------
  50  0000              SysPrintChar		equ		$032a	; Prints char from register a to screen (also spec char like CR)
  51  0000              SysNewLine			equ		$20f9	; Outputs CR to screen if cursor is not already at the beginning of line
  52  0000              SysMsgOut			EQU		$28a7	; MsgOut(hl)
  53  0000              SysStartBASIC		equ		$1a19	; Start BASIC
  54  0000              SysRaiseSyntaxError	equ		$1997	; Raise BASIC Syntax Error routine
  55  0000              SysBASICStop		equ		$1da0	; BASIC STOP proc with Break Key pressed
  56  0000              SysBASICReset		equ 	$1b9a	; Restart BASIC
  57  0000              PrintMsg_IN_LINE	equ		$0fa7	; Print IN <line number from hl>
  58  0000              SysCheckNextChar	equ 	$1d78	; BASIC Parser Main routine
  59  0000              SysExecRUN			equ		$36e9	; Execute BASIC RUN command
  60  0000              SysParseNextExpr	equ		$1d1e	; Parse next BASIC expression
  61  0000              SysRunBASICPrg		equ		$1ae8	; Start running BASIC Program (from address pushed on Stack)
  62  0000
  63  0000              TXT_READY			equ		$1929	; 'READY' text
  64  0000
  65  0000              ;***************************************************************************************************
  66  0000
  67  0000              ; Bit 0..Bit 3 : Stepper-motor control phases (active HIGH)
  68  0000              ; Bit 4        : Drive 1 enable.(active HIGH)
  69  0000              ; Bit 5        : Write Data (inverted, active LOW writes 1)
  70  0000              ; Bit 6        : Write Request (active LOW)
  71  0000              ; Bit 7        : Drive 2 enable (active HIGH)
  72  0000              FLCTRL				equ		$10		; (write only) Floppy Disk Control Register
  73  0000
  74  0000              FLDATA				equ		$11		; (read only) Data Byte from FDC
  75  0000
  76  0000              FLPOOL				equ		$12		; (read only) Clock Pulse from FDC (Bit 7)
  77  0000
  78  0000              FLWR_PROTECT		equ		$13		; (read only) Write Protect Status (Bit 7) 1=Write Protected
  79  0000
  80  0000              ;--------- Bits
  81  0000              FL_STEPPER_MASK	equ	%00001111		; Bit 0 -.Bit 3 :Stepper-motor control phases (active HIGH)
  82  0000              FL_DRV_1_ENABLE	equ	%00010000		; Bit 4 : Drive 1 enable.(active LOW)
  83  0000              FL_WRITE_DATA	equ	%00100000		; Bit 5 : Write Data Bit
  84  0000              FL_WRITE_REQ	equ	%01000000		; Bit 6 : Write Request (active LOW)
  85  0000              FL_DRV_2_ENABLE	equ	%10000000		; Bit 7 : Drive 2 enable (active LOW)
  86  0000
  87  0000
  88  0000              	STRUCT	FCB
  89  0000 ~            OPENFLAG	defb	0
  90  0000 ~            STATUS		defb	0
  91  0000 ~            FNAM:		BLOCK	8," "
  92  0000 ~            TRKN0		defb	0
  93  0000 ~            SCTRNO		defb	0
  94  0000 ~            ENTRY		defb	0
  95  0000              	ENDS
  96  0000
  97  0000              ; DOSVTR = IY
  98  0000              ;NAME BYTES OFFSET
  99  0000              	STRUCT DOSVTR
 100  0000 ~            FILNO 	defb	0 				; IY+00 FILE#
 101  0000 ~            FNAM	BLOCK	8," "			; IY+0l FILENAME
 102  0000 ~            TYPE 	defw	0				; IY+09 FILE TYPE
 103  0000 ~            DK 		defb	0 				; IY+0b SELECTED DRIVE# PATTERN
 104  0000 ~            RQST 	defb	0				; IY+0c REQUEST CODE
 105  0000 ~            SOURCE 	defb	0 				; IY+0d SOURCE DRIVE FOR DCOPY
 106  0000 ~            UBFR 	defw	0				; IY+0e USER BUFFER ADDRESS
 107  0000 ~            DESTIN 	defb	0				; IY+10 DEST DRIVE FOR DCOPY
 108  0000 ~            SCTR 	defb	0 				; IY+11 USER SPEC. SECTOR NUMBER
 109  0000 ~            TRCK 	defb	0				; IY+12 USER SPEC. TRACK NUMBER
 110  0000 ~            RETRY 	defb	0				; IY+13 RETRY COUNT
 111  0000 ~            DTRCK 	defb	0 				; IY+14 CURRENT TRACK NUMBER
 112  0000 ~            NSCT 	defb	0				; IY+15 NEXT SCTR NUMBER
 113  0000 ~            NTRK 	defb	0				; IY+16 NEXT TRK NUMBER
 114  0000 ~            FCB1 	FCB		0				; IY+17 FILE CONTROL BLOCK 1 OPEN FLAG, STATUS, FNAM, TRK#, SCTR#, ENTRY IN SCTR
 115  0000 ~            FCB2 	FCB		0 				; IY+22 FILE CONTROL BLOCK 2 OPEN FLAG, STATUS, FNAM, TRK#, SCTR#, ENTRY IN SCTR
 116  0000 ~            DBFR 	defw	0				; IY+31 DATA BUFFER ADDRESS
 117  0000 ~            LTHCPY 	defb	0				; IY+33 COPY OF LATCH
 118  0000 ~            MAPADR 	defw	0				; IY+34 TRACK/SECTOR MAP ADDRESS
 119  0000 ~            TRKCNT 	defb	0				; IY+36 TRK CNT FOR DCOPY
 120  0000 ~            TRKPTR 	defb	0				; IY+37 TRK PTR FOR DCOPY
 121  0000 ~            PHASE 	defb	0				; IY+38 STEPPER PHASE
 122  0000              	ENDS
 123  0000
 124  0000
 125  0000              FileNo 			equ		$00			; IY+00 FILE# (1 byte)
 126  0000
 127  0000              Filename		equ		$01			; IY+0l FILENAME (8 bytes)
 128  0000
 129  0000              FileType 		equ		$09			; IY+09 FILE TYPE (2 bytes)
 130  0000
 131  0000              SelectedDrive 	equ		$0b 		; IY+0b SELECTED DRIVE# PATTERN (1 byte)
 132  0000
 133  0000              RequestCode 	equ		$0c			; IY+0c REQUEST CODE (1 byte)
 134  0000
 135  0000              CopySrc 		equ		$0d			; IY+0d SOURCE DRIVE FOR DCOPY (1 byte)
 136  0000
 137  0000              CopyBuf 		equ		$0e			; IY+0e USER BUFFER ADDRESS (2 bytes)
 138  0000
 139  0000              CopyDst 		equ		$10			; IY+10 DEST DRIVE FOR DCOPY (1 byte)
 140  0000
 141  0000              UserSectorNo 	equ		$11			; IY+11 USER SPEC. SECTOR NUMBER (1 byte)
 142  0000
 143  0000              UserTrackNo 	equ		$12			; IY+12 USER SPEC. TRACK NUMBER (1 byte)
 144  0000
 145  0000              RetryCount 		equ		$13			; IY+13 RETRY COUNT (1 byte)
 146  0000
 147  0000              CurTrackNo 		equ		$14			; IY+14 CURRENT TRACK NUMBER (1 byte)
 148  0000
 149  0000              NextSectorNo 	equ		$15			; IY+15 NEXT SCTR NUMBER (1 byte)
 150  0000
 151  0000              NextTrackNo 	equ		$16			; IY+16 NEXT TRK NUMBER (1 byte)
 152  0000
 153  0000              FCBlock1 		equ		$17			; IY+17 FILE CONTROL BLOCK 1 [OPEN FLAG, STATUS, FNAM, TRK#, SCTR#, ENTRY IN SCTR (13 bytes)
 154  0000
 155  0000              FCBlock2 		equ		$24			; IY+24 FILE CONTROL BLOCK 2 [OPEN FLAG, STATUS, FNAM, TRK#, SCTR#, ENTRY IN SCTR (13 bytes)
 156  0000
 157  0000              DataBuf 		equ		$31			; IY+31 DATA BUFFER ADDRESS (2 bytes)
 158  0000
 159  0000              FLCtrlShadow 	equ		$33			; IY+33 COPY OF LATCH (1 byte)
 160  0000
 161  0000              MapAddress 		equ		$34			; IY+34 TRACK/SECTOR MAP ADDRESS (2 bytes)
 162  0000
 163  0000              CopyTrackCount 	equ		$36			; IY+36 TRK CNT FOR DCOPY (1 bytes)
 164  0000
 165  0000              CopyTrackPtr 	equ		$37			; IY+37 TRK PTR FOR DCOPY (1 bytes)
 166  0000
 167  0000              StepPhase 		equ		$38			; IY+38 STEPPER PHASE (1 byte) contains 4 bits Phase values duplicated in high and low nibble
 168  0000
 169  0000              SectorHeader	equ		$43			; IY+43 SECTOR HEADER (10 bytes) (ending sequence: GAP2 + IDAM ending)
 170  0000
 171  0000              SectorBuffer	equ		$4d			; IY+4d BUFFER DATA (154 bytes)
 172  0000
 173  0000              MapBuffer		equ		$e7			; IY+e7 MAP BUFFER
 174  0000
 175  0000
 176  0000              ;***************************************************************************************************
 177  0000              ; ROM SEQUENCE & INIT PROC
 178  0000              	org	04000h
 179  4000 AA 55 E7 18  	db $aa,$55,$e7,$18																				;4000	aa 55 e7 18
 180  4004
 181  4004              ;***************************************************************************************************
 182  4004 F3           	di								; disable Interrupts											;4004	f3
 183  4005 C3 47 40     	jp DOSInit						; DOS initialize routine 										;4005	c3 47 40
 184  4008 C3 41 5F     	jp PowerOn						; Disk power ON													;4008	c3 41 5f 	. A _
 185  400B C3 52 5F     	jp PowerOff						; Disk power OFF												;400b	c3 52 5f 	. R _
 186  400E C3 41 42     	jp DOSError						; Error handling routine										;400e	c3 41 42 	. A B
 187  4011 C3 17 47     	jp ReadMap						; Read the track map of the disk								;4011	c3 17 47 	. . G
 188  4014 C3 49 47     	jp ClearSector					; Clear a sector of the disk									;4014	c3 49 47 	. I G
 189  4017 C3 54 47     	jp SaveMap						; Save the track map to the disk								;4017	c3 54 47 	. T G
 190  401A C3 08 4B     	jp DiskInit						; Initialize the disk											;401a	c3 08 4b 	. . K
 191  401D C3 67 53     	jp CSI							; Command string interpreter									;401d	c3 67 53 	. g S
 192  4020 C3 B9 53     	jp Asc2Hex						; Convert ASCII to HEX											;4020	c3 b9 53 	. . S
 193  4023 C3 EA 53     	jp ReadIDAddressMark			; Read identification address mark								;4023	c3 ea 53 	. . S
 194  4026 C3 7B 58     	jp CREATEDIRENTRY				; Create an entry in directory									;4026	c3 7b 58 	. { X
 195  4029 C3 BF 58     	jp FINDEMPTYSEC					; Search for empty sector										;4029	c3 bf 58 	. . X
 196  402C C3 13 59     	jp FINDFILE						; Search for file in directory									;402c	c3 13 59 	. . Y
 197  402F C3 68 59     	jp FINDFREESPACE				; Search empty space in directory								;402f	c3 68 59 	. h Y
 198  4032 C3 A1 59     	jp WRITESECTOR					; Write a sector to disk										;4032	c3 a1 59 	. . Y
 199  4035 C3 27 5B     	jp READSECTOR					; Read a sector from disk										;4035	c3 27 5b 	. ' [
 200  4038 C3 BE 5E     	jp DELAYMS						; Delay mS in reg C												;4038	c3 be 5e 	. . ^
 201  403B C3 CE 5E     	jp STEPIN						; Track step in													;403b	c3 ce 5e 	. . ^
 202  403E C3 01 5F     	jp STEPOUT						; Track step out												;403e	c3 01 5f 	. . _
 203  4041 C3 B1 43     	jp LOADFILE						; Load a file from disk											;4041	c3 b1 43 	. . C
 204  4044 C3 6E 44     	jp SAVEFILE						; Save a file to disk											;4044	c3 6e 44 	. n D
 205  4047
 206  4047              ;***************************************************************************************************
 207  4047              ; DOS INIT
 208  4047              ;***************************************************************************************************
 209  4047              DOSInit:
 210  4047              ; Setup Drive Controller
 211  4047              ; * Step Mottor 0-0-0-1
 212  4047              ; * Drive 1 disabled
 213  4047              ; * Drive 2 disabled
 214  4047              ; * Write Request (inactive)
 215  4047              ; * Write Data = 1
 216  4047 3E 61        	ld a,%01100001					; Write Req + Write Data + StepPhase (1)						;4047	3e 61 	> a
 217  4049 D3 10        	out (FLCTRL),a					; set Flopy Control byte										;4049	d3 10 	. .
 218  404B
 219  404B              ; -- Allocate DOS memory - check top memory
 220  404B 2A B1 78     	ld hl,(SYS_MEMTOP_PTR)			; hl - current top memory address								;404b	2a b1 78 	* . x
 221  404E E5           	push hl							; save hl - top address											;404e	e5 	.
 222  404F              ; -- reserve 310 bytes
 223  404F 11 CA FE     	ld de,-310						; de = -310 bytes to substract									;404f	11 ca fe 	. . .
 224  4052 19           	add hl,de						; substract 310 bytes											;4052	19 	.
 225  4053              ; -- set DOS Base address to IY
 226  4053 E5           	push hl							; transfer hl - new top address									;4053	e5 	.
 227  4054 FD E1        	pop iy							; ... to IY register - DOS Base									;4054	fd e1 	. .
 228  4056
 229  4056              ; -- check if enough memory
 230  4056 E1           	pop hl							; hl - old top memory											;4056	e1 	.
 231  4057 11 00 80     	ld de,$8000						; de = -32767													;4057	11 00 80 	. . .
 232  405A B7           	or a							; clear Carry Flag												;405a	b7 	.
 233  405B ED 52        	sbc hl,de						; check if top mem less than $8000								;405b	ed 52 	. R
 234  405D D2 6A 40     	jp nc,.continue					; no - continue													;405d	d2 6a 40 	. j @
 235  4060
 236  4060              ; -- not enough memory - display error and jump to BASIC
 237  4060 21 44 41     	ld hl,ERR_InsufficientMemoryForDOS	; Error message												;4060	21 44 41 	! D A
 238  4063 FB           	ei								; enable interrupts												;4063	fb 	.
 239  4064 CD A7 28     	call SysMsgOut					; print message on screen										;4064	cd a7 28 	. . (
 240  4067 C3 19 1A     	jp SysStartBASIC				; jump to BASIC													;4067	c3 19 1a 	. . .
 241  406A
 242  406A
 243  406A
 244  406A              ; **************************************************************************************************
 245  406A              ; Reserve 311 bytes for DOS
 246  406A              ; Reallocate all BASIC pointers
 247  406A              .continue:
 248  406A              ; -- set new MEMTOP 311 bytes lower
 249  406A 19           	add hl,de						; restore hl back to old top memory								;406a	19 	.
 250  406B 11 37 01     	ld de,311						; reserve 311 bytes of memory									;406b	11 37 01 	. 7 .
 251  406E ED 52        	sbc hl,de						; substract 311 bytes from old top mem							;406e	ed 52 	. R
 252  4070 22 B1 78     	ld (SYS_MEMTOP_PTR),hl			; store as new MEMTOP											;4070	22 b1 78 	" . x
 253  4073              ; -- update BASIC String Space Pointer
 254  4073 22 D6 78     	ld (SYS_STRING_SPACE),hl		; store as new String Space Pointer								;4073	22 d6 78 	" . x
 255  4076              ; -- update BASIC Stack Address
 256  4076 11 32 00     	ld de,50						; 50 bytes of String Space										;4076	11 32 00 	. 2 .
 257  4079 B7           	or a							; clear Carry Flag												;4079	b7 	.
 258  407A ED 52        	sbc hl,de						; calculate new address											;407a	ed 52 	. R
 259  407C 22 A0 78     	ld (SYS_BASIC_STACK),hl			; store as new BASIC Stack Address								;407c	22 a0 78 	" . x
 260  407F              ; -- update BASIC Backspaced Stack Address
 261  407F 2B           	dec hl																							;407f	2b 	+
 262  4080 2B           	dec hl							; decrement by 2												;4080	2b 	+
 263  4081 22 E8 78     	ld (SYS_BACKSP_STACK),hl		; store as new Backspaced Stack Address							;4081	22 e8 78 	" . x
 264  4084              ; -- set CPU Stack Pointer to new value
 265  4084 23           	inc hl																							;4084	23 	#
 266  4085 23           	inc hl							; increment back by 2											;4085	23 	#
 267  4086 F9           	ld sp,hl						; set CPU stack Pointer											;4086	f9 	.
 268  4087
 269  4087
 270  4087
 271  4087              ; **************************************************************************************************
 272  4087              ; Initialize DOS Block Memory
 273  4087              ; Reset all parameters to default values
 274  4087              ;
 275  4087 FD 36 14 00  	ld (iy+CurTrackNo),0			; Current Track Number = 0										;4087	fd 36 14 00 	. 6 . .
 276  408B FD 36 12 00  	ld (iy+UserTrackNo),0			; User Track Number	= 0											;408b	fd 36 12 00 	. 6 . .
 277  408F FD 36 11 00  	ld (iy+UserSectorNo),0			; User Sector Number = 0										;408f	fd 36 11 00 	. 6 . .
 278  4093 FD 36 13 0A  	ld (iy+RetryCount),10			; Reset Retry Counter = 10										;4093	fd 36 13 0a 	. 6 . .
 279  4097 FD 36 16 00  	ld (iy+NextTrackNo),0			; Next Track = 0												;4097	fd 36 16 00 	. 6 . .
 280  409B FD 36 15 00  	ld (iy+NextSectorNo),0			; Next Sector = 0												;409b	fd 36 15 00 	. 6 . .
 281  409F FD 36 17 00  	ld (iy+FCBlock1),0				; File Control Block 1 Open Flag = not open 					;409f	fd 36 17 00 	. 6 . .
 282  40A3 FD 36 24 00  	ld (iy+FCBlock2),0				; File Control Block 2 Open Flag = not open						;40a3	fd 36 24 00 	. 6 $ .
 283  40A7 FD 36 39 00  	ld (iy+039h),000h				; TODO ;40a7	fd 36 39 00 	. 6 9 .
 284  40AB FD 36 0B 10  	ld (iy+SelectedDrive),$10		; Selected Drive 1												;40ab	fd 36 0b 10 	. 6 . .
 285  40AF FD 36 33 61  	ld (iy+FLCtrlShadow),%01100001	; Update Shadow Register with value written to FDC Control 		;40af	fd 36 33 61 	. 6 3 a
 286  40B3              ; -- Stepper Phase contains 4 bits values duplicated in high and low nibble
 287  40B3              ; this way futher rotation operations used by StepIn and StepOut don't need any corrections
 288  40B3 FD 36 38 11  	ld (iy+StepPhase),%00010001		; Stepper Phase 0001-0001										;40b3	fd 36 38 11 	. 6 8 .
 289  40B7
 290  40B7              ; -- set address of Sector Data as current operation Buffer
 291  40B7 FD E5        	push iy							; copy IY register (DOS Base) to HL								;40b7	fd e5 	. .
 292  40B9 E1           	pop hl																							;40b9	e1 	.
 293  40BA 11 4D 00     	ld de,SectorBuffer				; offset from DOS Base to Sector Buffer							;40ba	11 4d 00 	. M .
 294  40BD 19           	add hl,de						; hl - absolute address of Sector Data Buffer					;40bd	19 	.
 295  40BE FD 75 31     	ld (iy+DataBuf),l				; store as Data Buffer (low byte)								;40be	fd 75 31 	. u 1
 296  40C1 FD 74 32     	ld (iy+DataBuf+1),h				; store as Data Buffer (high byte)								;40c1	fd 74 32 	. t 2
 297  40C4
 298  40C4              ; -- fill Sector header data
 299  40C4              ; only 10 bytes of Sector Header ending sequence: GAP2 + IDAM ending
 300  40C4 11 F6 FF     	ld de,-10						; de = -10 														;40c4	11 f6 ff 	. . .
 301  40C7 19           	add hl,de						; hl - 10 bytes before sector buffer							;40c7	19 	.
 302  40C8 EB           	ex de,hl						; de - SectorHeader address 									;40c8	eb 	.
 303  40C9 21 5D 4D     	ld hl,SectorGAP2Data			; hl - default Sector Header ending sequence (source)			;40c9	21 5d 4d 	! ] M
 304  40CC 01 0A 00     	ld bc,10						; 10 bytes to copy												;40cc	01 0a 00 	. . .
 305  40CF ED B0        	ldir							; copy template data											;40cf	ed b0 	. .
 306  40D1
 307  40D1              ; --set address for Disk Map Buffer
 308  40D1 FD E5        	push iy							; copy IY register (DOS base) to HL								;40d1	fd e5 	. .
 309  40D3 E1           	pop hl																							;40d3	e1 	.
 310  40D4 11 E7 00     	ld de,MapBuffer					; offset from DOS base to Map Buffer							;40d4	11 e7 00 	. . .
 311  40D7 19           	add hl,de						; hl - absolute address of Map Buffer							;40d7	19 	.
 312  40D8 FD 75 34     	ld (iy+MapAddress),l			; store low byte												;40d8	fd 75 34 	. u 4
 313  40DB FD 74 35     	ld (iy+MapAddress+1),h			; store high byte												;40db	fd 74 35 	. t 5
 314  40DE
 315  40DE              ; -- reset Head position in Floppy Drive 1 to Track 00
 316  40DE              ; move Head 40 times so it will be on Track 00 no matter where it was when power off
 317  40DE CD 41 5F     	call PowerOn					; Disk power ON													;40de	cd 41 5f 	. A _
 318  40E1 06 28        	ld b,40							; max 40 tracks to STEPOUT										;40e1	06 28 	. (
 319  40E3 CD 01 5F     	call STEPOUT					; step out 40 times 											;40e3	cd 01 5f 	. . _
 320  40E6 CD 52 5F     	call PowerOff					; Disk power OFF												;40e6	cd 52 5f 	. R _
 321  40E9
 322  40E9              ; -- Hook Up BASIC parser (RST 10) to allow DOS Commands
 323  40E9 21 93 42     	ld hl,DOSCheckNextChar			; NextToken replace routine										;40e9	21 93 42 	! . B
 324  40EC 22 04 78     	ld (SysVecParse),hl				; set new jump address to intercept BASIC Parser				;40ec	22 04 78 	" . x
 325  40EF
 326  40EF              ; -- print DOS BASIC V1.2
 327  40EF 21 13 41     	ld hl,TxtDosBasic12				; text message "DOS BASIC V1.2"									;40ef	21 13 41 	! . A
 328  40F2 FB           	ei								; enable interrupt 												;40f2	fb 	.
 329  40F3 CD A7 28     	call SysMsgOut					; print message on screen via System routine					;40f3	cd a7 28 	. . (
 330  40F6
 331  40F6              ; -- check if another ROM is present - chain initialization
 332  40F6 21 00 60     	ld hl,$6000						; ROM address 													;40f6	21 00 60 	! . `
 333  40F9              ; -- test ROM sequence: AA 55 E7 18
 334  40F9 3E AA        	ld a,$aa						; a - 1st sequence byte											;40f9	3e aa 	> .
 335  40FB BE           	cp (hl)							; test if matches												;40fb	be 	.
 336  40FC 23           	inc hl							; hl - next ROM address											;40fc	23 	#
 337  40FD 20 10        	jr nz,.finish					; no - start BASIC												;40fd	20 10 	  .
 338  40FF 3E 55        	ld a,$55						; a - 2nd sequence byte											;40ff	3e 55 	> U
 339  4101 BE           	cp (hl)							; test if matches												;4101	be 	.
 340  4102 23           	inc hl							; hl - next ROM address											;4102	23 	#
 341  4103 20 0A        	jr nz,.finish					; no - start BASIC												;4103	20 0a 	  .
 342  4105 3E E7        	ld a,$e7						; a - 3rd sequence byte											;4105	3e e7 	> .
 343  4107 BE           	cp (hl)							; test if matches												;4107	be 	.
 344  4108 23           	inc hl							; hl - next ROM address											;4108	23 	#
 345  4109 20 04        	jr nz,.finish					; no - start BASIC												;4109	20 04 	  .
 346  410B 3E 18        	ld a,$18						; a - 4th sequence byte											;410b	3e 18 	> .
 347  410D BE           	cp (hl)							; test if matches												;410d	be 	.
 348  410E 23           	inc hl							; hl - next ROM address											;410e	23 	#
 349  410F              .finish:
 350  410F C2 19 1A     	jp nz,SysStartBASIC				; no - start BASIC --------------------------------------------	;410f	c2 19 1a 	. . .
 351  4112              ; -- if match found then start ROM init
 352  4112 E9           	jp (hl)							; jump to ROM Init ($6004) ------------------------------------	;4112	e9 	.
 353  4113
 354  4113
 355  4113
 356  4113              ; **************************************************************************************************
 357  4113              ; DOS Title Text
 358  4113              TxtDosBasic12:
 359  4113 1B 1B 44 4F  	db UP,UP,"DOS BASIC V1.2",CR,CR,0	;4113	1b 1b 44 4f 53 20 42 41 53 49 43 20 56 31 2e 32 0d 0d 00
 359  4117 53 20 42 41
 359  411B 53 49 43 20
 359  411F 56 31 2E 32
 359  4123 0D 0D 00
 360  4126
 361  4126
 362  4126
 363  4126              ; **************************************************************************************************
 364  4126              ; Table with addresses of Error Texts
 365  4126              ; Every entry contain absolute address of Error Text
 366  4126              ; Errors 0,1 and 17 are handled by ROM standard routines so there is no Texts in DOS ROM
 367  4126              ErrorsTable:
 368  4126              									; Error 00   NO ERROR (OK)
 369  4126              									; Error 01   SYNTAX ERROR
 370  4126 62 41        	dw ERR_FileAlreadyExists		; Error 02   FILE ALREADY EXISTS								;4126	62 41
 371  4128 77 41        	dw ERR_DirectoryFull			; Error 03   DIRECTORY FULL										;4128	77 41
 372  412A 87 41        	dw ERR_DiskWriteProtected		; Error 04   DISK WRITE PROTECTED								;412a	87 41
 373  412C 9D 41        	dw ERR_FileNotOpen				; Error 05   FILE NOT OPEN										;412c	9d 41
 374  412E AC 41        	dw ERR_DiskIOError				; Error 06   DISK I/O ERROR										;412e	ac 41
 375  4130 BC 41        	dw ERR_DiskFull					; Error 07   DISK FULL											;4130	bc 41
 376  4132 C7 41        	dw ERR_FileAlreadyOpen			; Error 08   FILE ALREADY OPEN									;4132	c7 41
 377  4134 AC 41        	dw ERR_DiskIOError				; Error 09   SECTOR NOT FOUND									;4134	ac 41
 378  4136 AC 41        	dw ERR_DiskIOError				; Error 10   CHECKSUM ERROR										;4136	ac 41
 379  4138 DA 41        	dw ERR_UnsupportedDevice		; Error 11   UNSUPPORTED DEVICE									;4138	da 41
 380  413A EE 41        	dw ERR_FileTypeMismatch			; Error 12   FILE TYPE MISMATCH									;413c	ee 41
 381  413C 02 42        	dw ERR_FileNotFound				; Error 13   FILE NOT FOUND										;413c	02 42
 382  413E 12 42        	dw ERR_DiskBufferFull			; Error 14   DISK BUFFER FULL									;413e	12 42
 383  4140 24 42        	dw ERR_IllegalRead				; Error 15   ILLEGAL READ										;4140	24 42
 384  4142 32 42        	dw ERR_IllegalWrite				; Error 16   ILLEGAL WRITE										;4142	32 42
 385  4144              									; Error 17   BREAK
 386  4144
 387  4144
 388  4144              ; **************************************************************************************************
 389  4144              ; Error Texts
 390  4144              ; Every text is terminated with byte 0 (NULL)
 391  4144              ERR_InsufficientMemoryForDOS:
 392  4144 3F 49 4E 53  	db "?INSUFFICIENT MEMORY FOR DOS",CR,0	;4144	3f 49 4e 53 55 46 46 49 43 49 45 4e 54 20 4d 45 4d 4f 52 59 20 46 4f 52 20 44 4f 53 0d 00
 392  4148 55 46 46 49
 392  414C 43 49 45 4E
 392  4150 54 20 4D 45
 392  4154 4D 4F 52 59
 392  4158 20 46 4F 52
 392  415C 20 44 4F 53
 392  4160 0D 00
 393  4162              ERR_FileAlreadyExists:
 394  4162 3F 46 49 4C  	db "?FILE ALREADY EXISTS",0				;4162	3f 46 49 4c 45 20 41 4c 52 45 41 44 59 20 45 58 49 53 54 53 00
 394  4166 45 20 41 4C
 394  416A 52 45 41 44
 394  416E 59 20 45 58
 394  4172 49 53 54 53
 394  4176 00
 395  4177              ERR_DirectoryFull:
 396  4177 3F 44 49 52  	db "?DIRECTORY FULL",0					;4177	3f 44 49 52 45 43 54 4f 52 59 20 46 55 4c 4c 00
 396  417B 45 43 54 4F
 396  417F 52 59 20 46
 396  4183 55 4C 4C 00
 397  4187              ERR_DiskWriteProtected:
 398  4187 3F 44 49 53  	db "?DISK WRITE PROTECTED",0			;4187	3f 44 49 53 4b 20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44 00
 398  418B 4B 20 57 52
 398  418F 49 54 45 20
 398  4193 50 52 4F 54
 398  4197 45 43 54 45
 398  419B 44 00
 399  419D              ERR_FileNotOpen:
 400  419D 3F 46 49 4C  	db "?FILE NOT OPEN",0					;419d	3f 46 49 4c 45 20 4e 4f 54 20 4f 50 45 4e 00
 400  41A1 45 20 4E 4F
 400  41A5 54 20 4F 50
 400  41A9 45 4E 00
 401  41AC              ERR_DiskIOError:
 402  41AC 3F 44 49 53  	db "?DISK I/O ERROR",0					;41ac	3f 44 49 53 4b 20 49 2f 4f 20 45 52 52 4f 52 00
 402  41B0 4B 20 49 2F
 402  41B4 4F 20 45 52
 402  41B8 52 4F 52 00
 403  41BC              ERR_DiskFull:
 404  41BC 3F 44 49 53  	db "?DISK FULL",0						;41bc	3f 44 49 53 4b 20 46 55 4c 4c 00
 404  41C0 4B 20 46 55
 404  41C4 4C 4C 00
 405  41C7              ERR_FileAlreadyOpen:
 406  41C7 3F 46 49 4C  	db "?FILE ALREADY OPEN",0				;41c7	3f 46 49 4c 45 20 41 4c 52 45 41 44 59 20 4f 50 45 4e 00
 406  41CB 45 20 41 4C
 406  41CF 52 45 41 44
 406  41D3 59 20 4F 50
 406  41D7 45 4E 00
 407  41DA              ERR_UnsupportedDevice:
 408  41DA 3F 55 4E 53  	db "?UNSUPPORTED DEVICE",0				;41da	3f 55 4e 53 55 50 50 4f 52 54 45 44 20 44 45 56 49 43 45 00
 408  41DE 55 50 50 4F
 408  41E2 52 54 45 44
 408  41E6 20 44 45 56
 408  41EA 49 43 45 00
 409  41EE              ERR_FileTypeMismatch:
 410  41EE 3F 46 49 4C  	db "?FILE TYPE MISMATCH",0				;41ee	3f 46 49 4c 45 20 54 59 50 45 20 4d 49 53 4d 41 54 43 48 00
 410  41F2 45 20 54 59
 410  41F6 50 45 20 4D
 410  41FA 49 53 4D 41
 410  41FE 54 43 48 00
 411  4202              ERR_FileNotFound:
 412  4202 3F 46 49 4C  	db "?FILE NOT FOUND",0					;4202	3f 46 49 4c 45 20 4e 4f 54 20 46 4f 55 4e 44 00
 412  4206 45 20 4E 4F
 412  420A 54 20 46 4F
 412  420E 55 4E 44 00
 413  4212              ERR_DiskBufferFull:
 414  4212 3F 44 49 53  	db "?DISK BUFFER FULL",0				;4212	3f 44 49 53 4b 20 42 55 46 46 45 52 20 46 55 4c 4c 00
 414  4216 4B 20 42 55
 414  421A 46 46 45 52
 414  421E 20 46 55 4C
 414  4222 4C 00
 415  4224              ERR_IllegalRead:
 416  4224 3F 49 4C 4C  	db "?ILLEGAL READ",0					;4224	3f 49 4c 4c 45 47 41 4c 20 52 45 41 44 00
 416  4228 45 47 41 4C
 416  422C 20 52 45 41
 416  4230 44 00
 417  4232              ERR_IllegalWrite:
 418  4232 3F 49 4C 4C  	db "?ILLEGAL WRITE",0					;4232	3f 49 4c 4c 45 47 41 4c 20 57 52 49 54 45 00
 418  4236 45 47 41 4C
 418  423A 20 57 52 49
 418  423E 54 45 00
 419  4241
 420  4241
 421  4241
 422  4241              ;***************************************************************************************************
 423  4241              ; Error handling routine
 424  4241              ; Reads the content of register A and prints the .error message before going back to BASIC.
 425  4241              ; IN: A - Error Code (0..17)
 426  4241              ; OUT: Exit to BASIC
 427  4241              ;***************************************************************************************************
 428  4241              DOSError:
 429  4241              ; -- cleanup BASIC if  ???
 430  4241 F5           	push af							; save a - Error Code											;4241	f5 	.
 431  4242 FD 7E 39     	ld a,(iy+039h)		;4242	fd 7e 39 	. ~ 9
 432  4245 B7           	or a			;4245	b7 	.
 433  4246 C4 44 51     	call nz,ClearBASIC		; no - Clear BASIC program and select drive D1							;4246	c4 44 51 	. D Q
 434  4249 F1           	pop af					; restore a - Error Code												;4249	f1 	.
 435  424A
 436  424A              ;***************************************************************************************************
 437  424A              ; Handle error:
 438  424A              ; * 0 - no error 					-> switch to BASIC
 439  424A              ; * 1 - Syntax Error 				-> handled by BASIC standard routine
 440  424A              ; * 2..16 - custom DOS error 		-> show error text and switch to BASIC
 441  424A              ; * 17 - Break Key pressed 			-> hadled by BASIC standard routine
 442  424A
 443  424A              ; -- check if No Error (Error Code = 0)
 444  424A B7           	or a							; check if 0 - No Error											;424a	b7
 445  424B 28 34        	jr z,.GotoBASICReady			; yes - switch to BASIC											;424b	28 34
 446  424D
 447  424D              ; -- check if Syntax Error (Error Code 1)
 448  424D FE 01        	cp 01							; check if Error Code = 1 (Syntax Error)						;424d	fe 01
 449  424F CA 97 19     	jp z,SysRaiseSyntaxError		; yes - use BASIC routine to handle Error						;424f	ca 97 19 	. . .
 450  4252
 451  4252              ; -- check if BREAK (Error Code 17)
 452  4252 FE 11        	cp 17							; check if Error Code = 17 (BREAK)								;4252	fe 11 	. .
 453  4254 CA 8A 42     	jp z,.GotoBASICBreak			; yes - switch to BASIC handler									;4254	ca 8a 42
 454  4257
 455  4257              ; -- Move Screen cursor to begin of next line
 456  4257 F5           	push af							; save a - Error Code											;4257	f5 	.
 457  4258 CD F9 20     	call SysNewLine					; call system routine to print CR 								;4258	cd f9 20 	. .
 458  425B F1           	pop af							; restore a - Error Code										;425b	f1 	.
 459  425C
 460  425C              ; -- ErrorsTable has addresses for errors 2..16 so shift begin by 2 entries 2 bytes each
 461  425C              ; -- calculate address of error text for Code
 462  425C 21 22 41     	ld hl,ErrorsTable-4				; table with addr of error messages (minus 2 entries)			;425c	21 22 41 	! " A
 463  425F CB 27        	sla a							; a = Error Code x 2 bytes per entry							;425f	cb 27 	. '
 464  4261 85           	add a,l							; add to hl														;4261	85 	.
 465  4262 6F           	ld l,a																							;4262	6f 	o
 466  4263 3E 00        	ld a,0																							;4263	3e 00 	> .
 467  4265 8C           	adc a,h																							;4265	8c 	.
 468  4266 67           	ld h,a							; hl - points to entry in ErrorsTable for specyfic Error		;4266	67 	g
 469  4267 5E           	ld e,(hl)						; e - low byte of oddress of Error text							;4267	5e 	^
 470  4268 23           	inc hl							; next byte of address											;4268	23 	#
 471  4269 56           	ld d,(hl)						; de - address of Error text									;4269	56 	V
 472  426A EB           	ex de,hl						; hl - address of Error text									;426a	eb 	.
 473  426B
 474  426B              ; -- turn DIsk Off and print error on screen
 475  426B CD 52 5F     	call PowerOff					; Turn Off Disk power 											;426b	cd 52 5f 	. R _
 476  426E CD A7 28     	call SysMsgOut					; print error text												;426e	cd a7 28 	. . (
 477  4271
 478  4271              ; -- set BASIC line number where Error was found
 479  4271 2A A2 78     	ld hl,(BasicLineNumber)			; hl - Current line being processed by BASIC or Command			;4271	2a a2 78 	* . x
 480  4274 22 EA 78     	ld (ErrorLineNumber),hl			; set BASIC Line where Error occoured							;4274	22 ea 78 	" . x
 481  4277 22 EC 78     	ld (EditLineNumber),hl			; BASIC Line currently edited									;4277	22 ec 78 	" . x
 482  427A
 483  427A              ; -- check if error was found in program line or wrote on screen as direct command (-1)
 484  427A 23           	inc hl							; hl will be 0 if outside of BASIC program						;427a	23 	#
 485  427B 7D           	ld a,l																							;427b	7d 	}
 486  427C B4           	or h							; check if hl not equal 0 (error in line)						;427c	b4 	.
 487  427D 2B           	dec hl							; hl - Basic line												;427d	2b 	+
 488  427E C4 A7 0F     	call nz,PrintMsg_IN_LINE		; yes - Print IN <line number from hl>							;427e	c4 a7 0f 	. . .
 489  4281
 490  4281              .GotoBASICReady:
 491  4281              ; -- transfer control to BASIC/ROM
 492  4281 01 19 1A     	ld bc,SysStartBASIC				; address of BASICReady entry point routune to execute			;4281	01 19 1a 	. . .
 493  4284 2A E8 78     	ld hl,(SYS_BACKSP_STACK)		; initial address of BASIC stack								;4284	2a e8 78 	* . x
 494  4287 C3 9A 1B     	jp SysBASICReset				; reset BASIC variables and go to BASIC Ready -----------------	;4287	c3 9a 1b 	. . .
 495  428A
 496  428A              .GotoBASICBreak:
 497  428A              ; -- transfer control to BASIC/ROM simulating BREAK Key Pressed
 498  428A CD 52 5F     	call PowerOff					; Disk power OFF												;428a	cd 52 5f 	. R _
 499  428D 3E 01        	ld a,1							; BREAK Key to simulate via BASIC								;428d	3e 01 	> .
 500  428F FB           	ei								; enable interrupts												;428f	fb 	.
 501  4290 C3 A0 1D     	jp SysBASICStop					; jump to BASIC STOP routine ----------------------------------	;4290	c3 a0 1d 	. . .
 502  4293
 503  4293
 504  4293              ;***************************************************************************************************
 505  4293              ; Routine called when BASIC parse next char/token
 506  4293              ; IN: hl - address of next char/token to parse
 507  4293              ;     [sp] - return address to calling routine
 508  4293
 509  4293              DOSCheckNextChar:
 510  4293              ; -- test if this code was called from specific ROM routine
 511  4293 D9           	exx								; save bc,de,hl to alteranate register set						;4293	d9 	.
 512  4294 21 5B 1D     	ld hl,01d5bh					; expected return address										;4294	21 5b 1d 	! [ .
 513  4297 D1           	pop de							; de - return address to calling routine						;4297	d1 	.
 514  4298 B7           	or a							; clear Carry flag												;4298	b7 	.
 515  4299 ED 52        	sbc hl,de						; is return address is eual to expected? 						;4299	ed 52 	. R
 516  429B D5           	push de							; push back original return address on stack					;429b	d5 	.
 517  429C D9           	exx								; restore bc,de,hl from alternate register set					;429c	d9 	.
 518  429D C2 78 1D     	jp nz,SysCheckNextChar			; not equal - jump to ROM original routine 						;429d	c2 78 1d 	. x .
 519  42A0
 520  42A0              ; -- this code was calld from expected ROM routine
 521  42A0 E5           	push hl							; save hl - address of next char to parse						;42a0	e5 	.
 522  42A1 CD 78 1D     	call SysCheckNextChar			; call BASIC Parser Main routine first							;42a1	cd 78 1d 	. x .
 523  42A4 20 02        	jr nz,.startParse				; if not end of BASIC expression - try to parse					;42a4	20 02 	  .
 524  42A6
 525  42A6              ; -- end of expression (':') or end of BASIC line ('\0') found
 526  42A6              .exit:
 527  42A6 D1           	pop de							; restore stack pointer 										;42a6	d1 	.
 528  42A7 C9           	ret								; ---------------------- End of Proc --------------------------	;42a7	c9 	.
 529  42A8
 530  42A8              ;***************************************************************************************************
 531  42A8              ; Parse BASIC expression
 532  42A8              ; IN: hl - address of next char/token to parse
 533  42A8              ;     a - next char/token to parse
 534  42A8              ;---------------------------------------------------------------------------------------------------
 535  42A8              .startParse:
 536  42A8 B7           	or a							; is it BASIC token char (a >= 128)?							;42a8	b7 	.
 537  42A9 F2 EF 42     	jp p,ParseCmdText				; no - parse expression as text (command)						;42a9	f2 ef 42 	. . B
 538  42AC              ; -- command token
 539  42AC FE 8E        	cp $8e							; is it RUN command?											;42ac	fe 8e 	. .
 540  42AE 20 F6        	jr nz,.exit						; no - return to BASIC ----------------------------------------	;42ae	20 f6 	  .
 541  42B0
 542  42B0              ;***************************************************************************************************
 543  42B0              ; DOS Command RUN
 544  42B0              ; Syntax: RUN "filaname"
 545  42B0              ; Load one file specified by filename (which has the file type code "T") from a Floppy Disk
 546  42B0              ; and RUN it (execute). Filename may have no more than 8 characters. If user typed just RUN command
 547  42B0              ; without filename then standard BASIC 'RUN' command will be parsed and executed.
 548  42B0              .parse_RUN:
 549  42B0 23           	inc hl							; hl - next char or token										;42b0	23 	#
 550  42B1 7E           	ld a,(hl)						; a -  next char or token										;42b1	7e 	~
 551  42B2 B7           	or a							; is it '\0' - end of BASIC line								;42b2	b7 	.
 552  42B3 28 10        	jr z,.backToROM					; yes - just 'RUN' command - jump to ROM original routine -----	;42b3	28 10 	( .
 553  42B5
 554  42B5              ; -- expected name of file enclosed in double quote chars '"'
 555  42B5 FE 20        	cp ' '							; is it ' ' char?												;42b5	fe 20 	.
 556  42B7 28 F7        	jr z,.parse_RUN					; yes - ignore it - parse next char								;42b7	28 f7 	( .
 557  42B9 FE 22        	cp '"'							; is it double quote char '"' ?									;42b9	fe 22 	. "
 558  42BB 20 08        	jr nz,.backToROM				; no - no filename after 'RUN' - jump to ROM original routine 	;42bb	20 08 	  .
 559  42BD
 560  42BD              ; -- found '"' char - expecting filename
 561  42BD D1           	pop de							; de - address of command start to parse 						;42bd	d1 	.
 562  42BE 01 DB 45     	ld bc,LoadAndRunFile			; bc - routine to load file and execute BASIC RUN command		;42be	01 db 45 	. . E
 563  42C1 2B           	dec hl							; hl - last char of filename									;42c1	2b 	+
 564  42C2 EB           	ex de,hl						; hl - start of command RUN, de - end of filename				;42c2	eb 	.
 565  42C3 18 61        	jr ExecDOSCmd					; execute LoadAndRunFile and return to BASIC ------------------	;42c3	18 61 	. a
 566  42C5              .backToROM:
 567  42C5 E1           	pop hl							; restore hl - parse point 										;42c5	e1 	.
 568  42C6 C3 78 1D     	jp SysCheckNextChar				; jump to ROM original routine --------------------------------	;42c6	c3 78 1d 	. x .
 569  42C9
 570  42C9
 571  42C9              ;***************************************************************************************************
 572  42C9              ; There is a chance that 2 DOS commands will be tokenized "mixed" way: BRUN and DCOPY.
 573  42C9              ; Because standard BASCI already have commands RUN and COPY it can tokenize above DOS comands
 574  42C9              ; as 1 ASCII char and standard command token: 'B'+token of RUN and 'D'+token of COPY.
 575  42C9              ; This routine covers these two cases.
 576  42C9              TryParseMixedSyntax:
 577  42C9 E1           	pop hl							; restore hl - parse point 										;42c9	e1 	.
 578  42CA E5           	push hl							; save hl back - parse point									;42ca	e5 	.
 579  42CB
 580  42CB              ; -- check if it's stored as "mixed" BRUN (where 'B' is ASCII char and 'RUN' is a token $8e)
 581  42CB 23           	inc hl							; hl - point to next char of expression							;42cb	23 	#
 582  42CC 7E           	ld a,(hl)						; a - parsed char 												;42cc	7e 	~
 583  42CD FE 42        	cp 'B'							; is it 'B'?													;42cd	fe 42 	. B
 584  42CF 20 0B        	jr nz,.checkDCOPY				; no - check possible DCOPY Command								;42cf	20 0b 	  .
 585  42D1 23           	inc hl							; point to next char											;42d1	23 	#
 586  42D2 7E           	ld a,(hl)						; a - parsed char/token											;42d2	7e 	~
 587  42D3 FE 8E        	cp $8e							; is it BASIC 'RUN" token?										;42d3	fe 8e 	. .
 588  42D5 20 14        	jr nz,.backToROM				; no - transfer control to BASIC Parser Main routine			;42d5	20 14 	  .
 589  42D7 06 06        	ld b,6							; b - index of DOS 'BRUN' Command								;42d7	06 06 	. .
 590  42D9 C5           	push bc							; put bc on stack - DOS 'BRUN' Command							;42d9	c5 	.
 591  42DA 18 39        	jr ExecIdxDOSCmd				; execute DOS command determined by index in register b			;42da	18 39 	. 9
 592  42DC
 593  42DC              .checkDCOPY:
 594  42DC              ; -- check if it's stored as "mixed" DCOPY (where 'D' is ASCII char and 'COPY' is a token $96)
 595  42DC FE 44        	cp 'D'							; is it 'D'?													;42dc	fe 44 	. D
 596  42DE 20 0B        	jr nz,.backToROM				; no - transfer control to BASIC Parser Main routine			;42de	20 0b 	  .
 597  42E0 23           	inc hl							; point to next char											;42e0	23 	#
 598  42E1 7E           	ld a,(hl)						; a - parsed char/token											;42e1	7e 	~
 599  42E2 FE 96        	cp $96							; is it BASIC 'COPY" token?										;42e2	fe 96 	. .
 600  42E4 20 05        	jr nz,.backToROM				; no - transfer control to BASIC Parser Main routine			;42e4	20 05 	  .
 601  42E6 06 0E        	ld b,14							; b - index of DOS 'DCOPY' Command								;42e6	06 0e 	. .
 602  42E8 C5           	push bc							; put bc on stack - DOS 'DCOPY' Command							;42e8	c5 	.
 603  42E9 18 2A        	jr ExecIdxDOSCmd				; execute DOS command determined by index in register b			;42e9	18 2a 	. *
 604  42EB              .backToROM:
 605  42EB E1           	pop hl							; restore hl - parse point 										;42eb	e1 	.
 606  42EC C3 78 1D     	jp SysCheckNextChar				; jump to ROM original routine --------------------------------	;42ec	c3 78 1d 	. x .
 607  42EF
 608  42EF
 609  42EF
 610  42EF              ;***************************************************************************************************
 611  42EF              ; Parse and execute BASIC text expression
 612  42EF              ; IN: hl - address of text expression
 613  42EF              ParseCmdText:
 614  42EF 11 2D 43     	ld de,DOSCmdNames-1				; de - table with all DOS commands text (will be incremented)	;42ef	11 2d 43 	. - C
 615  42F2 06 FF        	ld b,-1							; b - Command number 											;42f2	06 ff 	. .
 616  42F4
 617  42F4              .compareCmd:
 618  42F4 4E           	ld c,(hl)						; c - char to parse												;42f4	4e 	N
 619  42F5 EB           	ex de,hl						; hl - address in Commands Table, de - point to parsed char 	;42f5	eb 	.
 620  42F6
 621  42F6              .searchNext:
 622  42F6              ; -- find start of DOS command text (with bit 7 set)
 623  42F6 23           	inc hl							; point to next char in Commands Table							;42f6	23 	#
 624  42F7 B6           	or (hl)							; is 7th bit set?												;42f7	b6 	.
 625  42F8 F2 F6 42     	jp p,.searchNext				; no - keep search start of DOS Command							;42f8	f2 f6 42 	. . B
 626  42FB              ; -- found start of command
 627  42FB 04           	inc b							; b - number of command (00..0d)								;42fb	04 	.
 628  42FC 7E           	ld a,(hl)						; a - 1st char of DOS Command									;42fc	7e 	~
 629  42FD E6 7F        	and %01111111					; clear 7th bit (convert to ascii) - end of table if was $80?	;42fd	e6 7f 	. 
 630  42FF 28 C8        	jr z,TryParseMixedSyntax		; yes - try parse "mixed" format BRUN or DCOPY					;42ff	28 c8 	( .
 631  4301 B9           	cp c							; is equal to parsed char? 										;4301	b9 	.
 632  4302 20 F2        	jr nz,.searchNext				; no - keep search start of DOS command							;4302	20 f2 	  .
 633  4304              ; -- first char match
 634  4304 EB           	ex de,hl						; de - address in Commands Table, hl - point to parsed char		;4304	eb 	.
 635  4305 E5           	push hl							; save hl - point to parsed char								;4305	e5 	.
 636  4306              .compareNext:
 637  4306 13           	inc de							; point to next char in Commands Table							;4306	13 	.
 638  4307 1A           	ld a,(de)						; a - next char of Command										;4307	1a 	.
 639  4308 B7           	or a							; is bit 7 set? (start of next command name)					;4308	b7 	.
 640  4309 FA 15 43     	jp m,ExecIdxDOSCmd				; yes - execute DOS command determined by index in register b	;4309	fa 15 43 	. . C
 641  430C              ; -- compare next chars
 642  430C 4F           	ld c,a							; c - char of Command from Commands Table						;430c	4f 	O
 643  430D 23           	inc hl							; point to next parsed char										;430d	23 	#
 644  430E 7E           	ld a,(hl)						; a - parsed char												;430e	7e 	~
 645  430F B9           	cp c							; is the same as char from Commands Table?						;430f	b9 	.
 646  4310 28 F4        	jr z,.compareNext				; yes - continue to compare next chars							;4310	28 f4 	( .
 647  4312              ; -- chars differs - try next entry from Commands Table
 648  4312 E1           	pop hl							; restore hl - start of parsed text								;4312	e1 	.
 649  4313 18 DF        	jr .compareCmd					; compare to next DOS Command ---------------------------------	;4313	18 df 	. .
 650  4315
 651  4315
 652  4315              ;***************************************************************************************************
 653  4315              ; Find entry point of DOS Command and Execute it
 654  4315              ; IN: b - index of DOS Command to execute
 655  4315              ExecIdxDOSCmd:
 656  4315 78           	ld a,b							; a - DOS Command index											;4315	78 	x
 657  4316              ; -- clean up stack
 658  4316 C1           	pop bc							; take out value - move CPU stack pointer						;4316	c1 	.
 659  4317 C1           	pop bc							; take out value - move CPU stack pointer						;4317	c1 	.
 660  4318 C1           	pop bc							; take out value - move CPU stack pointer						;4318	c1 	.
 661  4319
 662  4319              ; -- find address of code to execute for this command
 663  4319 CB 27        	sla a							; a - command index * 2 (every table entry has 16bit address) 	;4319	cb 27 	. '
 664  431B 4F           	ld c,a							; c - offset in DOS Command Pointers table						;431b	4f 	O
 665  431C 06 00        	ld b,0							; bc - offset in DOS Command Pointers table						;431c	06 00 	. .
 666  431E EB           	ex de,hl						; de - ;431e	eb 	.
 667  431F 21 71 43     	ld hl,DOSCmdPointers			; hl - table with pointers for every DOS Command 				;431f	21 71 43 	! q C
 668  4322 09           	add hl,bc						; add offset for DOS Command									;4322	09 	.
 669  4323 4E           	ld c,(hl)						; c - LSB of code address 										;4323	4e 	N
 670  4324 23           	inc hl							; point to next byte with MSB									;4324	23 	#
 671  4325 46           	ld b,(hl)						; bc - address of code to execute for DOS Command				;4325	46 	F
 672  4326
 673  4326
 674  4326              ; IN: de - last char of filename
 675  4326              ;     bc - address of routine to execute
 676  4326              ExecDOSCmd:
 677  4326 21 1E 1D     	ld hl,SysParseNextExpr			; hl address of System routine to continue run next expression	;4326	21 1e 1d 	! . .
 678  4329 E5           	push hl							; push on stack as return after executing DOS command			;4329	e5 	.
 679  432A EB           	ex de,hl						; hl - next char after filename									;432a	eb 	.
 680  432B 23           	inc hl							; hl - parse point												;432b	23 	#
 681  432C C5           	push bc							; push routine on stack from bc									;432c	c5 	.
 682  432D C9           	ret								; execute code routine ----------------------------------------	;432d	c9 	.
 683  432E
 684  432E
 685  432E
 686  432E              ; **************************************************************************************************
 687  432E              ; DOS Commands Names for Parser
 688  432E              ; First byte of Name has bit 7 set to 1. End of table is marked with byte $80 (0 with 7th bit set).
 689  432E              DOSCmdNames:
 690  432E CC 4F 41 44  	defb 	$80|'L','OAD'			; 00 LOAD			; Load program file from Disk				;432e	cc 4f 41 44 	D
 691  4332 D3 41 56 45  	defb	$80|'S','AVE'			; 01 SAVE			; Save program file to Disk					;4332	d3 41 56 45 	E
 692  4336 CF 50 45 4E  	defb	$80|'O','PEN'			; 02 OPEN			; Open file on Disk to read or write		;4336	cf 50 45 4e 	N
 693  433A C3 4C 4F 53  	defb	$80|'C','LOSE'			; 03 CLOSE			; Close opened file							;433a	c3 4c 4f 53 45 	E
 693  433E 45
 694  433F C2 53 41 56  	defb	$80|'B','SAVE'			; 04 BSAVE			; Save binary file							;433f	c2 53 41 56 45 	E
 694  4343 45
 695  4344 C2 4C 4F 41  	defb	$80|'B','LOAD'			; 05 BLOAD			; Load binary file							;4344	c2 4c 4f 41 44 	D
 695  4348 44
 696  4349 C2 52 55 4E  	defb	$80|'B','RUN'			; 06 BRUN			; Load and Run binary program				;4349	c2 52 55 4e 	N
 697  434D C4 49 52     	defb	$80|'D','IR'			; 05 DIR			; Print Directory (list files)				;434d	c4 49 52 	. I R
 698  4350 C5 52 41     	defb	$80|'E','RA'			; 06 ERA			; Erase (delete) file from Disk				;4350	c5 52 41 	A
 699  4353 D2 45 4E     	defb	$80|'R','EN'			; 07 REN			; Rename file on Disk						;4353	d2 45 4e 	. E N
 700  4356 C9 4E 49 54  	defb	$80|'I','NIT'			; 08 INIT			; Initialize (format) Disk					;4356	c9 4e 49 54 	T
 701  435A C4 52 49 56  	defb	$80|'D','RIVE'			; 09 DRIVE			; Select active Drive						;435a	c4 52 49 56 45 	E
 701  435E 45
 702  435F C9 4E 23     	defb	$80|'I','N#'			; 0A IN#			; Read data from channel # 					;435f	c9 4e 23 	#
 703  4362 D0 52 23     	defb	$80|'P','R#'			; 0B PR#			; Print data to channel #					;4362	d0 52 23 	#
 704  4365 C4 43 4F 50  	defb	$80|'D','COPY'			; 0C DCOPY			; Disk copy									;4365	c4 43 4f 50 59 	Y
 704  4369 59
 705  436A D3 54 41 54  	defb	$80|'S','TATUS'			; 0D STATUS			; Print status of active Disk				;436a	d3 54 41 54 55 53 	S
 705  436E 55 53
 706  4370 80           	defb	$80						; -----------------	; End of Table marker ---------------------	;4370	80 	.
 707  4371
 708  4371              ; **************************************************************************************************
 709  4371              ; DOS Commands Execute Addresses
 710  4371              ; One 16bit address of code to execute per every DOS Command listed in DOSCmdNames Table
 711  4371              DOSCmdPointers:
 712  4371 91 43        	defw	DCmdLOAD				; 00 LOAD			; Load program file from Disk				;4371	91 43 	C
 713  4373 4E 44        	defw	DCmdSAVE				; 01 SAVE			; Save program file to Disk					;4373	4e 44 	D
 714  4375 F5 45        	defw	DCmdOPEN				; 02 OPEN			; Open file on Disk to read or write		;4375	f5 45 	E
 715  4377 DD 47        	defw	DCmdCLOSE				; 03 CLOSE			; Close opened file							;4377	dd 47 	. G 9
 716  4379 39 48        	defw	DCmdBSAVE				; 04 BSAVE			; Save binary file							;4379	39 48 	H
 717  437B C4 48        	defw	DCmdBLOAD				; 05 BLOAD			; Load binary file							;437b	c4 48  	. H .
 718  437D EF 48        	defw	DCmdBRUN				; 06 BRUN			; Load and Run binary program				;437d	ef 48 	H
 719  437F 06 49        	defw	DCmdDIR					; 05 DIR			; Print Directory (list files)				;437f	06 49 	. I
 720  4381 94 49        	defw	DCmdERA					; 06 ERA			; Erase (delete) file from Disk				;4381	94 49 	I
 721  4383 80 4A        	defw	DCmdREN					; 07 REN			; Rename file on Disk						;4383	80 4a 	J
 722  4385 08 4B        	defw	DCmdINIT				; 08 INIT			; Initialize (format) Disk					;4385	08 4b 	K
 723  4387 78 4D        	defw	DCmdDRIVE				; 09 DRIVE			; Select active Drive						;4387	78 4d 	M
 724  4389 92 4D        	defw	DCmdIN#					; 0A IN#			; Read data from channel # 					;4389	92 4d 	M
 725  438B 64 4E        	defw	DCmdPR#					; 0B PR#			; Print data to channel #					;438b	64 4e 	N
 726  438D FB 4F        	defw	DCmdDCOPY				; 0C DCOPY			; Disk copy									;438d	fb 4f 	O
 727  438F D5 52        	defw	DCmdSTATUS				; 0D STATUS			; Print status of active Disk				;438f	d5 52 	R
 728  4391
 729  4391
 730  4391              ;***************************************************************************************************
 731  4391              ; DOS Command LOAD
 732  4391              ; Syntax: LOAD "filaname"
 733  4391              ; -----------------------
 734  4391              ; Load file specified by filename (which has the file type code "T") from a Floppy Disk.
 735  4391              ; Filename may have no more than 8 characters.
 736  4391              ; IN: hl - parse point (just after 'LOAD' text)
 737  4391              DCmdLOAD:
 738  4391              ; -- expected required name of file enclosed with double quote chars
 739  4391 CD 67 53     	call CSI						; parse filename and copy it to (iy+filename)					;4391	cd 67 53 	. g S
 740  4394 E5           	push hl							; save hl - parse point											;4394	e5 	.
 741  4395 B7           	or a							; was any Error?												;4395	b7 	.
 742  4396 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4396	c2 41 42 	. A B
 743  4399
 744  4399              ; -- set type of file as BASIC text ('T') and call DOS routine
 745  4399 FD 36 09 54  	ld (iy+FileType),'T'			; set type of file as BASIC text ('T')							;4399	fd 36 09 54 	. 6 . T
 746  439D CD B1 43     	call LOADFILE					; Load a file from disk											;439d	cd b1 43 	. . C
 747  43A0 B7           	or a							; was any Error?												;43a0	b7 	.
 748  43A1 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;43a1	c2 41 42 	. A B
 749  43A4
 750  43A4              ; -- print 'READY' on screen
 751  43A4 21 29 19     	ld hl,TXT_READY					; hl - address of 'READY' text in ROM							;43a4	21 29 19 	! ) .
 752  43A7 CD A7 28     	call SysMsgOut					; display text on screen										;43a7	cd a7 28 	. . (
 753  43AA              ; -- push on Stack address of 1st BASIC line and run it
 754  43AA 2A A4 78     	ld hl,(SYS_BASIC_START_PTR)		; start of current BASIC Program 								;43aa	2a a4 78 	* . x
 755  43AD E5           	push hl							; push hl on stack as next thing to parse and run				;43ad	e5 	.
 756  43AE C3 E8 1A     	jp SysRunBASICPrg				; Start running BASIC Program ---------------------------------	;43ae	c3 e8 1a 	. . .
 757  43B1
 758  43B1
 759  43B1
 760  43B1
 761  43B1              ;***************************************************************************************************
 762  43B1              ; Load the file specified in IY+FNAM to the memory.
 763  43B1              ; NOTE: Aside from filename, file type, sector and track, directory entry for that file contains
 764  43B1              ; 16-bit addresses of start and end (excluded) of memory area where file must be loaded.
 765  43B1              ; IN: interrups disabled
 766  43B1              ;     (iy+Filename) - name of the file to load
 767  43B1              ; OUT: a - Error code
 768  43B1              ;      File loaded in memory
 769  43B1              ;***************************************************************************************************
 770  43B1              LOADFILE:
 771  43B1 F3           	di								; disable interrupts											;43b1	f3 	.
 772  43B2              ; -- turn onn drive and wait 50 ms
 773  43B2 CD 41 5F     	call PowerOn					; Disk power ON													;43b2	cd 41 5f 	. A _
 774  43B5 C5           	push bc							; save bc														;43b5	c5 	.
 775  43B6 01 32 00     	ld bc,50						; number of miliseconds to delay								;43b6	01 32 00 	. 2 .
 776  43B9 CD BE 5E     	call DELAYMS					; delay 50 ms													;43b9	cd be 5e 	. . ^
 777  43BC C1           	pop bc							; restore bc													;43bc	c1 	.
 778  43BD              ; -- try to find file on disk
 779  43BD CD 13 59     	call FINDFILE					; Search for file in directory									;43bd	cd 13 59 	. . Y
 780  43C0 FE 02        	cp 2							; was Error 02 - FILE ALREADY EXISTS?							;43c0	fe 02 	. .
 781  43C2 CA CA 43     	jp z,.verifyType				; yes - file found - continue and verify file type				;43c2	ca ca 43 	. . C
 782  43C5              ; -- could be other Error
 783  43C5 B7           	or a							; is any Error?													;43c5	b7 	.
 784  43C6 C0           	ret nz							; yes - ------------- End of Proc (with Error) ----------------	;43c6	c0 	.
 785  43C7              ; -- no errors means file not found
 786  43C7 3E 0D        	ld a,13							; a - Error 13 - FILE NOT FOUND									;43c7	3e 0d 	> .
 787  43C9 C9           	ret								; ------------------- End of Proc (with Error) ----------------	;43c9	c9 	.
 788  43CA
 789  43CA
 790  43CA              .verifyType:
 791  43CA              ; -- verify file types
 792  43CA FD 7E 09     	ld a,(iy+FileType)				; a - requested file type										;43ca	fd 7e 09 	. ~ .
 793  43CD FD BE 0A     	cp (iy+FileType+1)				; is the same as type of file just found?						;43cd	fd be 0a 	. . .
 794  43D0 3E 0C        	ld a,12							; a - Error 12 - FILE TYPE MISMATCH								;43d0	3e 0c 	> .
 795  43D2 C0           	ret nz							; no - ------------------ End of Proc (with Error) ------------	;43d2	c0 	.
 796  43D3
 797  43D3              ; --------------------------------------------------------------------------------------------------
 798  43D3              ; When FINDFILE returns with Error 02 (FILE ALREADY EXISTS) it means we have found Directory Entry
 799  43D3              ; with that file. In this case registers are set as:
 800  43D3              ; de - address of file track number (next byte after filename in loaded Directory Entry)
 801  43D3              sub_43d3h:
 802  43D3              ; -- set track number of Sector to read
 803  43D3 1A           	ld a,(de)						; a - Track Number of file										;43d3	1a 	.
 804  43D4 13           	inc de							; de - address of Sector Number in Directory Entry 				;43d4	13 	.
 805  43D5 FD 77 12     	ld (iy+UserTrackNo),a			; set as requested Track Number									;43d5	fd 77 12 	. w .
 806  43D8              ; -- set Sector Number of Sector to read
 807  43D8 1A           	ld a,(de)						; a - Sector Number of file										;43d8	1a 	.
 808  43D9 13           	inc de							; de - address of file Start/Load address						;43d9	13 	.
 809  43DA FD 77 11     	ld (iy+UserSectorNo),a			; set as requested Sector Number								;43da	fd 77 11 	. w .
 810  43DD              ; -- set boundary of memory where to load file
 811  43DD EB           	ex de,hl						; hl - address of file Start/Load address						;43dd	eb 	.
 812  43DE 5E           	ld e,(hl)						; e - LSB of destination address								;43de	5e 	^
 813  43DF 23           	inc hl							; point to MSB of dectination address							;43df	23 	#
 814  43E0 56           	ld d,(hl)						; de - address of memory where to load file						;43e0	56 	V
 815  43E1 23           	inc hl							; point to LSB of end of memory area							;43e1	23 	#
 816  43E2              ; -- set destination address as BASIC program Start and DOS Buffer
 817  43E2 ED 53 A4 78  	ld (SYS_BASIC_START_PTR),de		; store destination program start as BASIC Program Start 		;43e2	ed 53 a4 78 	. S . x
 818  43E6 FD 73 0E     	ld (iy+CopyBuf),e				; store destination program start as buffer address				;43e6	fd 73 0e 	. s .
 819  43E9 FD 72 0F     	ld (iy+CopyBuf+1),d																				;43e9	fd 72 0f 	. r .
 820  43EC              ; -- set end of destination address as BASIC program End
 821  43EC 5E           	ld e,(hl)						; e - LSB of memory address where loaded file ends 				;43ec	5e 	^
 822  43ED 23           	inc hl							; point to MSB of memory address								;43ed	23 	#
 823  43EE 56           	ld d,(hl)						; de - memory address where loaded file ends (excluded)			;43ee	56 	V
 824  43EF ED 53 F9 78  	ld (SYS_BASIC_END_PTR),de		; set address as BASIC Program End								;43ef	ed 53 f9 78 	. S . x
 825  43F3
 826  43F3              .loadFileChunk:
 827  43F3 CD 27 5B     	call READSECTOR					; Read a sector from disk										;43f3	cd 27 5b 	. ' [
 828  43F6 B7           	or a							; was it any Error?												;43f6	b7 	.
 829  43F7 C2 41 44     	jp nz,.exitError				; yes - cleanup BASIC addresses and exit with Error				;43f7	c2 41 44 	. A D
 830  43FA
 831  43FA              ; -- no error
 832  43FA FD 6E 31     	ld l,(iy+DataBuf)				; 																;43fa	fd 6e 31 	. n 1
 833  43FD FD 66 32     	ld h,(iy+DataBuf+1)				; hl - address of buffer with Sector data						;43fd	fd 66 32 	. f 2
 834  4400
 835  4400              ; -- setup track and sector number to read next
 836  4400 E5           	push hl							; save hl - address of Sector data								;4400	e5 	.
 837  4401 11 7E 00     	ld de,126						; only 126 bytes from Sector are File Data chunk				;4401	11 7e 00 	. ~ .
 838  4404 19           	add hl,de						; hl - points to Track Number of Sector with next data chunk	;4404	19 	.
 839  4405 7E           	ld a,(hl)						; a - Track Number of Sector with next data chunk				;4405	7e 	~
 840  4406 23           	inc hl							; hl - points to Number of Sector with next data chunk			;4406	23 	#
 841  4407 FD 77 12     	ld (iy+UserTrackNo),a			; set Track Number to read next									;4407	fd 77 12 	. w .
 842  440A 7E           	ld a,(hl)						; a - Number of Sector with next data chunk						;440a	7e 	~
 843  440B FD 77 11     	ld (iy+UserSectorNo),a			; set Sector Number to read next								;440b	fd 77 11 	. w .
 844  440E E1           	pop hl							; restore hl - address of Sector data							;440e	e1 	.
 845  440F
 846  440F              ; -- copy program chunk from Sector Buffer to destination memory
 847  440F FD 5E 0E     	ld e,(iy+CopyBuf)																				;440f	fd 5e 0e 	. ^ .
 848  4412 FD 56 0F     	ld d,(iy+CopyBuf+1)				; de - destination address to copy program chunk				;4412	fd 56 0f 	. V .
 849  4415 01 7E 00     	ld bc,126						; 126 bytes to copy	(full sector as default)					;4415	01 7e 00 	. ~ .
 850  4418
 851  4418              ; -- if next track and sector equals 0 than this is last sector
 852  4418              ; -- size of data in last sector can less than 126 bytes
 853  4418 FD 7E 12     	ld a,(iy+UserTrackNo)			; a - next Track Number											;4418	fd 7e 12 	. ~ .
 854  441B FD B6 11     	or (iy+UserSectorNo)			; is track and sector numbers = 0?								;441b	fd b6 11 	. . .
 855  441E 28 10        	jr z,.loadLastChunk				; yes - need calculate how many bytes to copy					;441e	28 10 	( .
 856  4420              ; -- not last sector
 857  4420 ED B0        	ldir							; copy 126 bytes to memory										;4420	ed b0 	. .
 858  4422              ; -- update destination address for next program chunk
 859  4422 FD 73 0E     	ld (iy+CopyBuf),e				; store LSB of destination address								;4422	fd 73 0e 	. s .
 860  4425 FD 72 0F     	ld (iy+CopyBuf+1),d				; store MSB of destination address								;4425	fd 72 0f 	. r .
 861  4428              ; -- check if it was last sector (Z=1)
 862  4428 FD 7E 12     	ld a,(iy+UserTrackNo)			; a - next Track number											;4428	fd 7e 12 	. ~ .
 863  442B FD B6 11     	or (iy+UserSectorNo)			; is track and sector numbers both are 0?						;442b	fd b6 11 	. . .
 864  442E 18 C3        	jr .loadFileChunk				; red next file chunk from next sector ------------------------	;442e	18 c3 	. .
 865  4430
 866  4430
 867  4430              .loadLastChunk:
 868  4430              ; -- calculate how many bytes left in last sector
 869  4430 E5           	push hl							; save hl - address of loaded sector data						;4430	e5 	.
 870  4431 2A F9 78     	ld hl,(SYS_BASIC_END_PTR)		; hl - address of program end 									;4431	2a f9 78 	* . x
 871  4434 B7           	or a							; clear Carry flag												;4434	b7 	.
 872  4435 ED 52        	sbc hl,de						; subtract address of program chunk start, hl - data size 		;4435	ed 52 	. R
 873  4437 4D           	ld c,l							; copy hl to bc													;4437	4d 	M
 874  4438 44           	ld b,h							; bc - number of chunk bytes to copy							;4438	44 	D
 875  4439 E1           	pop hl							; restore hl - address of loaded sector data					;4439	e1 	.
 876  443A              ; -- copy bc bytes from memory pointed by hl to memory pointed by de
 877  443A ED B0        	ldir							; copy chunk of file											;443a	ed b0 	. .
 878  443C              ; -- file loaded - turn off Drive and return with No Error
 879  443C CD 52 5F     	call PowerOff					; Disk power OFF												;443c	cd 52 5f 	. R _
 880  443F AF           	xor a							; a - Error 0 - NO ERROR										;443f	af 	.
 881  4440 C9           	ret								; -------------------- End of Proc ----------------------------	;4440	c9 	.
 882  4441
 883  4441
 884  4441              ; -- Clear BASIC Program addresses and Exit with error in a register
 885  4441              .exitError:
 886  4441 2A A4 78     	ld hl,(SYS_BASIC_START_PTR)		; hl - start of BASIC Program									;4441	2a a4 78 	* . x
 887  4444              ; -- put 0000 as End of BASIC mark
 888  4444 36 00        	ld (hl),0						; store LSB of 0000												;4444	36 00 	6 .
 889  4446 23           	inc hl							; point to next byte											;4446	23 	#
 890  4447 36 00        	ld (hl),0						; store MSB of 0000												;4447	36 00 	6 .
 891  4449 23           	inc hl							; hl - next address after End of BASIC							;4449	23 	#
 892  444A 22 F9 78     	ld (SYS_BASIC_END_PTR),hl		; store as End of current BASIC Program address					;444a	22 f9 78 	" . x
 893  444D C9           	ret								; --------------- End of Proc (with Error) --------------------	;444d	c9 	.
 894  444E
 895  444E
 896  444E              ;***************************************************************************************************
 897  444E              ; DOS Command SAVE
 898  444E              ; Syntax: SAVE "filaname"
 899  444E              ; -----------------------
 900  444E              ; Save BASIC program from memory to one file specified by filename (which will have file type code "T")
 901  444E              ; on Disk. Filename may have no more than 8 characters.
 902  444E              ; IN: hl - parse point (just after 'SAVE' text)
 903  444E              DCmdSAVE:
 904  444E              ; -- expected required name of file enclosed with double quote chars
 905  444E CD 67 53     	call CSI						; parse filename and copy it to (iy+filename)					;444e	cd 67 53 	. g S
 906  4451 E5           	push hl							; save hl - parse point											;4451	e5 	.
 907  4452 B7           	or a							; was any Error?												;4452	b7 	.
 908  4453 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4453	c2 41 42 	. A B
 909  4456              ; -- turn on Disk Drive and wait 2 ms
 910  4456 CD 41 5F     	call PowerOn					; Disk power ON													;4456	cd 41 5f 	. A _
 911  4459 C5           	push bc							; save bc 														;4459	c5 	.
 912  445A 01 02 00     	ld bc,2							; bc - 2 miliseconds to delay									;445a	01 02 00 	. . .
 913  445D CD BE 5E     	call DELAYMS					; delay 2 ms 													;445d	cd be 5e 	. . ^
 914  4460 C1           	pop bc							; restore bc													;4460	c1 	.
 915  4461              ; -- check if Disk is not Write-Protected
 916  4461 DB 13        	in a,(FLWR_PROTECT)				; a - read Write Protected flag from FDC						;4461	db 13 	. .
 917  4463 B7           	or a							; is bit 7 set? (write protected)								;4463	b7 	.
 918  4464 3E 04        	ld a,4							; a - Error 04 - DISK WRITE PROTECTED							;4464	3e 04 	> .
 919  4466 FA 41 42     	jp m,DOSError					; yes - go to Error handling routine --------------------------	;4466	fa 41 42 	. A B
 920  4469              ; -- set type of file as BASIC text ('T') and continue as DOS routine
 921  4469 FD 36 09 54  	ld (iy+FileType),'T'			; set type of file as BASIC text ('T')							;4469	fd 36 09 54 	. 6 . T
 922  446D E1           	pop hl							; restore hl - parse point										;446d	e1 	.
 923  446E
 924  446E
 925  446E
 926  446E              ;***************************************************************************************************
 927  446E              ; Save program or data from block of memory sepcified by start address in (SYS_BASIC_START_PTR)
 928  446E              ; end end address in (SYS_BASIC_END_PTR) fo file specified by name in (iy+Filename)
 929  446E              ; and type in (iy+FileType).
 930  446E              ; IN: (iy+Filename) - filename to save
 931  446E              ;     (iy+FileType) - type of file
 932  446E              ;     (SYS_BASIC_START_PTR) - memory address where program starts
 933  446E              ;     (SYS_BASIC_END_PTR) - memory address where program ends (excluded)
 934  446E              ; OUT: a - Error code
 935  446E              ;***************************************************************************************************
 936  446E              SAVEFILE:
 937  446E              ; -- save start and end of Program for future restore
 938  446E ED 5B F9 78  	ld de,(SYS_BASIC_END_PTR)		; end of current BASIC Program 									;446e	ed 5b f9 78 	. [ . x
 939  4472 D5           	push de							; save de - end of Program										;4472	d5 	.
 940  4473 ED 5B A4 78  	ld de,(SYS_BASIC_START_PTR)		; start of current BASIC Program 								;4473	ed 5b a4 78 	. [ . x
 941  4477 D5           	push de							; save de - start of Program									;4477	d5 	.
 942  4478 E5           	push hl							; save hl - 													;4478	e5 	.
 943  4479
 944  4479              DoSaveFile:
 945  4479 F3           	di								; disable interrupts											;4479	f3 	.
 946  447A              ; -- delay 50 ms
 947  447A C5           	push bc							; save bc 														;447a	c5 	.
 948  447B 01 32 00     	ld bc,50						; bc - number of miliseconds to delay							;447b	01 32 00 	. 2 .
 949  447E CD BE 5E     	call DELAYMS					; delay 50 ms													;447e	cd be 5e 	. . ^
 950  4481 C1           	pop bc							; restore bc													;4481	c1 	.
 951  4482
 952  4482              ; -- setup address of Program as data source
 953  4482 ED 5B A4 78  	ld de,(SYS_BASIC_START_PTR)		; de - start of current BASIC Program 							;4482	ed 5b a4 78 	. [ . x
 954  4486 FD 73 0E     	ld (iy+CopyBuf),e				; store LSB of address											;4486	fd 73 0e 	. s .
 955  4489 FD 72 0F     	ld (iy+CopyBuf+1),d				; set Program address as Copy Buffer (source)					;4489	fd 72 0f 	. r .
 956  448C
 957  448C              ; -- read Disk Map
 958  448C FD 36 12 00  	ld (iy+UserTrackNo),0			; Track 0 contains Sector with Disk Map							;448c	fd 36 12 00 	. 6 . .
 959  4490 FD 36 11 0F  	ld (iy+UserSectorNo),15			; Sector 15 (on track 0) contains Disk Map						;4490	fd 36 11 0f 	. 6 . .
 960  4494 CD 27 5B     	call READSECTOR					; Read Disk Map into Sector Buffer from disk					;4494	cd 27 5b 	. ' [
 961  4497 B7           	or a							; was any Error?												;4497	b7 	.
 962  4498 C2 9A 48     	jp nz,SF_ExitError				; yes -  exit with Error --------------------------------------	;4498	c2 9a 48 	. . H
 963  449B
 964  449B              ; -- no error - copy Disk Map from Sector Buffer to Map Buffer
 965  449B FD 5E 34     	ld e,(iy+MapAddress)																			;449b	fd 5e 34 	. ^ 4
 966  449E FD 56 35     	ld d,(iy+MapAddress+1)			; de - (dst) buffer for Disk Map								;449e	fd 56 35 	. V 5
 967  44A1 FD 6E 31     	ld l,(iy+DataBuf)																				;44a1	fd 6e 31 	. n 1
 968  44A4 FD 66 32     	ld h,(iy+DataBuf+1)				; hl - (src) buffer with sector data							;44a4	fd 66 32 	. f 2
 969  44A7 01 50 00     	ld bc,80						; bc - number of bytes to copy									;44a7	01 50 00 	. P .
 970  44AA ED B0        	ldir							; copy Disk Map 												;44aa	ed b0 	. .
 971  44AC              ; -- create Directory Entry for file
 972  44AC CD 7B 58     	call CREATEDIRENTRY				; Create an entry in directory									;44ac	cd 7b 58 	. { X
 973  44AF B7           	or a							; was any Error?												;44af	b7 	.
 974  44B0 C2 9A 48     	jp nz,SF_ExitError				; yes -  exit with Error --------------------------------------	;44b0	c2 9a 48 	. . H
 975  44B3
 976  44B3              ; -- Directory Entry was created for this file
 977  44B3              ; NextTrackNo and NextSectorNo contains values for sector alloacated for chunk od file data
 978  44B3              ;
 979  44B3
 980  44B3              .writeNextChunk:
 981  44B3              ; -- check next Track and Sector - if 0 then last sector has been written
 982  44B3 FD 7E 16     	ld a,(iy+NextTrackNo)			; a - track numer for first free sector							;44b3	fd 7e 16 	. ~ .
 983  44B6 FD B6 15     	or (iy+NextSectorNo)			; track and sector numbers are 0? (no free sectors)				;44b6	fd b6 15 	. . .
 984  44B9 CA 7C 45     	jp z,.finalizeSave				; yes - finalize save (update dir entry, disk map, etc)			;44b9	ca 7c 45 	. | E
 985  44BC
 986  44BC              ; -- save track and sector numbers allocated for 1st chunk of file
 987  44BC FD 56 16     	ld d,(iy+NextTrackNo)			; d - Track Number for chunk of file 							;44bc	fd 56 16 	. V .
 988  44BF FD 5E 15     	ld e,(iy+NextSectorNo)			; e - Sector Number for chunk of file 							;44bf	fd 5e 15 	. ^ .
 989  44C2
 990  44C2              ; -- check if there is free space on Disk for next sector
 991  44C2 CD BF 58     	call FINDEMPTYSEC				; search for empty sector in Disk Map							;44c2	cd bf 58 	. . X
 992  44C5 FE 07        	cp 7							; was Error 07 - DISK FULL?										;44c5	fe 07 	. .
 993  44C7 20 19        	jr nz,.checkOtherError			; no - check if other error										;44c7	20 19 	  .
 994  44C9
 995  44C9              ; -- disk full
 996  44C9 CD 13 59     	call FINDFILE					; Search for file in directory									;44c9	cd 13 59 	. . Y
 997  44CC FE 02        	cp 2							; is Error 02 - FILE ALREADY EXISTS?							;44cc	fe 02 	. .
 998  44CE 3E 06        	ld a,6							; a - Error 6 - DISK I/O ERROR									;44ce	3e 06 	> .
 999  44D0 C2 9A 48     	jp nz,SF_ExitError				; no - exit with Error 06 -------------------------------------	;44d0	c2 9a 48 	. . H
1000  44D3
1001  44D3              ; -- disk full but file exists on Disk - mark it as deleted
1002  44D3 EB           	ex de,hl						; hl - address in Directory Entry (after filename)				;44d3	eb 	.
1003  44D4 11 F6 FF     	ld de,-10						; de - 10 bytes to begin of Dir Entry (filetype byte)			;44d4	11 f6 ff 	. . .
1004  44D7 19           	add hl,de						; hl - address of FileType byte in Dir Entry					;44d7	19 	.
1005  44D8 36 01        	ld (hl),1						; set FileType as deleted										;44d8	36 01 	6 .
1006  44DA CD A1 59     	call WRITESECTOR				; Write a sector with Directory to disk							;44da	cd a1 59 	. . Y
1007  44DD 3E 07        	ld a,7							; a - Error 07 - DISK FULL										;44dd	3e 07 	> .
1008  44DF C3 9A 48     	jp SF_ExitError					; exit with Error 07 ------------------------------------------	;44df	c3 9a 48 	. . H
1009  44E2
1010  44E2              .checkOtherError:
1011  44E2 B7           	or a							; was any Error (after Find Empty Sector)?						;44e2	b7 	.
1012  44E3 C2 9A 48     	jp nz,SF_ExitError				; yes - exit with Error ---------------------------------------	;44e3	c2 9a 48 	. . H
1013  44E6
1014  44E6              ; -- setup destination sector to write file chunk
1015  44E6 FD 72 12     	ld (iy+UserTrackNo),d			; set Track Number												;44e6	fd 72 12 	. r .
1016  44E9 FD 73 11     	ld (iy+UserSectorNo),e			; set Sector Number												;44e9	fd 73 11 	. s .
1017  44EC
1018  44EC              ; -- prepare sector buffer
1019  44EC FD 6E 31     	ld l,(iy+DataBuf)				; 																;44ec	fd 6e 31 	. n 1
1020  44EF FD 66 32     	ld h,(iy+DataBuf+1)				; hl - address of Sector buffer									;44ef	fd 66 32 	. f 2
1021  44F2 E5           	push hl							; save hl - address of Sector Buffer							;44f2	e5 	.
1022  44F3              ; -- fill with 0 bytes
1023  44F3 5D           	ld e,l							; copy hl to de													;44f3	5d 	]
1024  44F4 54           	ld d,h							; de - address of buffer 										;44f4	54 	T
1025  44F5 13           	inc de							; start from 2nd byte											;44f5	13 	.
1026  44F6 36 00        	ld (hl),0						; store 0 in 1st byte											;44f6	36 00 	6 .
1027  44F8 01 80 00     	ld bc,128						; 128 bytes to clear 											;44f8	01 80 00 	. . .
1028  44FB ED B0        	ldir							; fill buffer with 0 values										;44fb	ed b0 	. .
1029  44FD
1030  44FD              ; -- get address of data chunk
1031  44FD FD 6E 0E     	ld l,(iy+CopyBuf)				; hl - address of data chunk to write on Disk					;44fd	fd 6e 0e 	. n .
1032  4500 FD 66 0F     	ld h,(iy+CopyBuf+1)				; 																;4500	fd 66 0f 	. f .
1033  4503 E5           	push hl							; save hl - address of data chunk								;4503	e5 	.
1034  4504              ; -- determine chunk length
1035  4504 ED 5B F9 78  	ld de,(SYS_BASIC_END_PTR)		; de - address of Program end 									;4504	ed 5b f9 78 	. [ . x
1036  4508 B7           	or a							; clear Carry flag												;4508	b7 	.
1037  4509 ED 52        	sbc hl,de						; hl - negative offset from end of data to write				;4509	ed 52 	. R
1038  450B D2 3A 45     	jp nc,.writeLastSector			; if it's positive or 0? (start >= end)							;450b	d2 3a 45 	. : E
1039  450E
1040  450E              ; -- maximum 126 bytes per sector
1041  450E 11 7E 00     	ld de,126						; 126 bytes can be write to one sector 							;450e	11 7e 00 	. ~ .
1042  4511 19           	add hl,de						; add 126 to negative offset - negative offset for next chunk	;4511	19 	.
1043  4512 DA 76 45     	jp c,.partialSector				; if positive then less than 126 bytes to write					;4512	da 76 45 	. v E
1044  4515
1045  4515              ; -- full sector with 126 bytes of data
1046  4515              ; -- store start of next chunk
1047  4515 ED 5B F9 78  	ld de,(SYS_BASIC_END_PTR)		; end of data to write											;4515	ed 5b f9 78 	. [ . x
1048  4519 19           	add hl,de						; add negative offset - address of next chunk of data			;4519	19 	.
1049  451A FD 75 0E     	ld (iy+CopyBuf),l				; store address of next chunk of data							;451a	fd 75 0e 	. u .
1050  451D FD 74 0F     	ld (iy+CopyBuf+1),h																				;451d	fd 74 0f 	. t .
1051  4520
1052  4520              ; -- copy 126 bytes of program to Sector Buffer
1053  4520 E1           	pop hl							; hl - address of data block to write							;4520	e1 	.
1054  4521 D1           	pop de							; de - address of Sector Buffer									;4521	d1 	.
1055  4522 01 7E 00     	ld bc,126						; bc - 126 bytes to copy										;4522	01 7e 00 	. ~ .
1056  4525 ED B0        	ldir							; copy program data to sector buffer							;4525	ed b0 	. .
1057  4527              ; -- store link - next Track and Sector Number into last 2 bytes of sector
1058  4527 FD 7E 16     	ld a,(iy+NextTrackNo)			; a - Track Number of sector for next chunk of file 			;4527	fd 7e 16 	. ~ .
1059  452A 12           	ld (de),a						; store Track number as 127th byte of sector					;452a	12 	.
1060  452B 13           	inc de							; de - points to 128th byte of sector							;452b	13 	.
1061  452C FD 7E 15     	ld a,(iy+NextSectorNo)			; a - Sector NUmber for next chunk of file						;452c	fd 7e 15 	. ~ .
1062  452F 12           	ld (de),a						; store Sector NUmber as 128th byte of sector					;452f	12 	.
1063  4530
1064  4530              .flushSector:
1065  4530 CD A1 59     	call WRITESECTOR				; Write a sector to disk										;4530	cd a1 59 	. . Y
1066  4533 B7           	or a							; was any Error?												;4533	b7 	.
1067  4534 C2 9A 48     	jp nz,SF_ExitError				; yes - exit with Error ---------------------------------------	;4534	c2 9a 48 	. . H
1068  4537 C3 B3 44     	jp .writeNextChunk				; no - write next chunk of data -------------------------------	;4537	c3 b3 44 	. . D
1069  453A
1070  453A
1071  453A              .writeLastSector:
1072  453A E5           	push hl							; save hl - number of bytes to write 							;453a	e5 	.
1073  453B              ; -- get Disk Map address
1074  453B FD 6E 34     	ld l,(iy+MapAddress)			; hl - address of Disk Map 										;453b	fd 6e 34 	. n 4
1075  453E FD 66 35     	ld h,(iy+MapAddress+1)																			;453e	fd 66 35 	. f 5
1076  4541              ; -- calculate byte offset
1077  4541 FD 7E 16     	ld a,(iy+NextTrackNo)			; a - Track Number of sector for next chunk of file				;4541	fd 7e 16 	. ~ .
1078  4544 3D           	dec a							; a = a -1 (Disk Map covers sectors from track 1)				;4544	3d 	=
1079  4545 CB 27        	sla a							; track * 2 (2 bytes in Map covers 1 track)						;4545	cb 27 	. '
1080  4547 5F           	ld e,a							; e - offset in Disk Map for Track								;4547	5f 	_
1081  4548 16 00        	ld d,0							; de - offset in Disk Map for Track								;4548	16 00 	. .
1082  454A FD 7E 15     	ld a,(iy+NextSectorNo)			; a - Sector number for next chunk of file						;454a	fd 7e 15 	. ~ .
1083  454D FE 08        	cp 8							; set Carry flag if Sector < 8 									;454d	fe 08 	. .
1084  454F 3F           	ccf								; invert Carry - will be 1 if Sector >= 8 						;454f	3f 	?
1085  4550 ED 5A        	adc hl,de						; hl - address in Disk Map of bitmask with this sector			;4550	ed 5a 	. Z
1086  4552              ; -- calculate bit number
1087  4552 E6 07        	and %0111						; a - bit number for this sector								;4552	e6 07 	. .
1088  4554 3C           	inc a							; preincrement for number of rotates 1..8						;4554	3c 	<
1089  4555 47           	ld b,a							; b - how many times to rotate bitmask							;4555	47 	G
1090  4556              ; -- reset bit for this sector (not used)
1091  4556 4E           	ld c,(hl)						; c - bitmask with this sector									;4556	4e 	N
1092  4557 CB 01        	rlc c							; pre-rotate left (set Carry from 7th bit)						;4557	cb 01 	. .
1093  4559              .loop1:
1094  4559 CB 09        	rrc c							; rotate right bitmask											;4559	cb 09 	. .
1095  455B 10 FC        	djnz .loop1						; keep rotate until bit is at position 0						;455b	10 fc 	. .
1096  455D CB 81        	res 0,c							; clear bit for this sector										;455d	cb 81 	. .
1097  455F 47           	ld b,a							; b - number of rotates to do									;455f	47 	G
1098  4560 CB 09        	rrc c							; pre-rotate right (set Carry from 0th bit)						;4560	cb 09 	. .
1099  4562              .loop2:
1100  4562 CB 01        	rlc c							; rotate left bitmask											;4562	cb 01 	. .
1101  4564 10 FC        	djnz .loop2						; keep rotate until bit returns to its original position		;4564	10 fc 	. .
1102  4566 71           	ld (hl),c						; store updated byte to Disk Map								;4566	71 	q
1103  4567              ; -- copy last chunk of data into sector buffer
1104  4567 C1           	pop bc							; bc - number of bytes to copy									;4567	c1 	.
1105  4568 E1           	pop hl							; hl - address of last chunk of data							;4568	e1 	.
1106  4569 D1           	pop de							; de - sector buffer address									;4569	d1 	.
1107  456A ED B0        	ldir							; copy last chunk of data to Sector buffer						;456a	ed b0 	. .
1108  456C              ; -- set it was last chunk of file
1109  456C FD 36 16 00  	ld (iy+NextTrackNo),0			; set next track to 0 (no next sector)							;456c	fd 36 16 00 	. 6 . .
1110  4570 FD 36 15 00  	ld (iy+NextSectorNo),0			; set next sectro to 0 (no next sector)							;4570	fd 36 15 00 	. 6 . .
1111  4574 18 BA        	jr .flushSector					; write sector to Disk and continue ---------------------------	;4574	18 ba 	. .
1112  4576
1113  4576
1114  4576              .partialSector:
1115  4576 EB           	ex de,hl						; de - bytes above end of data, hl - chunk length (126)			;4576	eb 	.
1116  4577 B7           	or a							; clear Carry Flag												;4577	b7 	.
1117  4578 ED 52        	sbc hl,de						; hl - length of partial chunk (less than 126)					;4578	ed 52 	. R
1118  457A 18 BE        	jr .writeLastSector				; write as last sector (126 bytes or less)						;457a	18 be 	. .
1119  457C
1120  457C
1121  457C              ; -- all data stored on Disk
1122  457C              .finalizeSave:
1123  457C CD 13 59     	call FINDFILE					; Search for file in directory									;457c	cd 13 59 	. . Y
1124  457F FE 02        	cp 2							; was Error 2 - FILE ALREADY EXISTS								;457f	fe 02 	. .
1125  4581 C2 9A 48     	jp nz,SF_ExitError				; no - exit with Error ----------------------------------------	;4581	c2 9a 48 	. . H
1126  4584
1127  4584              ; -- file found - update Directory Entry
1128  4584 13           	inc de							; skip track number	byte 										;4584	13 	.
1129  4585 13           	inc de							; skip sector number byte										;4585	13 	.
1130  4586              ; -- update program start address
1131  4586 2A A4 78     	ld hl,(SYS_BASIC_START_PTR)		; hk - start of current BASIC Program							;4586	2a a4 78 	* . x
1132  4589 EB           	ex de,hl						; de - program start, hl - address in Directory Entry 			;4589	eb 	.
1133  458A 73           	ld (hl),e						; store LSB of program start									;458a	73 	s
1134  458B 23           	inc hl							; point to MSB													;458b	23 	#
1135  458C 72           	ld (hl),d						; store MSB of program start									;458c	72 	r
1136  458D 23           	inc hl							; point to program end in Directory Entry						;458d	23 	#
1137  458E              ; -- update program end address
1138  458E EB           	ex de,hl						; exchange de and hl											;458e	eb 	.
1139  458F 2A F9 78     	ld hl,(SYS_BASIC_END_PTR)		; hl - end of current BASIC Program 							;458f	2a f9 78 	* . x
1140  4592 EB           	ex de,hl						; de - program end, hl - address in Directory Entry 			;4592	eb 	.
1141  4593 73           	ld (hl),e						; store LSB of program end										;4593	73 	s
1142  4594 23           	inc hl							; point to MSB													;4594	23 	#
1143  4595 72           	ld (hl),d						; store MSB of program end										;4595	72 	r
1144  4596              ; -- write directory entry to Disk
1145  4596 CD A1 59     	call WRITESECTOR				; Write a sector with Directory to Disk							;4596	cd a1 59 	. . Y
1146  4599 B7           	or a							; was any Error?												;4599	b7 	.
1147  459A C2 9A 48     	jp nz,SF_ExitError				; yes - exit with Error ---------------------------------------	;459a	c2 9a 48 	. . H
1148  459D
1149  459D              ; -- update Disk Map sector
1150  459D
1151  459D              ; -- clear data buffer (fill with 0 bytes)
1152  459D FD 6E 31     	ld l,(iy+DataBuf)				; hl - address of data buffer									;459d	fd 6e 31 	. n 1
1153  45A0 FD 66 32     	ld h,(iy+DataBuf+1)																				;45a0	fd 66 32 	. f 2
1154  45A3 E5           	push hl							; save hl - address of data buffer								;45a3	e5 	.
1155  45A4 5D           	ld e,l							; copy hl to de (destination)									;45a4	5d 	]
1156  45A5 54           	ld d,h																							;45a5	54 	T
1157  45A6 13           	inc de							; de - points to 2nd byte of buffer								;45a6	13 	.
1158  45A7 36 00        	ld (hl),0						; store 0 in 1st byte of buffer									;45a7	36 00 	6 .
1159  45A9 01 80 00     	ld bc,128						; bc - 128 bytes to fill										;45a9	01 80 00 	. . .
1160  45AC ED B0        	ldir							; fill data buffer with 0										;45ac	ed b0 	. .
1161  45AE              ; -- copy disk Map into data buffer
1162  45AE E1           	pop hl							; restore hl - address of data buffer							;45ae	e1 	.
1163  45AF FD 5E 34     	ld e,(iy+MapAddress)			; de - address of Disk Map data									;45af	fd 5e 34 	. ^ 4
1164  45B2 FD 56 35     	ld d,(iy+MapAddress+1)																			;45b2	fd 56 35 	. V 5
1165  45B5 EB           	ex de,hl						; de - data buffer (dst), hl - Disk Map data (src)				;45b5	eb 	.
1166  45B6 01 50 00     	ld bc,80						; bc - 80 bytes to copy											;45b6	01 50 00 	. P .
1167  45B9 ED B0        	ldir							; copy Disk Map into data buffer								;45b9	ed b0 	. .
1168  45BB              ; -- write Disk Map into Disk
1169  45BB FD 36 12 00  	ld (iy+UserTrackNo),0			; set Track Number 0											;45bb	fd 36 12 00 	. 6 . .
1170  45BF FD 36 11 0F  	ld (iy+UserSectorNo),15			; set Sector Number 15											;45bf	fd 36 11 0f 	. 6 . .
1171  45C3 CD A1 59     	call WRITESECTOR				; Write a sector to disk										;45c3	cd a1 59 	. . Y
1172  45C6              ; -- turn off disk drive
1173  45C6 F5           	push af							; save a - error code after Write Sector						;45c6	f5 	.
1174  45C7 CD 52 5F     	call PowerOff					; Disk power OFF												;45c7	cd 52 5f 	. R _
1175  45CA F1           	pop af							; restore a - error code after Write Sector						;45ca	f1 	.
1176  45CB
1177  45CB              ; -- restore BASIC variables
1178  45CB E1           	pop hl							; restore hl - 													;45cb	e1 	.
1179  45CC D1           	pop de							; restore de - BASIC Program Start								;45cc	d1 	.
1180  45CD ED 53 A4 78  	ld (SYS_BASIC_START_PTR),de		; store into start of current BASIC Program variable			;45cd	ed 53 a4 78 	. S . x
1181  45D1 D1           	pop de							; restore de - BASIC Program End								;45d1	d1 	.
1182  45D2 ED 53 F9 78  	ld (SYS_BASIC_END_PTR),de		; store into end of current BASIC Program variable				;45d2	ed 53 f9 78 	. S . x
1183  45D6              ; -- exit
1184  45D6 B7           	or a							; was any Error after Write Disk Map to Disk?					;45d6	b7 	.
1185  45D7 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine							;45d7	c2 41 42 	. A B
1186  45DA C9           	ret								; ----------------- End of Proc -------------------------------	;45da	c9 	.
1187  45DB
1188  45DB
1189  45DB
1190  45DB              LoadAndRunFile:
1191  45DB CD 67 53     	call CSI						; Parse filename typed by user									;45db	cd 67 53 	. g S
1192  45DE E5           	push hl							; save hl - next char after filename (parser pointer)			;45de	e5 	.
1193  45DF B7           	or a							; was any error?												;45df	b7 	.
1194  45E0 C2 41 42     	jp nz,DOSError					; yes - goto Error handling routine	---------------------------	;45e0	c2 41 42 	. A B
1195  45E3              ; -- valid filename detected
1196  45E3 FD 36 09 54  	ld (iy+FileType),'T'			; set File Type 'T' - BASIC text program						;45e3	fd 36 09 54 	. 6 . T
1197  45E7 CD B1 43     	call LOADFILE					; Load a file from disk											;45e7	cd b1 43 	. . C
1198  45EA B7           	or a							; was any Error?												;45ea	b7 	.
1199  45EB C2 41 42     	jp nz,DOSError					; yes - goto Error handling routine	---------------------------	;45eb	c2 41 42 	. A B
1200  45EE ED 5B A4 78  	ld de,(SYS_BASIC_START_PTR)		; de - start of current BASIC Program 							;45ee	ed 5b a4 78 	. [ . x
1201  45F2 C3 E9 36     	jp SysExecRUN					; Execute BASIC RUN command - start from address in de --------	;45f2	c3 e9 36 	. . 6
1202  45F5
1203  45F5
1204  45F5
1205  45F5              ;***************************************************************************************************
1206  45F5              ; DOS Command OPEN
1207  45F5              ; Syntax: OPEN "filaname",mode
1208  45F5              ; ----------------------------
1209  45F5              ; Open file specified by "filename" (which has the file type code "D") for Read or Write.
1210  45F5              ; Argument mode must be 0 (for read) or 1 (for write). After open file is ready to read from
1211  45F5              ; via DOS command 'IN#' or to write to via DOS command 'PR#'
1212  45F5              ; NOTE: This command must always be used from inside BASIC program.
1213  45F5              DCmdOPEN:
1214  45F5 CD 28 28     	call 02828h		;45f5	cd 28 28 	. ( (
1215  45F8 CD 78 53     	call ParseFilename		;45f8	cd 78 53 	. x S
1216  45FB E5           	push hl			;45fb	e5 	.
1217  45FC B7           	or a			;45fc	b7 	.
1218  45FD C2 41 42     	jp nz,DOSError		; Error handling routine	;45fd	c2 41 42 	. A B
1219  4600 F1           	pop af			;4600	f1 	.
1220  4601 CF           	rst 8			;4601	cf 	.
1221  4602 2C           	inc l			;4602	2c 	,
1222  4603 CD 1C 2B     	call 02b1ch		;4603	cd 1c 2b 	. . +
1223  4606 B7           	or a			;4606	b7 	.
1224  4607 28 05        	jr z,l460eh		;4607	28 05 	( .
1225  4609 FE 02        	cp 002h		;4609	fe 02 	. .
1226  460B D2 4A 1E     	jp nc,01e4ah		;460b	d2 4a 1e 	. J .
1227  460E              l460eh:
1228  460E FD 77 0C     	ld (iy+RequestCode),a		;460e	fd 77 0c 	. w .
1229  4611 E5           	push hl			;4611	e5 	.
1230  4612 CD 78 47     	call sub_4778h		;4612	cd 78 47 	. x G
1231  4615 FE 05        	cp 005h		;4615	fe 05 	. .
1232  4617 C2 41 42     	jp nz,DOSError		; Error handling routine	;4617	c2 41 42 	. A B
1233  461A E5           	push hl			;461a	e5 	.
1234  461B CD A5 4F     	call sub_4fa5h		;461b	cd a5 4f 	. . O
1235  461E E1           	pop hl			;461e	e1 	.
1236  461F 36 01        	ld (hl),001h		;461f	36 01 	6 .
1237  4621 23           	inc hl			;4621	23 	#
1238  4622 FD 7E 0C     	ld a,(iy+RequestCode)		;4622	fd 7e 0c 	. ~ .
1239  4625 77           	ld (hl),a			;4625	77 	w
1240  4626 23           	inc hl			;4626	23 	#
1241  4627 FD E5        	push iy		;4627	fd e5 	. .
1242  4629 D1           	pop de			;4629	d1 	.
1243  462A 13           	inc de			;462a	13 	.
1244  462B EB           	ex de,hl			;462b	eb 	.
1245  462C 01 08 00     	ld bc,00008h		;462c	01 08 00 	. . .
1246  462F ED B0        	ldir		;462f	ed b0 	. .
1247  4631 D5           	push de			;4631	d5 	.
1248  4632 F3           	di			;4632	f3 	.
1249  4633 CD 41 5F     	call PowerOn		; Disk power ON			;4633	cd 41 5f 	. A _
1250  4636 C5           	push bc			;4636	c5 	.
1251  4637 01 32 00     	ld bc,00032h		;4637	01 32 00 	. 2 .
1252  463A CD BE 5E     	call DELAYMS		; Delay mS in reg C								;463a	cd be 5e 	. . ^
1253  463D C1           	pop bc			;463d	c1 	.
1254  463E CD 13 59     	call FINDFILE		; Search for file in directory					;463e	cd 13 59 	. . Y
1255  4641 FE 02        	cp 002h		;4641	fe 02 	. .
1256  4643 C2 6B 46     	jp nz,l466bh		;4643	c2 6b 46 	. k F
1257  4646 FD 7E 0A     	ld a,(iy+FileType+1)		;4646	fd 7e 0a 	. ~ .
1258  4649 FE 44        	cp 044h		;4649	fe 44 	. D
1259  464B 3E 0C        	ld a,00ch		;464b	3e 0c 	> .
1260  464D C2 41 42     	jp nz,DOSError		; Error handling routine	;464d	c2 41 42 	. A B
1261  4650 E1           	pop hl			;4650	e1 	.
1262  4651 1A           	ld a,(de)			;4651	1a 	.
1263  4652 77           	ld (hl),a			;4652	77 	w
1264  4653 FD 77 12     	ld (iy+UserTrackNo),a		;4653	fd 77 12 	. w .
1265  4656 13           	inc de			;4656	13 	.
1266  4657 23           	inc hl			;4657	23 	#
1267  4658 1A           	ld a,(de)			;4658	1a 	.
1268  4659 77           	ld (hl),a			;4659	77 	w
1269  465A FD 77 11     	ld (iy+UserSectorNo),a		;465a	fd 77 11 	. w .
1270  465D AF           	xor a			;465d	af 	.
1271  465E 23           	inc hl			;465e	23 	#
1272  465F 77           	ld (hl),a			;465f	77 	w
1273  4660 FD 7E 0C     	ld a,(iy+RequestCode)		;4660	fd 7e 0c 	. ~ .
1274  4663 B7           	or a			;4663	b7 	.
1275  4664 20 53        	jr nz,l46b9h		;4664	20 53 	  S
1276  4666 CD 52 5F     	call PowerOff		; Disk power OFF		;4666	cd 52 5f 	. R _
1277  4669 E1           	pop hl			;4669	e1 	.
1278  466A C9           	ret			;466a	c9 	.
1279  466B              l466bh:
1280  466B 4F           	ld c,a			;466b	4f 	O
1281  466C FD 7E 0C     	ld a,(iy+RequestCode)		;466c	fd 7e 0c 	. ~ .
1282  466F B7           	or a			;466f	b7 	.
1283  4670 79           	ld a,c			;4670	79 	y
1284  4671 CA A8 46     	jp z,l46a8h		;4671	ca a8 46 	. . F
1285  4674 DB 13        	in a,(FLWR_PROTECT)		;4674	db 13 	. .
1286  4676 B7           	or a			;4676	b7 	.
1287  4677 0E 04        	ld c,004h		;4677	0e 04 	. .
1288  4679 FA A8 46     	jp m,l46a8h		;4679	fa a8 46 	. . F
1289  467C CD 17 47     	call ReadMap		; Read the track map of the disk				;467c	cd 17 47 	. . G
1290  467F FD 36 09 44  	ld (iy+FileType),044h		;467f	fd 36 09 44 	. 6 . D
1291  4683 CD 7B 58     	call CREATEDIRENTRY		; Create an entry in directory					;4683	cd 7b 58 	. { X
1292  4686 B7           	or a			;4686	b7 	.
1293  4687 C2 41 42     	jp nz,DOSError		; Error handling routine	;4687	c2 41 42 	. A B
1294  468A E1           	pop hl			;468a	e1 	.
1295  468B FD 7E 16     	ld a,(iy+NextTrackNo)		;468b	fd 7e 16 	. ~ .
1296  468E FD 77 12     	ld (iy+UserTrackNo),a		;468e	fd 77 12 	. w .
1297  4691 77           	ld (hl),a			;4691	77 	w
1298  4692 23           	inc hl			;4692	23 	#
1299  4693 FD 7E 15     	ld a,(iy+NextSectorNo)		;4693	fd 7e 15 	. ~ .
1300  4696 FD 77 11     	ld (iy+UserSectorNo),a		;4696	fd 77 11 	. w .
1301  4699 77           	ld (hl),a			;4699	77 	w
1302  469A 23           	inc hl			;469a	23 	#
1303  469B 36 00        	ld (hl),000h		;469b	36 00 	6 .
1304  469D CD 49 47     	call ClearSector		; Clear a sector of the disk					;469d	cd 49 47 	. I G
1305  46A0 CD 54 47     	call SaveMap		; Save the track map to the disk				;46a0	cd 54 47 	. T G
1306  46A3 CD 52 5F     	call PowerOff		; Disk power OFF		;46a3	cd 52 5f 	. R _
1307  46A6 E1           	pop hl			;46a6	e1 	.
1308  46A7 C9           	ret			;46a7	c9 	.
1309  46A8              l46a8h:
1310  46A8 E1           	pop hl			;46a8	e1 	.
1311  46A9 11 F6 FF     	ld de,0fff6h		;46a9	11 f6 ff 	. . .
1312  46AC 19           	add hl,de			;46ac	19 	.
1313  46AD 36 00        	ld (hl),000h		;46ad	36 00 	6 .
1314  46AF 79           	ld a,c			;46af	79 	y
1315  46B0 B7           	or a			;46b0	b7 	.
1316  46B1 C2 41 42     	jp nz,DOSError		; Error handling routine	;46b1	c2 41 42 	. A B
1317  46B4 3E 0D        	ld a,00dh		;46b4	3e 0d 	> .
1318  46B6 C3 41 42     	jp DOSError		; Error handling routine	;46b6	c3 41 42 	. A B
1319  46B9              l46b9h:
1320  46B9 E5           	push hl			;46b9	e5 	.
1321  46BA              l46bah:
1322  46BA CD 27 5B     	call READSECTOR		; Read a sector from disk						;46ba	cd 27 5b 	. ' [
1323  46BD B7           	or a			;46bd	b7 	.
1324  46BE C2 41 42     	jp nz,DOSError		; Error handling routine	;46be	c2 41 42 	. A B
1325  46C1 FD 6E 31     	ld l,(iy+DataBuf)		;46c1	fd 6e 31 	. n 1
1326  46C4 FD 66 32     	ld h,(iy+DataBuf+1)		;46c4	fd 66 32 	. f 2
1327  46C7 11 7E 00     	ld de,0007eh		;46c7	11 7e 00 	. ~ .
1328  46CA 19           	add hl,de			;46ca	19 	.
1329  46CB 7E           	ld a,(hl)			;46cb	7e 	~
1330  46CC B7           	or a			;46cc	b7 	.
1331  46CD 28 0A        	jr z,l46d9h		;46cd	28 0a 	( .
1332  46CF 23           	inc hl			;46cf	23 	#
1333  46D0 FD 77 12     	ld (iy+UserTrackNo),a		;46d0	fd 77 12 	. w .
1334  46D3 7E           	ld a,(hl)			;46d3	7e 	~
1335  46D4 FD 77 11     	ld (iy+UserSectorNo),a		;46d4	fd 77 11 	. w .
1336  46D7 18 E1        	jr l46bah		;46d7	18 e1 	. .
1337  46D9              l46d9h:
1338  46D9 06 7E        	ld b,07eh		;46d9	06 7e 	. ~
1339  46DB FD 6E 31     	ld l,(iy+DataBuf)		;46db	fd 6e 31 	. n 1
1340  46DE FD 66 32     	ld h,(iy+DataBuf+1)		;46de	fd 66 32 	. f 2
1341  46E1              l46e1h:
1342  46E1 7E           	ld a,(hl)			;46e1	7e 	~
1343  46E2 23           	inc hl			;46e2	23 	#
1344  46E3 B7           	or a			;46e3	b7 	.
1345  46E4 28 1D        	jr z,l4703h		;46e4	28 1d 	( .
1346  46E6 10 F9        	djnz l46e1h		;46e6	10 f9 	. .
1347  46E8 CD 17 47     	call ReadMap		; Read the track map of the disk				;46e8	cd 17 47 	. . G
1348  46EB CD BF 58     	call FINDEMPTYSEC		; Search for empty sector						;46eb	cd bf 58 	. . X
1349  46EE B7           	or a			;46ee	b7 	.
1350  46EF C2 41 42     	jp nz,DOSError		; Error handling routine	;46ef	c2 41 42 	. A B
1351  46F2 FD 7E 16     	ld a,(iy+NextTrackNo)		;46f2	fd 7e 16 	. ~ .
1352  46F5 FD 77 12     	ld (iy+UserTrackNo),a		;46f5	fd 77 12 	. w .
1353  46F8 FD 7E 15     	ld a,(iy+NextSectorNo)		;46f8	fd 7e 15 	. ~ .
1354  46FB FD 77 11     	ld (iy+UserSectorNo),a		;46fb	fd 77 11 	. w .
1355  46FE CD 49 47     	call ClearSector		; Clear a sector of the disk					;46fe	cd 49 47 	. I G
1356  4701 06 7E        	ld b,07eh		;4701	06 7e 	. ~
1357  4703              l4703h:
1358  4703 3E 7E        	ld a,07eh		;4703	3e 7e 	> ~
1359  4705 90           	sub b			;4705	90 	.
1360  4706 E1           	pop hl			;4706	e1 	.
1361  4707 77           	ld (hl),a			;4707	77 	w
1362  4708 2B           	dec hl			;4708	2b 	+
1363  4709 FD 7E 11     	ld a,(iy+UserSectorNo)		;4709	fd 7e 11 	. ~ .
1364  470C 77           	ld (hl),a			;470c	77 	w
1365  470D 2B           	dec hl			;470d	2b 	+
1366  470E FD 7E 12     	ld a,(iy+UserTrackNo)		;470e	fd 7e 12 	. ~ .
1367  4711 77           	ld (hl),a			;4711	77 	w
1368  4712 CD 52 5F     	call PowerOff		; Disk power OFF		;4712	cd 52 5f 	. R _
1369  4715 E1           	pop hl			;4715	e1 	.
1370  4716 C9           	ret			;4716	c9 	.
1371  4717
1372  4717              ;***************************************************************************************************
1373  4717              ; Read the track map of the disk and place it into address pointed by iy+MapAddress
1374  4717              ; IN: Disabled interrupts
1375  4717              ; OUT: a - error code or 0 if no error
1376  4717              ;***************************************************************************************************
1377  4717              ReadMap:
1378  4717              ; -- read sector 15 on track 0
1379  4717 FD 36 12 00  	ld (iy+UserTrackNo),0			; Track number 0												;4717	fd 36 12 00 	. 6 . .
1380  471B FD 36 11 0F  	ld (iy+UserSectorNo),15			; Sector Number 15												;471b	fd 36 11 0f 	. 6 . .
1381  471F CD 27 5B     	call READSECTOR					; Read a sector from disk into Sector Buffer					;471f	cd 27 5b 	. ' [
1382  4722 B7           	or a							; check if error (a != 0)										;4722	b7 	.
1383  4723 C2 41 42     	jp nz,DOSError					; yes - jump to Error handling routine							;4723	c2 41 42 	. A B
1384  4726              ; -- copy map data from read buffer into MapData
1385  4726 FD 5E 34     	ld e,(iy+MapAddress)																			;4726	fd 5e 34 	. ^ 4
1386  4729 FD 56 35     	ld d,(iy+MapAddress+1)			; dst - de - MapAddress 										;4729	fd 56 35 	. V 5
1387  472C FD 6E 31     	ld l,(iy+DataBuf)																				;472c	fd 6e 31 	. n 1
1388  472F FD 66 32     	ld h,(iy+DataBuf+1)				; src - hl - DataBuff											;472f	fd 66 32 	. f 2
1389  4732 01 50 00     	ld bc,80						; 80 bytes to copy (1 bit for Sector -> 640 sectors)			;4732	01 50 00 	. P .
1390  4735 ED B0        	ldir							; copy bytes													;4735	ed b0 	. .
1391  4737 C9           	ret								; ------------------------- End of Proc -----------------------	;4737	c9 	.
1392  4738
1393  4738
1394  4738
1395  4738              ;***************************************************************************************************
1396  4738              ; Fill DataBuf with value 0
1397  4738              ; IN: none
1398  4738              ; OUT: none
1399  4738              ;***************************************************************************************************
1400  4738              ClearDataBuf:
1401  4738 FD 6E 31     	ld l,(iy+DataBuf)																				;4738	fd 6e 31 	. n 1
1402  473B FD 66 32     	ld h,(iy+DataBuf+1)				; src - hl - DataBuf address									;473b	fd 66 32 	. f 2
1403  473E 36 00        	ld (hl),0						; set first byte to 0											;473e	36 00 	6 .
1404  4740 5D           	ld e,l																							;4740	5d 	]
1405  4741 54           	ld d,h							; dst - de - DataBuf address									;4741	54 	T
1406  4742 13           	inc de							; dst - de - address of next byte 								;4742	13 	.
1407  4743 01 80 00     	ld bc,128						; 128 bytes to clear											;4743	01 80 00 	. . .
1408  4746 ED B0        	ldir							; fill buffer with 0 											;4746	ed b0 	. .
1409  4748 C9           	ret								; -------------------------- End of Proc ----------------------	;4748	c9 	.
1410  4749
1411  4749
1412  4749
1413  4749              ;***************************************************************************************************
1414  4749              ; Clear a sector of the disk
1415  4749              ; IN: Disabled interrupts
1416  4749              ;     IY+TRCK - track number
1417  4749              ;     IY+SCTR - sector number
1418  4749              ;     IY+DRVS - drive selected
1419  4749              ; OUT: a - error code or 0 if no error
1420  4749              ;***************************************************************************************************
1421  4749              ClearSector:
1422  4749 CD 38 47     	call ClearDataBuf				; clear 128 bytes in DataBuf									;4749	cd 38 47 	. 8 G
1423  474C CD A1 59     	call WRITESECTOR				; Write a sector to disk										;474c	cd a1 59 	. . Y
1424  474F B7           	or a							; check if error (a != 0)										;474f	b7 	.
1425  4750 C2 41 42     	jp nz,DOSError					; yes - jump to Error handling routine							;4750	c2 41 42 	. A B
1426  4753 C9           	ret								; -------------------------- End of Proc ----------------------	;4753	c9 	.
1427  4754
1428  4754
1429  4754
1430  4754              ;***************************************************************************************************
1431  4754              ; Save the track map pointed by iy+MapAddress to the disk (track 0, sector 15)
1432  4754              ; IN: Disabled interrupts
1433  4754              ;     IY+DRVS - drive selected
1434  4754              ; OUT: a - error code or 0 if no error
1435  4754              ;***************************************************************************************************
1436  4754              SaveMap:
1437  4754              ; -- clear sector buffer
1438  4754 CD 38 47     	call ClearDataBuf				; clear 128 bytes in DataBuf									;4754	cd 38 47 	. 8 G
1439  4757
1440  4757              ; -- setup parameters (track=0,sector=15)
1441  4757 FD 36 12 00  	ld (iy+UserTrackNo),0			; Track number 0												;4757	fd 36 12 00 	. 6 . .
1442  475B FD 36 11 0F  	ld (iy+UserSectorNo),15			; Sector number 15												;475b	fd 36 11 0f 	. 6 . .
1443  475F
1444  475F              ; -- copy Sector Map data into Sector Data Buffer
1445  475F FD 5E 31     	ld e,(iy+DataBuf)																				;475f	fd 5e 31 	. ^ 1
1446  4762 FD 56 32     	ld d,(iy+DataBuf+1)				; dst - de - address of DataBuf									;4762	fd 56 32 	. V 2
1447  4765 FD 6E 34     	ld l,(iy+MapAddress)																			;4765	fd 6e 34 	. n 4
1448  4768 FD 66 35     	ld h,(iy+MapAddress+1)			; src - hl - address of MapData									;4768	fd 66 35 	. f 5
1449  476B 01 50 00     	ld bc,80						; 80 bytes to copy (rest of sector is already cleared to 0)		;476b	01 50 00 	. P .
1450  476E ED B0        	ldir							; copy bytes do DataBuf											;476e	ed b0 	. .
1451  4770              ; -- write buffer to Disk Sector
1452  4770 CD A1 59     	call WRITESECTOR				; Write a sector to disk										;4770	cd a1 59 	. . Y
1453  4773 B7           	or a							; check if error (a != 0)										;4773	b7 	.
1454  4774 C2 41 42     	jp nz,DOSError					; yes - jump to Error handling routine							;4774	c2 41 42 	. A B
1455  4777 C9           	ret								; -------------------------- End of Proc ----------------------	;4777	c9 	.
1456  4778
1457  4778
1458  4778              ;***************************************************************************************************
1459  4778              ;
1460  4778              ; IN: hl - parse point
1461  4778              ;     (iy+Filename) - filename to close
1462  4778              sub_4778h:
1463  4778 FD E5        	push iy							; copy iy to hl													;4778	fd e5 	. .
1464  477A E1           	pop hl							; hl -  DOS base pointer										;477a	e1 	.
1465  477B FD 36 00 00  	ld (iy+FileNo),0				; set File # to 0 												;477b	fd 36 00 00 	. 6 . .
1466  477F 11 17 00     	ld de,FCBlock1					; de - offset to 1st FCB Block									;477f	11 17 00 	. . .
1467  4782 19           	add hl,de						; hl - address of 1st FCB Block									;4782	19 	.
1468  4783 7E           	ld a,(hl)						; a - Open Flag 												;4783	7e 	~
1469  4784 B7           	or a							; is file Opened?												;4784	b7 	.
1470  4785 28 09        	jr z,l4790h			; no - ;4785	28 09 	( .
1471  4787 CD BF 47     	call sub_47bfh		;4787	cd bf 47 	. . G
1472  478A FE 08        	cp 008h		;478a	fe 08 	. .
1473  478C C8           	ret z			;478c	c8 	.
1474  478D FD 34 00     	inc (iy+FileNo)		;478d	fd 34 00 	. 4 .
1475  4790              l4790h:
1476  4790 11 0D 00     	ld de,0000dh		;4790	11 0d 00 	. . .
1477  4793 19           	add hl,de			;4793	19 	.
1478  4794 7E           	ld a,(hl)			;4794	7e 	~
1479  4795 B7           	or a			;4795	b7 	.
1480  4796 20 14        	jr nz,l47ach		;4796	20 14 	  .
1481  4798 FD E5        	push iy		;4798	fd e5 	. .
1482  479A E1           	pop hl			;479a	e1 	.
1483  479B 11 17 00     	ld de,00017h		;479b	11 17 00 	. . .
1484  479E 19           	add hl,de			;479e	19 	.
1485  479F FD 7E 00     	ld a,(iy+FileNo)		;479f	fd 7e 00 	. ~ .
1486  47A2 B7           	or a			;47a2	b7 	.
1487  47A3 28 04        	jr z,l47a9h		;47a3	28 04 	( .
1488  47A5 11 0D 00     	ld de,0000dh		;47a5	11 0d 00 	. . .
1489  47A8 19           	add hl,de			;47a8	19 	.
1490  47A9              l47a9h:
1491  47A9 3E 05        	ld a,005h		;47a9	3e 05 	> .
1492  47AB C9           	ret			;47ab	c9 	.
1493  47AC              l47ach:
1494  47AC CD BF 47     	call sub_47bfh		;47ac	cd bf 47 	. . G
1495  47AF FE 08        	cp 008h		;47af	fe 08 	. .
1496  47B1 C8           	ret z			;47b1	c8 	.
1497  47B2 B7           	or a			;47b2	b7 	.
1498  47B3 ED 52        	sbc hl,de		;47b3	ed 52 	. R
1499  47B5 FD 7E 17     	ld a,(iy+FCBlock1)		;47b5	fd 7e 17 	. ~ .
1500  47B8 B7           	or a			;47b8	b7 	.
1501  47B9 3E 0E        	ld a,00eh		;47b9	3e 0e 	> .
1502  47BB C0           	ret nz			;47bb	c0 	.
1503  47BC 3E 05        	ld a,005h		;47bc	3e 05 	> .
1504  47BE C9           	ret			;47be	c9 	.
1505  47BF
1506  47BF
1507  47BF              ;***************************************************************************************************
1508  47BF              ; Check if FCB specified by hl handles filename specified in iy+Filename
1509  47BF              ; IN: hl - address of FCB (File Control Block)
1510  47BF              ;     (iy+Filename) - filename to close
1511  47BF              ; OUT: a - error/status codes: 8 - FILE ALREADY OPEN or 5 - FILE NOT OPEN
1512  47BF              ;      de - (if fileanmes match) address of FCB
1513  47BF              ;      hl - (if fileanmes match) points to next char after filename (track number in FCB)
1514  47BF              sub_47bfh:
1515  47BF FD E5        	push iy							; save iy - DOS base											;47bf	fd e5 	. .
1516  47C1 E5           	push hl							; save hl - FCB structure										;47c1	e5 	.
1517  47C2 06 08        	ld b,8							; b - 8 chars of filename										;47c2	06 08 	. .
1518  47C4 23           	inc hl							; skip Status byte												;47c4	23 	#
1519  47C5 23           	inc hl							; hl - filename in FCB											;47c5	23 	#
1520  47C6              .nextChar:
1521  47C6 FD 7E 01     	ld a,(iy+Filename)				; a - char of filename to compare								;47c6	fd 7e 01 	. ~ .
1522  47C9 BE           	cp (hl)							; is it the same in FCB?										;47c9	be 	.
1523  47CA 23           	inc hl							; hl - next char of filename in FCB								;47ca	23 	#
1524  47CB FD 23        	inc iy							; iy - next char of filename in DOS structure					;47cb	fd 23 	. #
1525  47CD 20 08        	jr nz,.returnNotOpen			; not match - return with Error FILE NOT OPEN -----------------	;47cd	20 08 	  .
1526  47CF 10 F5        	djnz .nextChar					; continue to compare all 8 chars -----------------------------	;47cf	10 f5 	. .
1527  47D1 3E 08        	ld a,8							; a - Error 5 - FILE ALREADY OPEN								;47d1	3e 08 	> .
1528  47D3 D1           	pop de							; restore de - FCB Structure									;47d3	d1 	.
1529  47D4 FD E1        	pop iy							; restore iy - DOS base											;47d4	fd e1 	. .
1530  47D6 C9           	ret								; ----------------- End of Proc -------------------------------	;47d6	c9 	.
1531  47D7              .returnNotOpen:
1532  47D7 E1           	pop hl							; restore hl - FCB Structure									;47d7	e1 	.
1533  47D8 FD E1        	pop iy							; restore iy - DOS base											;47d8	fd e1 	. .
1534  47DA 3E 05        	ld a,5							; a - Error 5 - FILE NOT OPEN									;47da	3e 05 	> .
1535  47DC C9           	ret								; ----------------- End of Proc -------------------------------	;47dc	c9 	.
1536  47DD
1537  47DD
1538  47DD              ;***************************************************************************************************
1539  47DD              ; DOS Command CLOSE
1540  47DD              ; Syntax: CLOSE "filaname"
1541  47DD              ; ------------------------
1542  47DD              ; Close file specified by "filename" (which has the file type code "D") previously opened by OPEN.
1543  47DD              ; Filename may have no more than 8 characters.
1544  47DD              ; IN: hl - parse point (just after 'CLOSE' text)
1545  47DD              DCmdCLOSE:
1546  47DD              ; -- parse required filename
1547  47DD CD 67 53     	call CSI						; parse filename and copy it to (iy+filename)					;47dd	cd 67 53 	. g S
1548  47E0 B7           	or a							; was any Error?												;47e0	b7 	.
1549  47E1 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;47e1	c2 41 42 	. A B
1550  47E4 E5           	push hl							; save hl - parse point											;47e4	e5 	.
1551  47E5              ; -- test if command is called from BASIC program or direct
1552  47E5 2A A2 78     	ld hl,(BasicLineNumber)			; hl - Current line being processed by BASIC					;47e5	2a a2 78 	* . x
1553  47E8 23           	inc hl							; if was -1 (oxffff) then now will be 0							;47e8	23 	#
1554  47E9 7C           	ld a,h																							;47e9	7c 	|
1555  47EA B5           	or l							; is hl = 0 (called as direct command)							;47ea	b5 	.
1556  47EB 20 0A        	jr nz,.fromBasicProg			; no - continue ;47eb	20 0a 	  .
1557  47ED
1558  47ED              ; -- called from direct command
1559  47ED CD 78 47     	call sub_4778h		;47ed	cd 78 47 	. x G
1560  47F0 E1           	pop hl			;47f0	e1 	.
1561  47F1 FE 08        	cp 008h		;47f1	fe 08 	. .
1562  47F3 C0           	ret nz			;47f3	c0 	.
1563  47F4 AF           	xor a			;47f4	af 	.
1564  47F5 12           	ld (de),a			;47f5	12 	.
1565  47F6 C9           	ret			;47f6	c9 	.
1566  47F7
1567  47F7              ; -- called from BASIC Program
1568  47F7              .fromBasicProg:
1569  47F7 CD 78 47     	call sub_4778h		;47f7	cd 78 47 	. x G
1570  47FA E1           	pop hl			;47fa	e1 	.
1571  47FB FE 08        	cp 008h		;47fb	fe 08 	. .
1572  47FD C0           	ret nz			;47fd	c0 	.
1573  47FE 1A           	ld a,(de)			;47fe	1a 	.
1574  47FF FE 02        	cp 002h		;47ff	fe 02 	. .
1575  4801 3E 00        	ld a,000h		;4801	3e 00 	> .
1576  4803 12           	ld (de),a			;4803	12 	.
1577  4804 C0           	ret nz			;4804	c0 	.
1578  4805 13           	inc de			;4805	13 	.
1579  4806 1A           	ld a,(de)			;4806	1a 	.
1580  4807 B7           	or a			;4807	b7 	.
1581  4808 C8           	ret z			;4808	c8 	.
1582  4809 E5           	push hl			;4809	e5 	.
1583  480A EB           	ex de,hl			;480a	eb 	.
1584  480B 11 09 00     	ld de,00009h		;480b	11 09 00 	. . .
1585  480E 19           	add hl,de			;480e	19 	.
1586  480F 7E           	ld a,(hl)			;480f	7e 	~
1587  4810 23           	inc hl			;4810	23 	#
1588  4811 FD 77 12     	ld (iy+UserTrackNo),a		;4811	fd 77 12 	. w .
1589  4814 7E           	ld a,(hl)			;4814	7e 	~
1590  4815 FD 77 11     	ld (iy+UserSectorNo),a		;4815	fd 77 11 	. w .
1591  4818 F3           	di			;4818	f3 	.
1592  4819 CD 41 5F     	call PowerOn		; Disk power ON			;4819	cd 41 5f 	. A _
1593  481C C5           	push bc			;481c	c5 	.
1594  481D 01 32 00     	ld bc,00032h		;481d	01 32 00 	. 2 .
1595  4820 CD BE 5E     	call DELAYMS		; Delay mS in reg C								;4820	cd be 5e 	. . ^
1596  4823 C1           	pop bc			;4823	c1 	.
1597  4824 DB 13        	in a,(FLWR_PROTECT)		;4824	db 13 	. .
1598  4826 B7           	or a			;4826	b7 	.
1599  4827 3E 04        	ld a,004h		;4827	3e 04 	> .
1600  4829 FA 41 42     	jp m,DOSError		; Error handling routine	;4829	fa 41 42 	. A B
1601  482C CD A1 59     	call WRITESECTOR		; Write a sector to disk						;482c	cd a1 59 	. . Y
1602  482F B7           	or a			;482f	b7 	.
1603  4830 C2 41 42     	jp nz,DOSError		; Error handling routine	;4830	c2 41 42 	. A B
1604  4833 FB           	ei			;4833	fb 	.
1605  4834 CD 52 5F     	call PowerOff		; Disk power OFF		;4834	cd 52 5f 	. R _
1606  4837 E1           	pop hl			;4837	e1 	.
1607  4838 C9           	ret			;4838	c9 	.
1608  4839
1609  4839
1610  4839              ;***************************************************************************************************
1611  4839              ; DOS Command BSAVE
1612  4839              ; Syntax: BSAVE "filename", SSSS, EEEE
1613  4839              ; ------------------------------------
1614  4839              ; Save part of memory to file specified by "filename" to Disk as file Type 'B'.
1615  4839              ; Memory part is defined as all bytes from address SSSS (included) to address EEEE (included).
1616  4839              ; Filename may have no more than 8 characters. Both addresses SSSS and EEEE must be provided
1617  4839              ; as hexadecimal 16bit number.
1618  4839              ; IN: hl - parse point (just after 'LOAD' text)
1619  4839              DCmdBSAVE:
1620  4839              ; -- expected required name of file enclosed with double quote chars
1621  4839 CD 78 53     	call ParseFilename				; Verify syntax and copy filename to DOS Filename Buffer		;4839	cd 78 53 	. x S
1622  483C E5           	push hl							; save hl - parse point											;483c	e5 	.
1623  483D B7           	or a							; was any Error?												;483d	b7 	.
1624  483E C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;483e	c2 41 42 	. A B
1625  4841
1626  4841              ; -- expected ',' char
1627  4841 E1           	pop hl							; restore hl - parse point										;4841	e1 	.
1628  4842 CF           	rst $08							; Assert next char is ','										;4842	cf 	.
1629  4843 2C           	defb ','						; next char must be ','											;4843	2c 	,
1630  4844
1631  4844              ; -- save current addresses of BASIC program on stack
1632  4844 ED 5B F9 78  	ld de,(SYS_BASIC_END_PTR)		; end of current BASIC Program 									;4844	ed 5b f9 78 	. [ . x
1633  4848 D5           	push de							; save de - end of program 										;4848	d5 	.
1634  4849 ED 5B A4 78  	ld de,(SYS_BASIC_START_PTR)		; start of current BASIC Program 								;4849	ed 5b a4 78 	. [ . x
1635  484D D5           	push de							; save de - start of programm									;484d	d5 	.
1636  484E
1637  484E              ; -- convert hex text (4 chars) into 16bit address - start of memory to save
1638  484E CD B9 53     	call Asc2Hex					; de - 16bit address from 4 chars of Hex text					;484e	cd b9 53 	. . S
1639  4851 3E 01        	ld a,1							; a - Error 01 - SYNTAX ERROR									;4851	3e 01 	> .
1640  4853 DA B7 48     	jp c,BS_ExitError				; if parse hex error - exit with Error 01 ---------------------	;4853	da b7 48 	. . H
1641  4856 ED 53 A4 78  	ld (SYS_BASIC_START_PTR),de		; no error - save as start of memory to save 					;4856	ed 53 a4 78 	. S . x
1642  485A
1643  485A              ; -- expected ',' char
1644  485A CF           	rst $08							; Assert next char is ','										;485a	cf 	.
1645  485B 2C           	defb ','						; next char must be ','											;485b	2c 	,
1646  485C
1647  485C              ; -- convert hex text (4 chars) into 16bit address - end of memory to save
1648  485C CD B9 53     	call Asc2Hex					; de - 16bit address from 4 chars of Hex text					;485c	cd b9 53 	. . S
1649  485F 3E 01        	ld a,1							; a - Error 01 - SYNTAX ERROR									;485f	3e 01 	> .
1650  4861 DA B7 48     	jp c,BS_ExitError				; if parse hex error - exit with Error 01 ---------------------	;4861	da b7 48 	. . H
1651  4864 13           	inc de							; de - next address after last byte to save						;4864	13 	.
1652  4865 ED 53 F9 78  	ld (SYS_BASIC_END_PTR),de		; save end of current BASIC Program 							;4865	ed 53 f9 78 	. S . x
1653  4869
1654  4869              ; -- verify syntax - must be end of line ('\0') or end of expression ':'
1655  4869 7E           	ld a,(hl)						; a - next parsed char											;4869	7e 	~
1656  486A B7           	or a							; is it \0 ? (end of BASIC line)								;486a	b7 	.
1657  486B 28 07        	jr z,.continue					; yes - continue												;486b	28 07 	( .
1658  486D FE 3A        	cp ':'							; is it ':' (end of expression)?								;486d	fe 3a 	. :
1659  486F 3E 01        	ld a,1							; a - Error 01 - SYNTAX ERROR									;486f	3e 01 	> .
1660  4871 C2 B7 48     	jp nz,BS_ExitError				; if not \0 nor ':' - exit with Error 01 ----------------------	;4871	c2 b7 48 	. . H
1661  4874
1662  4874              .continue:
1663  4874              ; -- set type of file as Binary Program ('B')
1664  4874 FD 36 09 42  	ld (iy+FileType),'B'			; set type of file as Binary Program ('B')						;4874	fd 36 09 42 	. 6 . B
1665  4878 E5           	push hl							; save hl - parse point											;4878	e5 	.
1666  4879
1667  4879              ; -- verify start addres is smaller than end address
1668  4879 2A A4 78     	ld hl,(SYS_BASIC_START_PTR)		; hl - start of memory area to save, de - end of area 							;4879	2a a4 78 	* . x
1669  487C B7           	or a							; clear Carry flag												;487c	b7 	.
1670  487D ED 52        	sbc hl,de						; difference - is hl >= de ? 									;487d	ed 52 	. R
1671  487F 3E 01        	ld a,1							; a - Error 01 - SYNTAX ERROR									;487f	3e 01 	> .
1672  4881 D2 9A 48     	jp nc,SF_ExitError				; if hl >= de - exit with Error 01 ----------------------------	;4881	d2 9a 48 	. . H
1673  4884
1674  4884              ; -- no error - turn on Disk Drive and wait 2ms
1675  4884 CD 41 5F     	call PowerOn					; Disk power ON													;4884	cd 41 5f 	. A _
1676  4887 C5           	push bc							; save bc														;4887	c5 	.
1677  4888 01 02 00     	ld bc,2							; bc - 2 miliseconds to delay									;4888	01 02 00 	. . .
1678  488B CD BE 5E     	call DELAYMS					; delay 2 ms 													;488b	cd be 5e 	. . ^
1679  488E C1           	pop bc							; restore bc													;488e	c1 	.
1680  488F              ; -- check if Disk is not Write-Protected
1681  488F DB 13        	in a,(FLWR_PROTECT)				; a - read Write Protected flag from FDC						;488f	db 13 	. .
1682  4891 B7           	or a							; is bit 7 set? (write protected)								;4891	b7 	.
1683  4892 3E 04        	ld a,4							; a - Error 04 - DISK WRITE PROTECTED							;4892	3e 04 	> .
1684  4894 FA 9A 48     	jp m,SF_ExitError				; yes - go to Error handling routine --------------------------	;4894	fa 9a 48 	. . H
1685  4897 C3 79 44     	jp DoSaveFile					; continue reusing part of 'SAVEFILE' DOS routine -------------	;4897	c3 79 44 	. y D
1686  489A
1687  489A
1688  489A              SF_ExitError:
1689  489A              ; -- was it canceled by user pressing BREAK?
1690  489A FE 11        	cp 17							; is it Error 17 - BREAK by user 								;489a	fe 11 	. .
1691  489C 20 18        	jr nz,.exitWithError			; no - exit with other error									;489c	20 18 	  .
1692  489E
1693  489E              ; --
1694  489E CD 13 59     	call FINDFILE					; Search for file in directory									;489e	cd 13 59 	. . Y
1695  48A1 FE 02        	cp 2							; was Error 2 - FILE ALREADY EXISTS ?							;48a1	fe 02 	. .
1696  48A3 3E 11        	ld a,17							; set Error 17 - BREAK by user									;48a3	3e 11 	> .
1697  48A5 20 0F        	jr nz,.exitWithError			; file not found - ;48a5	20 0f 	  .
1698  48A7
1699  48A7              ; -- there is Directory Entry for this file - mark as deleted
1700  48A7 EB           	ex de,hl						; hl - address of byte in Dir Entry (just after filename)		;48a7	eb 	.
1701  48A8 11 F6 FF     	ld de,-10						; 10 bytes from start of Directory Entry						;48a8	11 f6 ff 	. . .
1702  48AB 19           	add hl,de						; hl - start of Dir Entry - File Type byte						;48ab	19 	.
1703  48AC 36 01        	ld (hl),1						; mark file in Directory Entry as deleted 						;48ac	36 01 	6 .
1704  48AE CD A1 59     	call WRITESECTOR				; Write sector with Directory to Disk							;48ae	cd a1 59 	. . Y
1705  48B1 B7           	or a							; was any Error?												;48b1	b7 	.
1706  48B2 20 02        	jr nz,.exitWithError			; yes - pass it through 										;48b2	20 02 	  .
1707  48B4 3E 11        	ld a,17							; no - set Error 17 - BREAK by user								;48b4	3e 11 	> .
1708  48B6              .exitWithError:
1709  48B6 E1           	pop hl							; restore hl - BASIC Parser Pointer (???)						;48b6	e1 	.
1710  48B7
1711  48B7              ;***************************************************************************************************
1712  48B7              ; Restore BASIC Program addresses from Stack and go o DOS Error handler
1713  48B7              ; IN: a - Error code
1714  48B7              BS_ExitError:
1715  48B7 D1           	pop de							; restore de - start of program									;48b7	d1 	.
1716  48B8 ED 53 A4 78  	ld (SYS_BASIC_START_PTR),de		; store to start of current BASIC Program variable				;48b8	ed 53 a4 78 	. S . x
1717  48BC D1           	pop de							; restore de - end of program									;48bc	d1 	.
1718  48BD ED 53 F9 78  	ld (SYS_BASIC_END_PTR),de		; store to end of current BASIC Program variable				;48bd	ed 53 f9 78 	. S . x
1719  48C1 C3 41 42     	jp DOSError						; got Error handling routine ----------------------------------	;48c1	c3 41 42 	. A B
1720  48C4
1721  48C4
1722  48C4
1723  48C4
1724  48C4              ;***************************************************************************************************
1725  48C4              ; DOS Command BLOAD
1726  48C4              ; Syntax: BLOAD "filename"
1727  48C4              ; ------------------------
1728  48C4              ; Load file specified by filename (which has the file type code "B") from a Floppy Disk.
1729  48C4              ; The address where file will be loaded is already defined on Disk (after saving via BSAVE command).
1730  48C4              ; Filename may have no more than 8 characters.
1731  48C4              ; IN: hl - parse point (just after 'BLOAD' text)
1732  48C4              DCmdBLOAD:
1733  48C4              ; -- expected required name of file enclosed with double quote chars
1734  48C4 CD 67 53     	call CSI						; parse filename and copy it to (iy+filename)					;48c4	cd 67 53 	. g S
1735  48C7 E5           	push hl							; save hl - parse point											;48c7	e5 	.
1736  48C8 B7           	or a							; was any Error?												;48c8	b7 	.
1737  48C9 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;48c9	c2 41 42 	. A B
1738  48CC
1739  48CC              ; -- set type of file as Binary Program ('B')
1740  48CC FD 36 09 42  	ld (iy+FileType),'B'			; set type of file as Binary Program ('B')						;48cc	fd 36 09 42 	. 6 . B
1741  48D0
1742  48D0              ; -- save current Program start and end addresses
1743  48D0 E1           	pop hl							; restore hl - parse point										;48d0	e1 	.
1744  48D1 ED 5B F9 78  	ld de,(SYS_BASIC_END_PTR)		; de - end of current Program 									;48d1	ed 5b f9 78 	. [ . x
1745  48D5 D5           	push de							; save de - end of current Program								;48d5	d5 	.
1746  48D6 ED 5B A4 78  	ld de,(SYS_BASIC_START_PTR)		; de - start of current Program 								;48d6	ed 5b a4 78 	. [ . x
1747  48DA D5           	push de							; save de - start of current Program							;48da	d5 	.
1748  48DB E5           	push hl							; save hl - parse point											;48db	e5 	.
1749  48DC
1750  48DC              ; -- call DOS routine
1751  48DC CD B1 43     	call LOADFILE					; Load a file from disk											;48dc	cd b1 43 	. . C
1752  48DF
1753  48DF              ; -- restore current Program start and end addresses
1754  48DF E1           	pop hl							; restore hl - parse point										;48df	e1 	.
1755  48E0 D1           	pop de							; restore de - saved start of current Program					;48e0	d1 	.
1756  48E1 ED 53 A4 78  	ld (SYS_BASIC_START_PTR),de		; set as Start of current Program 								;48e1	ed 53 a4 78 	. S . x
1757  48E5 D1           	pop de							; restore de - saved end of current Program						;48e5	d1 	.
1758  48E6 ED 53 F9 78  	ld (SYS_BASIC_END_PTR),de		; set as End of current Program 								;48e6	ed 53 f9 78 	. S . x
1759  48EA              ; -- now check if was any Error
1760  48EA B7           	or a							; was any Error?												;48ea	b7 	.
1761  48EB C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;48eb	c2 41 42 	. A B
1762  48EE C9           	ret								; no ----------------- End of Proc ----------------------------	;48ee	c9 	.
1763  48EF
1764  48EF
1765  48EF
1766  48EF              ;***************************************************************************************************
1767  48EF              ; DOS Command BRUN
1768  48EF              ; Syntax: BRUN "filename"
1769  48EF              ; -----------------------
1770  48EF              ; Load file specified by filename (which has the file type code "B") from a Floppy Disk and execute it.
1771  48EF              ; The address where file will be loaded is already defined on Disk (after saving via BSAVE command).
1772  48EF              ; Filename may have no more than 8 characters.
1773  48EF              ; IN: hl - parse point (just after 'BRUN' text)
1774  48EF              DCmdBRUN:
1775  48EF              ; -- expected required name of file enclosed with double quote chars
1776  48EF CD 67 53     	call CSI						; parse filename and copy it to (iy+filename)					;48ef	cd 67 53 	. g S
1777  48F2 E5           	push hl							; save hl - parse point											;48f2	e5 	.
1778  48F3 B7           	or a							; was any Error?												;48f3	b7 	.
1779  48F4 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;48f4	c2 41 42 	. A B
1780  48F7
1781  48F7              ; -- set type of file as Binary Program ('B') and call DOS routine
1782  48F7 FD 36 09 42  	ld (iy+FileType),'B'			; set type of file as Binary Program ('B')						;48f7	fd 36 09 42 	. 6 . B
1783  48FB CD B1 43     	call LOADFILE					; Load a file from disk											;48fb	cd b1 43 	. . C
1784  48FE B7           	or a							; was any Error?												;48fe	b7 	.
1785  48FF C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	; Error handling routine	;48ff	c2 41 42 	. A B
1786  4902
1787  4902              ; -- execute loaded code from 1st byte
1788  4902 2A A4 78     	ld hl,(SYS_BASIC_START_PTR)		; hl - start of loaded Program 									;4902	2a a4 78 	* . x
1789  4905 E9           	jp (hl)							; execute loaded Program --------------------------------------	;4905	e9 	.
1790  4906
1791  4906
1792  4906
1793  4906              ;***************************************************************************************************
1794  4906              ; DOS Command DIR
1795  4906              ; Syntax: DIR
1796  4906              ; -----------
1797  4906              ; Display list of all files on Disk. For every file the file Type will be printed as well.
1798  4906              ; For example: T:MYFILE
1799  4906              ; File Types: 'T' - BASIC text file, 'B' - binary program, 'D' - data file which should be handled
1800  4906              ; by DOS commands like 'IN#' and 'PR#'
1801  4906              ; IN: hl - parse point (just after 'BRUN' text)
1802  4906              DCmdDIR:
1803  4906 E5           	push hl							; save hl - parse point											;4906	e5 	.
1804  4907 F3           	di								; disable interrupts											;4907	f3 	.
1805  4908
1806  4908              ; -- turn on Disk Drive and wait 50 ms
1807  4908 CD 41 5F     	call PowerOn					; Disk power ON													;4908	cd 41 5f 	. A _
1808  490B C5           	push bc							; save bc														;490b	c5 	.
1809  490C 01 32 00     	ld bc,50						; bc - 50 miliseconds to delay									;490c	01 32 00 	. 2 .
1810  490F CD BE 5E     	call DELAYMS					; delay 50 ms													;490f	cd be 5e 	. . ^
1811  4912 C1           	pop bc							; restore bc													;4912	c1 	.
1812  4913
1813  4913              ; -- set 1st sector with Directory Entries to read
1814  4913 FD 36 12 00  	ld (iy+UserTrackNo),0			; set Track Number 0											;4913	fd 36 12 00 	. 6 . .
1815  4917 FD 36 11 00  	ld (iy+UserSectorNo),0			; set Sector Number 0											;4917	fd 36 11 00 	. 6 . .
1816  491B
1817  491B              .nextSector:
1818  491B              ; -- read Sector with Directory Entries
1819  491B F3           	di								; disable interrupts											;491b	f3 	.
1820  491C CD 27 5B     	call READSECTOR					; Read sector from disk											;491c	cd 27 5b 	. ' [
1821  491F B7           	or a							; was any Error?												;491f	b7 	.
1822  4920 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4920	c2 41 42 	. A B
1823  4923
1824  4923              ; -- setup for 1st Directory Entry on this Sector
1825  4923 FD 6E 31     	ld l,(iy+DataBuf)				; hl - address of data from Sector								;4923	fd 6e 31 	. n 1
1826  4926 FD 66 32     	ld h,(iy+DataBuf+1)																				;4926	fd 66 32 	. f 2
1827  4929 11 06 00     	ld de,6							; de - 6 bytes to skip after filename in Directory Entry		;4929	11 06 00 	. . .
1828  492C 0E 08        	ld c,8							; c - 8 entries per Sector										;492c	0e 08 	. .
1829  492E
1830  492E              .printDirEntry:
1831  492E              ; -- check 1st char of Directory Entry - file type, file deleted or end of Directory List
1832  492E 7E           	ld a,(hl)						; a - file type 												;492e	7e 	~
1833  492F B7           	or a							; is it 0? (end of Directory List)								;492f	b7 	.
1834  4930 28 5D        	jr z,.exit						; yes - turn off Disk and exit --------------------------------	;4930	28 5d 	( ]
1835  4932 FE 01        	cp 1							; is it 1? (deleted entry)										;4932	fe 01 	. .
1836  4934 20 08        	jr nz,.printFilename			; no - print 10 chars of entry (filename) on screen 			;4934	20 08 	  .
1837  4936
1838  4936              ; -- entry deleted - skip 10 chars (without printing on screen)
1839  4936 C5           	push bc							; save bc														;4936	c5 	.
1840  4937 01 0A 00     	ld bc,10						; bc - 10 chars to skip											;4937	01 0a 00 	. . .
1841  493A 09           	add hl,bc						; hl - point to byte just after filename						;493a	09 	.
1842  493B C1           	pop bc							; restore bc													;493b	c1 	.
1843  493C 18 0E        	jr .testSPACEPress				; skip printing code and continue -----------------------------	;493c	18 0e 	. .
1844  493E
1845  493E              .printFilename:
1846  493E              ; -- print on screen 10 chars from Directory Entry (filetype,';', and filename)
1847  493E 06 0A        	ld b,10							; b - 10 chars to print on screen								;493e	06 0a 	. .
1848  4940              .printNextChar:
1849  4940 7E           	ld a,(hl)						; a - char from Driectory Entry									;4940	7e 	~
1850  4941 CD 2A 03     	call SysPrintChar				; call ROM routine to print char on screen						;4941	cd 2a 03 	. * .
1851  4944 23           	inc hl							; hl - next char												;4944	23 	#
1852  4945 10 F9        	djnz .printNextChar				; keep printing all 10 chars ----------------------------------	;4945	10 f9 	. .
1853  4947              ; -- move cursor to next line
1854  4947 3E 0D        	ld a,CR							; a - new line character										;4947	3e 0d 	> .
1855  4949 CD 2A 03     	call SysPrintChar				; call ROM routine to move cursor to next line					;4949	cd 2a 03 	. * .
1856  494C
1857  494C              .testSPACEPress:
1858  494C              ; -- test if SPACE key pressed - to PAUSE printing
1859  494C F3           	di								; disable interrupts											;494c	f3 	.
1860  494D 3A EF 68     	ld a,(SpaceKeyRow)				; a - read Keyboard row with SPACE key							;494d	3a ef 68 	: . h
1861  4950 CB 67        	bit SpaceKeyCol,a				; is SPACE key pressed?											;4950	cb 67 	. g
1862  4952 20 2D        	jr nz,.moveToNextEntry			; no - continue listing Directory Entries ---------------------	;4952	20 2d 	  -
1863  4954              ; -- SPACE key is pressed - delay 20 ms
1864  4954 C5           	push bc							; save bc														;4954	c5 	.
1865  4955 01 14 00     	ld bc,20						; bc - 20 miliseconds to delay									;4955	01 14 00 	. . .
1866  4958 CD BE 5E     	call DELAYMS					; delay 20 ms													;4958	cd be 5e 	. . ^
1867  495B C1           	pop bc							; restore bc													;495b	c1 	.
1868  495C              .waitKeyReleased:
1869  495C              ; -- wait for SPACE Key to be released
1870  495C 3A EF 68     	ld a,(SpaceKeyRow)				; a - read Keyboard row with SPACE key							;495c	3a ef 68 	: . h
1871  495F CB 67        	bit SpaceKeyCol,a				; is SPACE key pressed?											;495f	cb 67 	. g
1872  4961 28 F9        	jr z,.waitKeyReleased			; yes - wait until released -----------------------------------	;4961	28 f9 	( .
1873  4963              ; -- SPACE key is released - delay 20 ms
1874  4963 C5           	push bc							; save bc														;4963	c5 	.
1875  4964 01 14 00     	ld bc,20						; bc - 20 miliseconds to delay									;4964	01 14 00 	. . .
1876  4967 CD BE 5E     	call DELAYMS					; delay 20 ms													;4967	cd be 5e 	. . ^
1877  496A C1           	pop bc							; restore bc													;496a	c1 	.
1878  496B
1879  496B
1880  496B              .waitKeyPressed:
1881  496B              ; -- test if SPACE key pressed - to RESUME printing
1882  496B 3A EF 68     	ld a,(SpaceKeyRow)				; a - read Keyboard row with SPACE key							;496b	3a ef 68 	: . h
1883  496E CB 67        	bit SpaceKeyCol,a				; is SPACE key pressed?											;496e	cb 67 	. g
1884  4970 20 F9        	jr nz,.waitKeyPressed			; no - wait until pressed -------------------------------------	;4970	20 f9 	  .
1885  4972              ; -- SPACE key is pressed - delay 20 ms
1886  4972 C5           	push bc							; save bc														;4972	c5 	.
1887  4973 01 14 00     	ld bc,20						; bc - 20 miliseconds to delay									;4973	01 14 00 	. . .
1888  4976 CD BE 5E     	call DELAYMS					; delay 20 ms													;4976	cd be 5e 	. . ^
1889  4979 C1           	pop bc							; restore bc													;4979	c1 	.
1890  497A              .waitKeyRelAgain:
1891  497A              ; -- wait for SPACE Key to be released
1892  497A 3A EF 68     	ld a,(SpaceKeyRow)				; a - read Keyboard row with SPACE key							;497a	3a ef 68 	: . h
1893  497D CB 67        	bit SpaceKeyCol,a				; is SPACE key pressed?											;497d	cb 67 	. g
1894  497F 28 F9        	jr z,.waitKeyRelAgain			; yes - wait until released -----------------------------------	;497f	28 f9 	( .
1895  4981
1896  4981              .moveToNextEntry:
1897  4981              ; -- update pointer to next Directory Entry to read
1898  4981 19           	add hl,de						; hl - begin of next Entry (skip 6 bytes)						;4981	19 	.
1899  4982 0D           	dec c							; are 8 entries already printed from this Sector?				;4982	0d 	.
1900  4983 20 A9        	jr nz,.printDirEntry			; no - print next Directory Entry -----------------------------	;4983	20 a9 	  .
1901  4985
1902  4985              ; -- 8 entries been read - setup next Sector to read
1903  4985 FD 34 11     	inc (iy+UserSectorNo)			; increment Sector Number										;4985	fd 34 11 	. 4 .
1904  4988 FD 7E 11     	ld a,(iy+UserSectorNo)			; a - number of next Sector to read								;4988	fd 7e 11 	. ~ .
1905  498B FE 0F        	cp 15							; all 14 sectors already read?									;498b	fe 0f 	. .
1906  498D 20 8C        	jr nz,.nextSector				; no - read next Sector ---------------------------------------	;498d	20 8c 	  .
1907  498F
1908  498F              .exit:
1909  498F CD 52 5F     	call PowerOff					; Disk power OFF												;498f	cd 52 5f 	. R _
1910  4992 E1           	pop hl							; restore hl - parse point										;4992	e1 	.
1911  4993 C9           	ret								; -------------------- End of Proc ----------------------------	;4993	c9 	.
1912  4994
1913  4994
1914  4994
1915  4994              ;***************************************************************************************************
1916  4994              ; DOS Command ERA
1917  4994              ; Syntax: ERA "filename"
1918  4994              ; ----------------------
1919  4994              ; Deleted file specified by filename from Disk.
1920  4994              ; Filename may have no more than 8 characters.
1921  4994              ; IN: hl - parse point (just after 'ERA' text)
1922  4994              DCmdERA:
1923  4994              ; -- expected required name of file enclosed with double quote chars
1924  4994 CD 67 53     	call CSI						; parse filename and copy it to (iy+filename)					;4994	cd 67 53 	. g S
1925  4997 E5           	push hl							; save hl - parse point											;4997	e5 	.
1926  4998 B7           	or a							; was any Error?												;4998	b7 	.
1927  4999 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4999	c2 41 42 	. A B
1928  499C
1929  499C              ; -- turn on Disk Drive and wait 50 ms
1930  499C F3           	di								; disable interrupts											;499c	f3 	.
1931  499D CD 41 5F     	call PowerOn					; Disk power ON													;499d	cd 41 5f 	. A _
1932  49A0 C5           	push bc							; save bc														;49a0	c5 	.
1933  49A1 01 32 00     	ld bc,50						; bc - 50 miliseconds to delay									;49a1	01 32 00 	. 2 .
1934  49A4 CD BE 5E     	call DELAYMS					; delay 50 ms													;49a4	cd be 5e 	. . ^
1935  49A7 C1           	pop bc							; restore bc													;49a7	c1 	.
1936  49A8
1937  49A8              ; -- check if Disk is not Write-Protected
1938  49A8 DB 13        	in a,(FLWR_PROTECT)				; a - read Write Protected flag from FDC						;49a8	db 13 	. .
1939  49AA B7           	or a							; is bit 7 set? (write protected)								;49aa	b7 	.
1940  49AB 3E 04        	ld a,4							; a - Error 04 - DISK WRITE PROTECTED							;49ab	3e 04 	> .
1941  49AD FA 41 42     	jp m,DOSError					; yes - go to Error handling routine --------------------------	;49ad	fa 41 42 	. A B
1942  49B0
1943  49B0              ; -- find Directory Entry for this file
1944  49B0 CD 13 59     	call FINDFILE					; Search for file in directory									;49b0	cd 13 59 	. . Y
1945  49B3 FE 02        	cp 2							; was Error 2 - FILE ALREADY EXISTS	?							;49b3	fe 02 	. .
1946  49B5 28 09        	jr z,.fileFound					; yes - continue deleting file --------------------------------	;49b5	28 09 	( .
1947  49B7              ; -- other error or No Error
1948  49B7 B7           	or a							; other error?													;49b7	b7 	.
1949  49B8 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;49b8	c2 41 42 	. A B
1950  49BB              ; -- No Error - means there are no requested file on Disk
1951  49BB 3E 0D        	ld a,13							; a - Error 13 - FILE NOT FOUND									;49bb	3e 0d 	> .
1952  49BD C3 41 42     	jp DOSError						; go to Error handling routine --------------------------------	;49bd	c3 41 42 	. A B
1953  49C0
1954  49C0              ; -- in FINDFILE routine de is set to address of 10th byte of Directory Entry - file Track number
1955  49C0              .fileFound:
1956  49C0              ; -- set track and sector numbers for 1st sector of file
1957  49C0 1A           	ld a,(de)						; a - Track number of 1st file sector 							;49c0	1a 	.
1958  49C1 13           	inc de							; de - point to Sector Number									;49c1	13 	.
1959  49C2 FD 77 16     	ld (iy+NextTrackNo),a			; set Track Number for Sector to delete 						;49c2	fd 77 16 	. w .
1960  49C5 1A           	ld a,(de)						; a - Sector Number of 1st file sector							;49c5	1a 	.
1961  49C6 FD 77 15     	ld (iy+NextSectorNo),a			; set Sector Number fo Sector to delete							;49c6	fd 77 15 	. w .
1962  49C9
1963  49C9              ; -- mark file's Directory Entry as deleted
1964  49C9 EB           	ex de,hl						; hl - address in Directory Entry								;49c9	eb 	.
1965  49CA 11 F5 FF     	ld de,-11						; de - 11 bytes back will be start of Directory Entry 			;49ca	11 f5 ff 	. . .
1966  49CD 19           	add hl,de						; hl - start of Directory Entry - file type						;49cd	19 	.
1967  49CE 36 01        	ld (hl),1						; set file type byte to 1 - entry deleted						;49ce	36 01 	6 .
1968  49D0 CD A1 59     	call WRITESECTOR				; Write sector with Directory to disk							;49d0	cd a1 59 	. . Y
1969  49D3 B7           	or a							; was any Error?												;49d3	b7 	.
1970  49D4 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;49d4	c2 41 42 	. A B
1971  49D7
1972  49D7              ; -- read Disk Map Sector from Disk
1973  49D7 FD 36 12 00  	ld (iy+UserTrackNo),0			; set Track Number 0 											;49d7	fd 36 12 00 	. 6 . .
1974  49DB FD 36 11 0F  	ld (iy+UserSectorNo),15			; set Sector Number 15											;49db	fd 36 11 0f 	. 6 . .
1975  49DF CD 27 5B     	call READSECTOR					; Read Disk Map sector from disk								;49df	cd 27 5b 	. ' [
1976  49E2 B7           	or a							; was any Error?												;49e2	b7 	.
1977  49E3 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;49e3	c2 41 42 	. A B
1978  49E6              ; -- copy sector data to Disk Map buffer
1979  49E6 FD 5E 34     	ld e,(iy+MapAddress)			; de - (dst) address of Disk Map buffer							;49e6	fd 5e 34 	. ^ 4
1980  49E9 FD 56 35     	ld d,(iy+MapAddress+1)																			;49e9	fd 56 35 	. V 5
1981  49EC FD 6E 31     	ld l,(iy+DataBuf)				; hl - (src) address of Sector data read from Disk				;49ec	fd 6e 31 	. n 1
1982  49EF FD 66 32     	ld h,(iy+DataBuf+1)																				;49ef	fd 66 32 	. f 2
1983  49F2 01 50 00     	ld bc,80						; bc - 80 bytes to copy											;49f2	01 50 00 	. P .
1984  49F5 ED B0        	ldir							; copy Disk Map data 											;49f5	ed b0 	. .
1985  49F7
1986  49F7              ; -- get all sectors for this file and mark them as unused in Disk Map
1987  49F7              .nextFileSector:
1988  49F7              ; -- read file sector
1989  49F7 FD 7E 16     	ld a,(iy+NextTrackNo)			; a - Track  Number to read										;49f7	fd 7e 16 	. ~ .
1990  49FA B7           	or a							; is it 0? (no more sectors used by file)						;49fa	b7 	.
1991  49FB CA 4F 4A     	jp z,.saveDiskMap				; yes - ;49fb	ca 4f 4a 	. O J
1992  49FE FD 77 12     	ld (iy+UserTrackNo),a			; set as Track Number of sector to read							;49fe	fd 77 12 	. w .
1993  4A01 FD 7E 15     	ld a,(iy+NextSectorNo)			; a - Sector Number												;4a01	fd 7e 15 	. ~ .
1994  4A04 FD 77 11     	ld (iy+UserSectorNo),a			; set as Sector Number of sector to read						;4a04	fd 77 11 	. w .
1995  4A07 CD 27 5B     	call READSECTOR					; Read a sector from disk										;4a07	cd 27 5b 	. ' [
1996  4A0A B7           	or a							; was any Error?												;4a0a	b7 	.
1997  4A0B C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4a0b	c2 41 42 	. A B
1998  4A0E              ; -- read last 2 bytes to get next sector number and track number
1999  4A0E FD 6E 31     	ld l,(iy+DataBuf)				; hl - address of Sector data 									;4a0e	fd 6e 31 	. n 1
2000  4A11 FD 66 32     	ld h,(iy+DataBuf+1)																				;4a11	fd 66 32 	. f 2
2001  4A14 11 7E 00     	ld de,126						; de - offset from begin of sector data buffer					;4a14	11 7e 00 	. ~ .
2002  4A17 19           	add hl,de						; hl - points to next Track Number								;4a17	19 	.
2003  4A18 7E           	ld a,(hl)						; a - track number of next sector								;4a18	7e 	~
2004  4A19 FD 77 16     	ld (iy+NextTrackNo),a			; store as next Track Number									;4a19	fd 77 16 	. w .
2005  4A1C 23           	inc hl							; hl - points to next Sector Number								;4a1c	23 	#
2006  4A1D 7E           	ld a,(hl)						; a - sector number of next sector								;4a1d	7e 	~
2007  4A1E FD 77 15     	ld (iy+NextSectorNo),a			; stor as next Sector Number									;4a1e	fd 77 15 	. w .
2008  4A21
2009  4A21              ; -- get Disk Map address
2010  4A21 FD 6E 34     	ld l,(iy+MapAddress)			; hl - address of Disk Map buffer								;4a21	fd 6e 34 	. n 4
2011  4A24 FD 66 35     	ld h,(iy+MapAddress+1)																			;4a24	fd 66 35 	. f 5
2012  4A27              ; -- calculate byte offset
2013  4A27 FD 7E 12     	ld a,(iy+UserTrackNo)			; a - Track Number of sector for next chunk of file				;4a27	fd 7e 12 	. ~ .
2014  4A2A 3D           	dec a							; a = a -1 (Disk Map covers sectors from track 1)				;4a2a	3d 	=
2015  4A2B CB 27        	sla a							; track * 2 (2 bytes in Map covers 1 track)						;4a2b	cb 27 	. '
2016  4A2D 5F           	ld e,a							; e - offset in Disk Map for Track								;4a2d	5f 	_
2017  4A2E 16 00        	ld d,0							; de - offset in Disk Map for Track								;4a2e	16 00 	. .
2018  4A30 FD 7E 11     	ld a,(iy+UserSectorNo)			; a - Sector number for next chunk of file						;4a30	fd 7e 11 	. ~ .
2019  4A33 FE 08        	cp 8							; set Carry flag if Sector < 8 									;4a33	fe 08 	. .
2020  4A35 3F           	ccf								; invert Carry - will be 1 if Sector >= 8 						;4a35	3f 	?
2021  4A36 ED 5A        	adc hl,de						; hl - address in Disk Map of bitmask with this sector			;4a36	ed 5a 	. Z
2022  4A38              ; -- calculate bit number
2023  4A38 E6 07        	and %0111						; a - bit number for this sector								;4a38	e6 07 	. .
2024  4A3A 3C           	inc a							; preincrement for number of rotates 1..8						;4a3a	3c 	<
2025  4A3B 47           	ld b,a							; b - how many times to rotate bitmask							;4a3b	47 	G
2026  4A3C              ; -- reset bit for this sector (not used)
2027  4A3C 4E           	ld c,(hl)						; c - bitmask with this sector									;4a3c	4e 	N
2028  4A3D CB 01        	rlc c							; pre-rotate left (set Carry from 7th bit)						;4a3d	cb 01 	. .
2029  4A3F              .loop1:
2030  4A3F CB 09        	rrc c							; rotate right bitmask											;4a3f	cb 09 	. .
2031  4A41 10 FC        	djnz .loop1						; keep rotate until bit is at position 0						;4a41	10 fc 	. .
2032  4A43 CB 81        	res 0,c							; clear bit for this sector										;4a43	cb 81 	. .
2033  4A45 47           	ld b,a							; b - number of rotates to do									;4a45	47 	G
2034  4A46 CB 09        	rrc c							; pre-rotate right (set Carry from 0th bit)						;4a46	cb 09 	. .
2035  4A48              .loop2:
2036  4A48 CB 01        	rlc c							; rotate left bitmask											;4a48	cb 01 	. .
2037  4A4A 10 FC        	djnz .loop2						; keep rotate until bit returns to its original position		;4a4a	10 fc 	. .
2038  4A4C 71           	ld (hl),c						; store updated byte to Disk Map								;4a4c	71 	q
2039  4A4D 18 A8        	jr .nextFileSector				; get next Sector of file and mark it as unused ---------------	;4a4d	18 a8 	. .
2040  4A4F
2041  4A4F              .saveDiskMap:
2042  4A4F              ; -- clear Sector Buffer
2043  4A4F FD 6E 31     	ld l,(iy+DataBuf)				; hl - (src) address of Sector Buffer							;4a4f	fd 6e 31 	. n 1
2044  4A52 FD 66 32     	ld h,(iy+DataBuf+1)																				;4a52	fd 66 32 	. f 2
2045  4A55 E5           	push hl							; save hl - address of Sector Buffer							;4a55	e5 	.
2046  4A56 36 00        	ld (hl),0						; set 1st byte to 0												;4a56	36 00 	6 .
2047  4A58 5D           	ld e,l							; copy hl to de													;4a58	5d 	]
2048  4A59 54           	ld d,h							; de - address of Sector Buffer 								;4a59	54 	T
2049  4A5A 13           	inc de							; de - (dst) address of 2db byte in Sector Buffer				;4a5a	13 	.
2050  4A5B 01 7F 00     	ld bc,127						; bc - 125 bytes to clear										;4a5b	01 7f 00 	.  .
2051  4A5E ED B0        	ldir							; clear (copy byte 0) Sector Buffer								;4a5e	ed b0 	. .
2052  4A60              ; -- copy 80 bytes of Disk Map to Sector Buffer
2053  4A60 D1           	pop de							; restore de - (dst) address of Sector Buffer					;4a60	d1 	.
2054  4A61 FD 6E 34     	ld l,(iy+MapAddress)			; hl - (src) address of Disk Map buffer							;4a61	fd 6e 34 	. n 4
2055  4A64 FD 66 35     	ld h,(iy+MapAddress+1)																			;4a64	fd 66 35 	. f 5
2056  4A67 01 50 00     	ld bc,80						; bc - 80 bytes to copy											;4a67	01 50 00 	. P .
2057  4A6A ED B0        	ldir							; copy Disk Map to Sector Buffer								;4a6a	ed b0 	. .
2058  4A6C              ; -- save Disk Map to Disk
2059  4A6C FD 36 12 00  	ld (iy+UserTrackNo),0			; set Track Number 0											;4a6c	fd 36 12 00 	. 6 . .
2060  4A70 FD 36 11 0F  	ld (iy+UserSectorNo),15			; set Sector Number 15											;4a70	fd 36 11 0f 	. 6 . .
2061  4A74 CD A1 59     	call WRITESECTOR				; Write Disk Map to sector on Disk								;4a74	cd a1 59 	. . Y
2062  4A77 B7           	or a							; was any Error?												;4a77	b7 	.
2063  4A78 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4a78	c2 41 42 	. A B
2064  4A7B              ; -- file deleted
2065  4A7B CD 52 5F     	call PowerOff					; Disk power OFF												;4a7b	cd 52 5f 	. R _
2066  4A7E E1           	pop hl							; restore hl - parse point										;4a7e	e1 	.
2067  4A7F C9           	ret								; ----------------- End of Proc -------------------------------	;4a7f	c9 	.
2068  4A80
2069  4A80
2070  4A80
2071  4A80              ;***************************************************************************************************
2072  4A80              ; DOS Command REN
2073  4A80              ; Syntax: REN "oldfilename", "newfilename"
2074  4A80              ; ----------------------------------------
2075  4A80              ; Change name of the file specified by oldfilename to newfilename on Disk.
2076  4A80              ; Both filenames may have no more than 8 characters. File Type stays unchanged.
2077  4A80              ; IN: hl - parse point (just after 'REN' text)
2078  4A80              DCmdREN:
2079  4A80              ; -- expected required name of old file enclosed with double quote chars
2080  4A80 E5           	push hl							; save hl - parse point											;4a80	e5 	.
2081  4A81 CD 78 53     	call ParseFilename				; Verify syntax and copy old filename to DOS Filename Buffer	;4a81	cd 78 53 	. x S
2082  4A84 B7           	or a							; was any Error?												;4a84	b7 	.
2083  4A85 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4a85	c2 41 42 	. A B
2084  4A88              ; -- expected ',' char
2085  4A88 CF           	rst $08							; Assert next char is ','										;4a88	cf 	.
2086  4A89 2C           	defb ','						; next char must be ','											;4a89	2c 	,
2087  4A8A              ; -- expected required name of new file enclosed with double quote chars
2088  4A8A CD 67 53     	call CSI						; parse new filename and copy it to (iy+filename)				;4a8a	cd 67 53 	. g S
2089  4A8D B7           	or a							; was any Error?												;4a8d	b7 	.
2090  4A8E C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4a8e	c2 41 42 	. A B
2091  4A91              ; --
2092  4A91 E1           	pop hl							; restore hl - parse point										;4a91	e1 	.
2093  4A92 E5           	push hl							; save hl - parse point (just after 'REN')						;4a92	e5 	.
2094  4A93 CD 78 53     	call ParseFilename				; hl - parse point just after '"' char							;4a93	cd 78 53 	. x S
2095  4A96 23           	inc hl							; skip comma ',' char											;4a96	23 	#
2096  4A97 E5           	push hl							; save hl - start of new filename text (1st '"' char)			;4a97	e5 	.
2097  4A98
2098  4A98              ; -- turn on Disk Drive and wait 50 ms
2099  4A98 F3           	di								; disable interrupts											;4a98	f3 	.
2100  4A99 CD 41 5F     	call PowerOn					; Disk power ON													;4a99	cd 41 5f 	. A _
2101  4A9C C5           	push bc							; save bc														;4a9c	c5 	.
2102  4A9D 01 32 00     	ld bc,50						; bc - 50 miliseconds to delay									;4a9d	01 32 00 	. 2 .
2103  4AA0 CD BE 5E     	call DELAYMS					; delay 50 ms													;4aa0	cd be 5e 	. . ^
2104  4AA3 C1           	pop bc							; restore bc 													;4aa3	c1 	.
2105  4AA4
2106  4AA4              ; -- check if Disk is not Write-Protected
2107  4AA4 DB 13        	in a,(FLWR_PROTECT)				; a - read Write Protected flag from FDC						;4aa4	db 13 	. .
2108  4AA6 B7           	or a							; is bit 7 set? (write protected)								;4aa6	b7 	.
2109  4AA7 3E 04        	ld a,4							; a - Error 04 - DISK WRITE PROTECTED							;4aa7	3e 04 	> .
2110  4AA9 FA 41 42     	jp m,DOSError					; yes - go to Error handling routine --------------------------	;4aa9	fa 41 42 	. A B
2111  4AAC
2112  4AAC              ; -- find Directory Entry for this file
2113  4AAC CD 13 59     	call FINDFILE					; Search for old filename in directory							;4aac	cd 13 59 	. . Y
2114  4AAF FE 02        	cp 2							; was Error 2 - FILE ALREADY EXISTS	?							;4aaf	fe 02 	. .
2115  4AB1 CA BD 4A     	jp z,.oldFilenameFound			; yes - continue renaming file --------------------------------	;4ab1	ca bd 4a 	. . J
2116  4AB4
2117  4AB4              ; -- other error or No Error
2118  4AB4 B7           	or a							; other error?													;4ab4	b7 	.
2119  4AB5 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4ab5	c2 41 42 	. A B
2120  4AB8
2121  4AB8              ; -- No Error - means there are no requested file on Disk
2122  4AB8 3E 0D        	ld a,13							; a - Error 13 - FILE NOT FOUND									;4ab8	3e 0d 	> .
2123  4ABA C3 41 42     	jp DOSError						; go to Error handling routine --------------------------------	;4aba	c3 41 42 	. A B
2124  4ABD
2125  4ABD              .oldFilenameFound:
2126  4ABD E1           	pop hl							; restore hl - start of new filename text						;4abd	e1 	.
2127  4ABE CD 67 53     	call CSI						; parse new filename and copy it to (iy+filename)				;4abe	cd 67 53 	. g S
2128  4AC1 E3           	ex (sp),hl						; save hl - parse point (after whole command)					;4ac1	e3 	.
2129  4AC2 E5           	push hl							; save hl - parse point (just after 'REN')						;4ac2	e5 	.
2130  4AC3
2131  4AC3              ; -- check if already exists file with new filename in Directory Entry
2132  4AC3 CD 13 59     	call FINDFILE					; Search for new filename in directory							;4ac3	cd 13 59 	. . Y
2133  4AC6 FE 0D        	cp 13							; was Error 13 - FILE NOT FOUND ?								;4ac6	fe 0d 	. .
2134  4AC8 28 04        	jr z,.newFilenameNotFound		; yes - continue renaming 										;4ac8	28 04 	( .
2135  4ACA
2136  4ACA              ; -- other error or No Error
2137  4ACA B7           	or a							; any other Error?												;4aca	b7 	.
2138  4ACB C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4acb	c2 41 42 	. A B
2139  4ACE
2140  4ACE              .newFilenameNotFound:
2141  4ACE              ; -- get sector wit directory Entry for file to rename
2142  4ACE E1           	pop hl							; restore hl - parse point (just after 'REN')					;4ace	e1 	.
2143  4ACF CD 78 53     	call ParseFilename				; copy old filename to DOS Filename Buffer						;4acf	cd 78 53 	. x S
2144  4AD2 23           	inc hl							; skip ',' char													;4ad2	23 	#
2145  4AD3 E5           	push hl							; save hl - start of new filename								;4ad3	e5 	.
2146  4AD4 CD 13 59     	call FINDFILE					; find Directory Entry for old filename							;4ad4	cd 13 59 	. . Y
2147  4AD7 FE 02        	cp 2							; was Error 2 - FILE ALREADY EXISTS ?							;4ad7	fe 02 	. .
2148  4AD9 C2 41 42     	jp nz,DOSError					; no - go to Error handling routine ---------------------------	;4ad9	c2 41 42 	. A B
2149  4ADC
2150  4ADC              ; -- save hl and de registers (end of filename in DOS buffer and Directory Entry buffer)
2151  4ADC C1           	pop bc							; bc - start of new filename									;4adc	c1 	.
2152  4ADD E5           	push hl							; save hl - end of old filename in (iy+filename)				;4add	e5 	.
2153  4ADE D5           	push de							; save de - end of old filename in Dir Entry Buffer				;4ade	d5 	.
2154  4ADF              ; -- copy given new filename to DOS buffer
2155  4ADF 69           	ld l,c							; copy bc to hl													;4adf	69 	i
2156  4AE0 60           	ld h,b							; hl - start of new filename									;4ae0	60 	`
2157  4AE1 CD 67 53     	call CSI						; parse new filename and copy it to (iy+filename)				;4ae1	cd 67 53 	. g S
2158  4AE4              ; -- restore hl and de pointers and move them to begin of filename in DOS buffer and Dir Entry
2159  4AE4 D1           	pop de							; restore de - end of old filename in Dir Entry Buffer			;4ae4	d1 	.
2160  4AE5 E1           	pop hl							; restore hl - end of now new filename in (iy+filename)			;4ae5	e1 	.
2161  4AE6 01 F8 FF     	ld bc,-8						; bc - 8 bytes of name to move back pointer						;4ae6	01 f8 ff 	. . .
2162  4AE9 09           	add hl,bc						; hl - start of new filename in DOS Buffer						;4ae9	09 	.
2163  4AEA EB           	ex de,hl						; de - start of new filename in DOS buffer						;4aea	eb 	.
2164  4AEB 09           	add hl,bc						; hl - start of old filename in Dir Entry Buffer				;4aeb	09 	.
2165  4AEC
2166  4AEC              ; -- fill Directory Entry with new file type and name
2167  4AEC 2B           	dec hl							; move back hl													;4aec	2b 	+
2168  4AED 2B           	dec hl							; hl - points to File Type char in Dir Entry					;4aed	2b 	+
2169  4AEE              ; -- copy FileType
2170  4AEE FD 7E 0A     	ld a,(iy+FileType+1)			; a - new file Type												;4aee	fd 7e 0a 	. ~ .
2171  4AF1 77           	ld (hl),a						; store in Directory Entry										;4af1	77 	w
2172  4AF2 23           	inc hl							; hl - points to separator char in Dir Entry					;4af2	23 	#
2173  4AF3              ; -- copy separator
2174  4AF3 36 3A        	ld (hl),':'						; store separator char ':'										;4af3	36 3a 	6 :
2175  4AF5 23           	inc hl							; hl - start of filename in Dir Entry							;4af5	23 	#
2176  4AF6              ; -- copy 8 chars of filename
2177  4AF6 EB           	ex de,hl						; de - (dst) Dir entry, hl - (src) DOS buffer					;4af6	eb 	.
2178  4AF7 01 08 00     	ld bc,8							; bc - 8 chars to copy											;4af7	01 08 00 	. . .
2179  4AFA ED B0        	ldir							; copy new filename to Directory Entry							;4afa	ed b0 	. .
2180  4AFC CD A1 59     	call WRITESECTOR				; Write sector with Directory to disk							;4afc	cd a1 59 	. . Y
2181  4AFF B7           	or a							; was any Error?												;4aff	b7 	.
2182  4B00 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine --------------------------	;4b00	c2 41 42 	. A B
2183  4B03              ; -- no error - turn off DIsk and return
2184  4B03 CD 52 5F     	call PowerOff					; Disk power OFF												;4b03	cd 52 5f 	. R _
2185  4B06 E1           	pop hl							; restore hl - parse point (after whole command)				;4b06	e1 	.
2186  4B07 C9           	ret								; ------------------- End of Proc -----------------------------	;4b07	c9 	.
2187  4B08
2188  4B08
2189  4B08
2190  4B08
2191  4B08              ;***************************************************************************************************
2192  4B08              ; DOS Command INIT
2193  4B08              ; Syntax: INIT
2194  4B08              ; ----------------
2195  4B08              ; Initialize the disk (format)
2196  4B08              ; Used alse from DOS jump Table
2197  4B08              ; IN: IY+DK - selected Drive
2198  4B08              ; OUT: none
2199  4B08              ;***************************************************************************************************
2200  4B08              DCmdINIT:
2201  4B08              DiskInit:
2202  4B08              ; -- turn on disk drive
2203  4B08 F3           	di								; disable interrupts											;4b08	f3 	.
2204  4B09 CD 41 5F     	call PowerOn					; Disk power ON													;4b09	cd 41 5f 	. A _
2205  4B0C C5           	push bc							; save bc 														;4b0c	c5 	.
2206  4B0D
2207  4B0D              ; -- wait 1 sek to have Disk Drive ready
2208  4B0D 01 E8 03     	ld bc,1000						; 1000 ms delay													;4b0d	01 e8 03 	. . .
2209  4B10 CD BE 5E     	call DELAYMS					; wait 1000 ms 		 											;4b10	cd be 5e 	. . ^
2210  4B13 C1           	pop bc							; restore bc													;4b13	c1 	.
2211  4B14
2212  4B14              ; -- check if disk is write protected and raise Error 04 if it's the case
2213  4B14 DB 13        	in a,(FLWR_PROTECT)				; read Write Protected register									;4b14	db 13 	. .
2214  4B16 B7           	or a							; check if bit 7 is set 										;4b16	b7 	.
2215  4B17 3E 04        	ld a,04							; Error Code 4 - "?DISK WRITE PROTECTED"						;4b17	3e 04 	> .
2216  4B19 FA 41 42     	jp m,DOSError					; yes - jump to Error handling routine with a = Error Code		;4b19	fa 41 42 	. A B
2217  4B1C
2218  4B1C              ; -- prepeare sector data to copy on disk
2219  4B1C E5           	push hl							; save hl 														;4b1c	e5 	.
2220  4B1D FD E5        	push iy							; move iy (DOS base) to hl										;4b1d	fd e5 	. .
2221  4B1F E1           	pop hl							; hl - DOS base address											;4b1f	e1 	.
2222  4B20 11 4D 00     	ld de,SectorBuffer				; offset to Sector Buffer										;4b20	11 4d 00 	. M .
2223  4B23 19           	add hl,de						; hl - address of Sector Buffer									;4b23	19 	.
2224  4B24 FD 36 12 00  	ld (iy+UserTrackNo),0			; set Track Number 0											;4b24	fd 36 12 00 	. 6 . .
2225  4B28 FD 36 11 00  	ld (iy+UserSectorNo),0			; set Sector Number 0											;4b28	fd 36 11 00 	. 6 . .
2226  4B2C FD 75 0E     	ld (iy+CopyBuf),l				; set Sector buffer as address to copy from						;4b2c	fd 75 0e 	. u .
2227  4B2F FD 74 0F     	ld (iy+CopyBuf+1),h																				;4b2f	fd 74 0f 	. t .
2228  4B32
2229  4B32              ; -- copy Template of sector header into Sector Buffer
2230  4B32 EB           	ex de,hl						; dst - de - address of Sector Buffer							;4b32	eb 	.
2231  4B33 21 4F 4D     	ld hl,SecHeaderInitData			; src - hl - sector init data template							;4b33	21 4f 4d 	! O M
2232  4B36 01 18 00     	ld bc,24						; Sector Header has 24 bytes to copy							;4b36	01 18 00 	. . .
2233  4B39 ED B0        	ldir							; copy 24 bytes to Sector Buffer								;4b39	ed b0 	. .
2234  4B3B
2235  4B3B              ; clear 128 bytes (sector data) + 2 bytes (checksum)
2236  4B3B 62           	ld h,d						; src - hl - 1st byte of Sector Data Area							;4b3b	62 	b
2237  4B3C 6B           	ld l,e																							;4b3c	6b 	k
2238  4B3D 36 00        	ld (hl),0						; clear 1st byte 												;4b3d	36 00 	6 .
2239  4B3F 13           	inc de							; dst - de - naxt byte in buffer								;4b3f	13 	.
2240  4B40 01 82 00     	ld bc,128+2						; 130 bytes to clear (data+checksum)							;4b40	01 82 00 	. . .
2241  4B43 ED B0        	ldir							; clear 130 bytes in buffer										;4b43	ed b0 	. .
2242  4B45
2243  4B45              ; -- move drive Head to track 0
2244  4B45 FD 36 38 11  	ld (iy+StepPhase),%00010001		; set Step Motor to 0001-0001 									;4b45	fd 36 38 11 	. 6 8 .
2245  4B49 06 28        	ld b,40							; max 40 tracks to StepOut										;4b49	06 28 	. (
2246  4B4B CD 01 5F     	call STEPOUT					; execute Track Step Out 										;4b4b	cd 01 5f 	. . _
2247  4B4E              ; -- wait 400ms
2248  4B4E C5           	push bc							; save bc														;4b4e	c5 	.
2249  4B4F 01 90 01     	ld bc,400						; 400 ms delay													;4b4f	01 90 01 	. . .
2250  4B52 CD BE 5E     	call DELAYMS					; wait 400 ms Delay												;4b52	cd be 5e 	. . ^
2251  4B55 C1           	pop bc							; restore bc													;4b55	c1 	.
2252  4B56
2253  4B56              ; -- set registers hl,de,bc to adresses in buffer for Trk#,Sect#,TSCRC
2254  4B56 FD 6E 0E     	ld l,(iy+CopyBuf)				; hl - address of Copy buffer									;4b56	fd 6e 0e 	. n .
2255  4B59 FD 66 0F     	ld h,(iy+CopyBuf+1)																				;4b59	fd 66 0f 	. f .
2256  4B5C 11 0B 00     	ld de,11						; offset to byte with Track number value						;4b5c	11 0b 00 	. . .
2257  4B5F 19           	add hl,de						; hl - address of Track Number in Sector Buffer					;4b5f	19 	.
2258  4B60 54           	ld d,h							; de = hl														;4b60	54 	T
2259  4B61 5D           	ld e,l							; de - address of Track Number in Sector Buffer					;4b61	5d 	]
2260  4B62 13           	inc de							; de - address of Sector Number in Sector Buffer				;4b62	13 	.
2261  4B63 42           	ld b,d							; bc = de														;4b63	42 	B
2262  4B64 4B           	ld c,e							; bc - address of Sector Number in Sector Buffer				;4b64	4b 	K
2263  4B65 03           	inc bc							; bc - address of Track+Sector CRC in Sector Buffer				;4b65	03 	.
2264  4B66 D9           	exx								; save bc,de,hl into alt registers								;4b66	d9 	.
2265  4B67
2266  4B67
2267  4B67              DI_WriteTrack:
2268  4B67              ; -- wait 100 ms delay
2269  4B67 C5           	push bc							; save bc 														;4b67	c5 	.
2270  4B68 01 64 00     	ld bc,100						; 100 ms Delay													;4b68	01 64 00 	. d .
2271  4B6B CD BE 5E     	call DELAYMS					; wait 100 ms Delay 											;4b6b	cd be 5e 	. . ^
2272  4B6E C1           	pop bc							; restore bc													;4b6e	c1 	.
2273  4B6F
2274  4B6F              ; -- send Write Request to drive
2275  4B6F FD 7E 33     	ld a,(iy+FLCtrlShadow)			; a - value last sent to FLCtrl									;4b6f	fd 7e 33 	. ~ 3
2276  4B72 CB B7        	res 6,a							; clear bit 6 - Write Request (active LOW)						;4b72	cb b7 	. .
2277  4B74 FD 77 33     	ld (iy+FLCtrlShadow),a			; store FLCtrl to shadow register								;4b74	fd 77 33 	. w 3
2278  4B77 D3 10        	out (FLCTRL),a					; set Flopy Control byte										;4b77	d3 10 	. .
2279  4B79
2280  4B79              ; -- wait 100 ms delay
2281  4B79 C5           	push bc							; save bc 														;4b79	c5 	.
2282  4B7A 01 64 00     	ld bc,100						; 100 ms Delay													;4b7a	01 64 00 	. d .
2283  4B7D CD BE 5E     	call DELAYMS					; wait 100 ms Delay 											;4b7d	cd be 5e 	. . ^
2284  4B80 C1           	pop bc							; restore bc													;4b80	c1 	.
2285  4B81              ; --
2286  4B81 DD 21 67 4D  	ld ix,SectorsSequence			; ix - table of Sectors on Track interlave sequence				;4b81	dd 21 67 4d 	. ! g M
2287  4B85
2288  4B85              DI_WriteSector:
2289  4B85 FD 6E 0E     	ld l,(iy+CopyBuf)				; hl - address of Copy buffer 									;4b85	fd 6e 0e 	. n .
2290  4B88 FD 66 0F     	ld h,(iy+CopyBuf+1)																				;4b88	fd 66 0f 	. f .
2291  4B8B FD 56 33     	ld d,(iy+FLCtrlShadow)			; d - value last sent to FLCtrl									;4b8b	fd 56 33 	. V 3
2292  4B8E
2293  4B8E              ; -- write copy buffer to drive bit by bit
2294  4B8E 06 9A        	ld b,24+128+2					; 154 bytes to send per sector									;4b8e	06 9a 	. .
2295  4B90
2296  4B90              ; --------------------------------------------------------------------------------------------------
2297  4B90              ; IN: b - number of bytes to write
2298  4B90              ;     d - backed up value sent to FDC Control Register
2299  4B90              ;     hl - pointer to current byte in Copy Buffer
2300  4B90              ;     Initial Write Data Bit = 1
2301  4B90              DI_WriteByte:
2302  4B90              ; -- send 1 bit at the time
2303  4B90 4E           	ld c,(hl)						; c - byte from Copy buffer to send 							;4b90	4e 	N
2304  4B91
2305  4B91              ; -- write bit 7 of data byte
2306  4B91 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;4b91	3e 20 	>
2307  4B93 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;4b93	aa 	.
2308  4B94              ; -- set CY flag to bit 7 of data byte
2309  4B94 CB 11        	rl c							; Carry flag = bit 7 of data byte - is it 1?					;4b94	cb 11 	. .
2310  4B96 D2 A4 4B     	jp nc,.writeBit7_0				; no - write cell with data bit = 0								;4b96	d2 a4 4b 	. . K
2311  4B99              .writeBit7_1:
2312  4B99              ; -- write cell with bit=1 - 0-1 or 1-0
2313  4B99 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4b99	d3 10 	. .
2314  4B9B EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;4b9b	ee 20 	.
2315  4B9D 57           	ld d,a							; save as last value sent to FLCTRL								;4b9d	57 	W
2316  4B9E 2B           	dec hl							; delay 6 cycles												;4b9e	2b 	+
2317  4B9F D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4b9f	d3 10 	. .
2318  4BA1 C3 AF 4B     	jp .contBit7					; continue with next bit 6										;4ba1	c3 af 4b 	. . K
2319  4BA4              .writeBit7_0:
2320  4BA4              ; -- write cell with bit=0 - 0-0 or 1-1
2321  4BA4 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4ba4	d3 10 	. .
2322  4BA6 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;4ba6	ee 00 	. .
2323  4BA8 57           	ld d,a							; save as last value sent to FLCTRL								;4ba8	57 	W
2324  4BA9 2B           	dec hl							; delay 6 cycles												;4ba9	2b 	+
2325  4BAA D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;4baa	d3 10 	. .
2326  4BAC C3 AF 4B     	jp .contBit7					; continue with next bit 6										;4bac	c3 af 4b 	. . K
2327  4BAF              .contBit7:
2328  4BAF 23           	inc hl							; delay 6 cycles												;4baf	23 	#
2329  4BB0 C3 B3 4B     	jp .delayBit7					; delay 10 cycles												;4bb0	c3 b3 4b 	. . K
2330  4BB3              .delayBit7:
2331  4BB3 C3 B6 4B     	jp .writeBit6Cell				; delay 10 cycles												;4bb3	c3 b6 4b 	. . K
2332  4BB6
2333  4BB6              .writeBit6Cell:
2334  4BB6              ; -- write bit 6 of data byte
2335  4BB6 DB 12        	in a,(FLPOOL)					; send clock to drive controller								;4bb6	db 12 	. .
2336  4BB8 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;4bb8	3e 20 	>
2337  4BBA AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;4bba	aa 	.
2338  4BBB              ; -- set CY flag to bit 6 of data byte
2339  4BBB CB 11        	rl c							; Carry flag = bit 6 of data byte - is it 1?					;4bbb	cb 11 	. .
2340  4BBD D2 CB 4B     	jp nc,.writeBit6_0				; no - write cell with data bit = 0								;4bbd	d2 cb 4b 	. . K
2341  4BC0              .writeBit6_1:
2342  4BC0              ; -- write cell with bit=1 - 0-1 or 1-0
2343  4BC0 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4bc0	d3 10 	. .
2344  4BC2 EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;4bc2	ee 20 	.
2345  4BC4 57           	ld d,a							; save as last value sent to FLCTRL								;4bc4	57 	W
2346  4BC5 2B           	dec hl							; delay 6 cycles												;4bc5	2b 	+
2347  4BC6 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4bc6	d3 10 	. .
2348  4BC8 C3 D6 4B     	jp .contBit6					; continue with next bit 5										;4bc8	c3 d6 4b 	. . K
2349  4BCB              .writeBit6_0:
2350  4BCB              ; -- write cell with bit=0 - 0-0 or 1-1
2351  4BCB D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4bcb	d3 10 	. .
2352  4BCD EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;4bcd	ee 00 	. .
2353  4BCF 57           	ld d,a							; save as last value sent to FLCTRL								;4bcf	57 	W
2354  4BD0 2B           	dec hl							; delay 6 cycles												;4bd0	2b 	+
2355  4BD1 D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;4bd1	d3 10 	. .
2356  4BD3 C3 D6 4B     	jp .contBit6					; continue with next bit 5										;4bd3	c3 d6 4b 	. . K
2357  4BD6              .contBit6:
2358  4BD6 23           	inc hl							; delay 6 cycles												;4bd6	23 	#
2359  4BD7 C3 DA 4B     	jp .delayBit6					; delay 10 cycles												;4bd7	c3 da 4b 	. . K
2360  4BDA              .delayBit6:
2361  4BDA C3 DD 4B     	jp .writeBit5Cell				; delay 10 cycles												;4bda	c3 dd 4b 	. . K
2362  4BDD              .writeBit5Cell:
2363  4BDD              ; -- write bit 5 of data byte
2364  4BDD DB 12        	in a,(FLPOOL)					; send clock to drive controller								;4bdd	db 12 	. .
2365  4BDF 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;4bdf	3e 20 	>
2366  4BE1 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;4be1	aa 	.
2367  4BE2              ; -- set CY flag to bit 5 of data byte
2368  4BE2 CB 11        	rl c							; Carry flag = bit 5 of data byte - is it 1?					;4be2	cb 11 	. .
2369  4BE4 D2 F2 4B     	jp nc,.writeBit5_0				; no - write cell with data bit = 0								;4be4	d2 f2 4b 	. . K
2370  4BE7              .writeBit5_1:
2371  4BE7              ; -- write cell with bit=1 - 0-1 or 1-0
2372  4BE7 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4be7	d3 10 	. .
2373  4BE9 EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;4be9	ee 20 	.
2374  4BEB 57           	ld d,a							; save as last value sent to FLCTRL								;4beb	57 	W
2375  4BEC 2B           	dec hl							; delay 6 cycles												;4bec	2b 	+
2376  4BED D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4bed	d3 10 	. .
2377  4BEF C3 FD 4B     	jp .contBit5					; continue with next bit 4										;4bef	c3 fd 4b 	. . K
2378  4BF2              .writeBit5_0:
2379  4BF2              ; -- write cell with bit=0 - 0-0 or 1-1
2380  4BF2 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4bf2	d3 10 	. .
2381  4BF4 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;4bf4	ee 00 	. .
2382  4BF6 57           	ld d,a							; save as last value sent to FLCTRL								;4bf6	57 	W
2383  4BF7 2B           	dec hl							; delay 6 cycles												;4bf7	2b 	+
2384  4BF8 D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;4bf8	d3 10 	. .
2385  4BFA C3 FD 4B     	jp .contBit5					; continue with next bit 4										;4bfa	c3 fd 4b 	. . K
2386  4BFD              .contBit5:
2387  4BFD 23           	inc hl							; delay 6 cycles												;4bfd	23 	#
2388  4BFE C3 01 4C     	jp .delayBit5					; delay 10 cycles												;4bfe	c3 01 4c 	. . L
2389  4C01              .delayBit5:
2390  4C01 C3 04 4C     	jp .writeBit4Cell				; delay 10 cycles												;4c01	c3 04 4c 	. . L
2391  4C04
2392  4C04              .writeBit4Cell:
2393  4C04              ; -- write bit 4 of data byte
2394  4C04 DB 12        	in a,(FLPOOL)					; send clock to drive controller								;4c04	db 12 	. .
2395  4C06 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;4c06	3e 20 	>
2396  4C08 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;4c08	aa 	.
2397  4C09              ; -- set CY flag to bit 4 of data byte
2398  4C09 CB 11        	rl c							; Carry flag = bit 4 of data byte - is it 1?					;4c09	cb 11 	. .
2399  4C0B D2 19 4C     	jp nc,.writeBit4_0				; no - write cell with data bit = 0								;4c0b	d2 19 4c 	. . L
2400  4C0E              .writeBit4_1:
2401  4C0E              ; -- write cell with bit=1 - 0-1 or 1-0
2402  4C0E D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c0e	d3 10 	. .
2403  4C10 EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;4c10	ee 20 	.
2404  4C12 57           	ld d,a							; save as last value sent to FLCTRL								;4c12	57 	W
2405  4C13 2B           	dec hl							; delay 6 cycles												;4c13	2b 	+
2406  4C14 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c14	d3 10 	. .
2407  4C16 C3 24 4C     	jp .contBit4					; continue with next bit 3										;4c16	c3 24 4c 	. $ L
2408  4C19              .writeBit4_0:
2409  4C19              ; -- write cell with bit=0 - 0-0 or 1-1
2410  4C19 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c19	d3 10 	. .
2411  4C1B EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;4c1b	ee 00 	. .
2412  4C1D 57           	ld d,a							; save as last value sent to FLCTRL									;4c1d	57 	W
2413  4C1E 2B           	dec hl							; delay 6 cycles												;4c1e	2b 	+
2414  4C1F D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;4c1f	d3 10 	. .
2415  4C21 C3 24 4C     	jp .contBit4					; continue with next bit 3										;4c21	c3 24 4c 	. $ L
2416  4C24              .contBit4:
2417  4C24 23           	inc hl							; delay 6 cycles												;4c24	23 	#
2418  4C25 C3 28 4C     	jp .delayBit4					; delay 10 cycles												;4c25	c3 28 4c 	. ( L
2419  4C28              .delayBit4:
2420  4C28 C3 2B 4C     	jp .writeBit3Cell				; delay 10 cycles												;4c28	c3 2b 4c 	. + L
2421  4C2B
2422  4C2B              .writeBit3Cell:
2423  4C2B              ; -- write bit 3 of data byte
2424  4C2B DB 12        	in a,(FLPOOL)					; send clock to drive controller								;4c2b	db 12 	. .
2425  4C2D 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;4c2d	3e 20 	>
2426  4C2F AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;4c2f	aa 	.
2427  4C30              ; -- set CY flag to bit 3 of data byte
2428  4C30 CB 11        	rl c							; Carry flag = bit 3 of data byte - is it 1?					;4c30	cb 11 	. .
2429  4C32 D2 40 4C     	jp nc,.writeBit3_0				; no - write cell with data bit = 0								;4c32	d2 40 4c 	. @ L
2430  4C35              .writeBit3_1:
2431  4C35              ; -- write cell with bit=1 - 0-1 or 1-0
2432  4C35 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c35	d3 10 	. .
2433  4C37 EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;4c37	ee 20 	.
2434  4C39 57           	ld d,a							; save as last value sent to FLCTRL								;4c39	57 	W
2435  4C3A 2B           	dec hl							; delay 6 cycles												;4c3a	2b 	+
2436  4C3B D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c3b	d3 10 	. .
2437  4C3D C3 4B 4C     	jp .contBit3					; continue with next bit 2										;4c3d	c3 4b 4c 	. K L
2438  4C40              .writeBit3_0:
2439  4C40              ; -- write cell with bit=0 - 0-0 or 1-1
2440  4C40 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c40	d3 10 	. .
2441  4C42 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;4c42	ee 00 	. .
2442  4C44 57           	ld d,a							; save as last value sent to FLCTRL								;4c44	57 	W
2443  4C45 2B           	dec hl							; delay 6 cycles												;4c45	2b 	+
2444  4C46 D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;4c46	d3 10 	. .
2445  4C48 C3 4B 4C     	jp .contBit3					; continue with next bit 2										;4c48	c3 4b 4c 	. K L
2446  4C4B              .contBit3:
2447  4C4B 23           	inc hl							; delay 6 cycles												;4c4b	23 	#
2448  4C4C C3 4F 4C     	jp .delayBit3					; delay 10 cycles												;4c4c	c3 4f 4c 	. O L
2449  4C4F              .delayBit3:
2450  4C4F C3 52 4C     	jp .writeBit2Cell				; delay 10 cycles												;4c4f	c3 52 4c 	. R L
2451  4C52
2452  4C52              .writeBit2Cell:
2453  4C52              ; -- write bit 2 of data byte
2454  4C52 DB 12        	in a,(FLPOOL)					; send clock to drive controller								;4c52	db 12 	. .
2455  4C54 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;4c54	3e 20 	>
2456  4C56 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;4c56	aa 	.
2457  4C57              ; -- set CY flag to bit 2 of data byte
2458  4C57 CB 11        	rl c							; Carry flag = bit 2 of data byte - is it 1?					;4c57	cb 11 	. .
2459  4C59 D2 67 4C     	jp nc,.writeBit2_0				; no - write cell with data bit = 0								;4c59	d2 67 4c 	. g L
2460  4C5C              .writeBit2_1:
2461  4C5C              ; -- write cell with bit=1 - 0-1 or 1-0
2462  4C5C D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c5c	d3 10 	. .
2463  4C5E EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;4c5e	ee 20 	.
2464  4C60 57           	ld d,a							; save as last value sent to FLCTRL								;4c60	57 	W
2465  4C61 2B           	dec hl							; delay 6 cycles												;4c61	2b 	+
2466  4C62 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c62	d3 10 	. .
2467  4C64 C3 72 4C     	jp .contBit2					; continue with next bit 1										;4c64	c3 72 4c 	. r L
2468  4C67              .writeBit2_0:
2469  4C67              ; -- write cell with bit=0 - 0-0 or 1-1
2470  4C67 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c67	d3 10 	. .
2471  4C69 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;4c69	ee 00 	. .
2472  4C6B 57           	ld d,a							; save as last value sent to FLCTRL								;4c6b	57 	W
2473  4C6C 2B           	dec hl							; delay 6 cycles												;4c6c	2b 	+
2474  4C6D D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;4c6d	d3 10 	. .
2475  4C6F C3 72 4C     	jp .contBit2					; continue with next bit 1										;4c6f	c3 72 4c 	. r L
2476  4C72              .contBit2:
2477  4C72 23           	inc hl							; delay 6 cycles												;4c72	23 	#
2478  4C73 C3 76 4C     	jp .delayBit2					; delay 10 cycles												;4c73	c3 76 4c 	. v L
2479  4C76              .delayBit2:
2480  4C76 C3 79 4C     	jp .writeBit1Cell				; continue 														;4c76	c3 79 4c 	. y L
2481  4C79
2482  4C79              .writeBit1Cell:
2483  4C79              ; -- write bit 1 of data byte
2484  4C79 DB 12        	in a,(FLPOOL)					; send clock to drive controller								;4c79	db 12 	. .
2485  4C7B 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;4c7b	3e 20 	>
2486  4C7D AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;4c7d	aa 	.
2487  4C7E              ; -- set CY flag to bit 1 of data byte
2488  4C7E CB 11        	rl c							; Carry flag = bit 1 of data byte - is it 1?					;4c7e	cb 11 	. .
2489  4C80 D2 8E 4C     	jp nc,.writeBit1_0				; no - write cell with data bit = 0								;4c80	d2 8e 4c 	. . L
2490  4C83              .writeBit1_1:
2491  4C83              ; -- write cell with bit=1 - 0-1 or 1-0
2492  4C83 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c83	d3 10 	. .
2493  4C85 EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;4c85	ee 20 	.
2494  4C87 57           	ld d,a							; save as last value sent to FLCTRL								;4c87	57 	W
2495  4C88 2B           	dec hl							; delay 6 cycles												;4c88	2b 	+
2496  4C89 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c89	d3 10 	. .
2497  4C8B C3 99 4C     	jp .contBit1					; continue with next bit 0										;4c8b	c3 99 4c 	. . L
2498  4C8E              .writeBit1_0:
2499  4C8E              ; -- write cell with bit=0 - 0-0 or 1-1
2500  4C8E D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4c8e	d3 10 	. .
2501  4C90 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;4c90	ee 00 	. .
2502  4C92 57           	ld d,a							; save as last value sent to FLCTRL								;4c92	57 	W
2503  4C93 2B           	dec hl							; delay 6 cycles												;4c93	2b 	+
2504  4C94 D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;4c94	d3 10 	. .
2505  4C96 C3 99 4C     	jp .contBit1					; continue with next bit 0										;4c96	c3 99 4c 	. . L
2506  4C99              .contBit1:
2507  4C99 23           	inc hl							; delay 6 cycles												;4c99	23 	#
2508  4C9A C3 9D 4C     	jp .delayBit1					; delay 10 cycles												;4c9a	c3 9d 4c 	. . L
2509  4C9D              .delayBit1:
2510  4C9D C3 A0 4C     	jp .writeBit0Cell				; delay 10 cycles												;4c9d	c3 a0 4c 	. . L
2511  4CA0
2512  4CA0              .writeBit0Cell:
2513  4CA0              ; -- write bit 0 of data byte
2514  4CA0 DB 12        	in a,(FLPOOL)					; send clock to drive controller								;4ca0	db 12 	. .
2515  4CA2 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;4ca2	3e 20 	>
2516  4CA4 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;4ca4	aa 	.
2517  4CA5              ; -- set CY flag to bit 0 of data byte
2518  4CA5 CB 11        	rl c							; Carry flag = bit 0 of data byte - is it 1?					;4ca5	cb 11 	. .
2519  4CA7 D2 B5 4C     	jp nc,.writeBit0_0				; no - write cell with data bit = 0								;4ca7	d2 b5 4c 	. . L
2520  4CAA              .writeBit0_1:
2521  4CAA              ; -- write cell with bit=1 - 0-1 or 1-0
2522  4CAA D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4caa	d3 10 	. .
2523  4CAC EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;4cac	ee 20 	.
2524  4CAE 57           	ld d,a							; save as last value sent to FLCTRL								;4cae	57 	W
2525  4CAF 2B           	dec hl							; delay 6 cycles												;4caf	2b 	+
2526  4CB0 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4cb0	d3 10 	. .
2527  4CB2 C3 C0 4C     	jp .nextByte					; continue with next byte										;4cb2	c3 c0 4c 	. . L
2528  4CB5              .writeBit0_0:
2529  4CB5              ; -- write cell with bit=0 - 0-0 or 1-1
2530  4CB5 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;4cb5	d3 10 	. .
2531  4CB7 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;4cb7	ee 00 	. .
2532  4CB9 57           	ld d,a							; save as last value sent to FLCTRL								;4cb9	57 	W
2533  4CBA 2B           	dec hl							; delay 6 cycles												;4cba	2b 	+
2534  4CBB D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;4cbb	d3 10 	. .
2535  4CBD C3 C0 4C     	jp .nextByte					; continue with next byte										;4cbd	c3 c0 4c 	. . L
2536  4CC0
2537  4CC0              .nextByte:
2538  4CC0 23           	inc hl							; hl was decremented previously									;4cc0	23 	#
2539  4CC1 23           	inc hl							; hl - address of next byte in buffer							;4cc1	23 	#
2540  4CC2 00           	nop								; delay 4 cycles												;4cc2	00 	.
2541  4CC3 05           	dec b							; decrement bytes-to-send counter								;4cc3	05 	.
2542  4CC4 C2 90 4B     	jp nz,DI_WriteByte			; continue to write all 154 bytes do Disk						;4cc4	c2 90 4b 	. . K
2543  4CC7
2544  4CC7
2545  4CC7              ; -- update FLCtrl shadow
2546  4CC7 FD 72 33     	ld (iy+FLCtrlShadow),d			; store value last sent to FLCtrl								;4cc7	fd 72 33 	. r 3
2547  4CCA
2548  4CCA              ; -- update next Sector Number and calculate checksum
2549  4CCA D9           	exx								; restore hl,de,bc -> Trk#, Sect#, TSCRC						;4cca	d9 	.
2550  4CCB DD 7E 01     	ld a,(ix+1)						; a - next Sector Number										;4ccb	dd 7e 01 	. ~ .
2551  4CCE DD 23        	inc ix							; increment ix ready for next round								;4cce	dd 23 	. #
2552  4CD0 12           	ld (de),a						; set Sector Number	to next value from inteleave sequence		;4cd0	12 	.
2553  4CD1 86           	add a,(hl)						; add Track number 												;4cd1	86 	.
2554  4CD2 02           	ld (bc),a						; set as checksum value											;4cd2	02 	.
2555  4CD3 1A           	ld a,(de)						; a - sector number to check									;4cd3	1a 	.
2556  4CD4 D9           	exx								; exchange hl,de,bc with alt registers							;4cd4	d9 	.
2557  4CD5 FE FF        	cp $ff							; check if all sectors written for this track 					;4cd5	fe ff 	. .
2558  4CD7 C2 85 4B     	jp nz,DI_WriteSector			; no - write next Sector										;4cd7	c2 85 4b 	. . K
2559  4CDA
2560  4CDA              ; -- next Track
2561  4CDA D9           	exx								; restore hl,de,bc -> Trk#, Sect#, TSCRC						;4cda	d9 	.
2562  4CDB AF           	xor a							; a - sector number = 0											;4cdb	af 	.
2563  4CDC 12           	ld (de),a						; set Sector Number to 0										;4cdc	12 	.
2564  4CDD 7E           	ld a,(hl)						; a - current Track number										;4cdd	7e 	~
2565  4CDE 3C           	inc a							; increment track												;4cde	3c 	<
2566  4CDF 77           	ld (hl),a						; set new track number											;4cdf	77 	w
2567  4CE0 02           	ld (bc),a						; set as checksum (valid because Sector Number = 0)				;4ce0	02 	.
2568  4CE1 D9           	exx								; exchange hl,de,bc with alt registers							;4ce1	d9 	.
2569  4CE2 FE 28        	cp 40							; check if all 40 tracks written								;4ce2	fe 28 	. (
2570  4CE4 CA F9 4C     	jp z,DI_VerifyDisk				; yes - verify written disk										;4ce4	ca f9 4c 	. . L
2571  4CE7
2572  4CE7              ; -- turn off Write Request
2573  4CE7 FD 7E 33     	ld a,(iy+FLCtrlShadow)			; a - FLCtrl value from shadow register							;4ce7	fd 7e 33 	. ~ 3
2574  4CEA F6 40        	or FL_WRITE_REQ					; turn off Write Request										;4cea	f6 40 	. @
2575  4CEC FD 77 33     	ld (iy+FLCtrlShadow),a			; store FLCtrl to shadow register								;4cec	fd 77 33 	. w 3
2576  4CEF D3 10        	out (FLCTRL),a					; set Flopy Control byte										;4cef	d3 10 	. .
2577  4CF1
2578  4CF1              ; -- advance to next track
2579  4CF1 06 01        	ld b,1							; 1 track to step in											;4cf1	06 01 	. .
2580  4CF3 CD CE 5E     	call STEPIN						; move Read/Write Head in drive									;4cf3	cd ce 5e 	. . ^
2581  4CF6 C3 67 4B     	jp DI_WriteTrack				; write next track												;4cf6	c3 67 4b 	. g K
2582  4CF9
2583  4CF9
2584  4CF9              DI_VerifyDisk:
2585  4CF9              ; -- turn off Write Request
2586  4CF9 FD 7E 33     	ld a,(iy+FLCtrlShadow)			; a - FLCtrl value												;4cf9	fd 7e 33 	. ~ 3
2587  4CFC F6 40        	or FL_WRITE_REQ					; turn off Write Request										;4cfc	f6 40 	. @
2588  4CFE FD 77 33     	ld (iy+FLCtrlShadow),a			; store FLCtrl to shadow register								;4cfe	fd 77 33 	. w 3
2589  4D01 D3 10        	out (FLCTRL),a					; set Flopy Control byte										;4d01	d3 10 	. .
2590  4D03
2591  4D03              ; -- move drive Head to track 0, sector 0
2592  4D03 06 27        	ld b,39							; 39 tracks to step out											;4d03	06 27 	. '
2593  4D05 CD 01 5F     	call STEPOUT					; move Read/Write Head in drive									;4d05	cd 01 5f 	. . _
2594  4D08 FD 36 12 00  	ld (iy+UserTrackNo),0			; set Track Number to 0											;4d08	fd 36 12 00 	. 6 . .
2595  4D0C FD 36 11 00  	ld (iy+UserSectorNo),0			; set Sector Number to 0										;4d0c	fd 36 11 00 	. 6 . .
2596  4D10
2597  4D10              DI_VerifyTrack:
2598  4D10 DD 21 67 4D  	ld ix,SectorsSequence			; ix - table of Sectors on Track interlave sequence				;4d10	dd 21 67 4d 	. ! g M
2599  4D14
2600  4D14              DI_VerifySector:
2601  4D14              ; -- try read IDAM for given Track and Sector (only IDAM start, TrackNo, SectorNo and verify Checksum of those two)
2602  4D14 CD EA 53     	call ReadIDAddressMark			; Read identification address mark (IDAM) 						;4d14	cd ea 53 	. . S
2603  4D17 20 2C        	jr nz,DI_ExitError				; jump if Error	09 - SECTOR NOT FOUND							;4d17	20 2c 	  ,
2604  4D19
2605  4D19              ; -- sector found
2606  4D19 DD 7E 01     	ld a,(ix+1)						; a - next Sector Number										;4d19	dd 7e 01 	. ~ .
2607  4D1C DD 23        	inc ix							; increment ix ready for next round								;4d1c	dd 23 	. #
2608  4D1E FD 77 11     	ld (iy+UserSectorNo),a			; set Sector Number	to next seq value							;4d1e	fd 77 11 	. w .
2609  4D21 FE FF        	cp $ff							; check if all sectors for this track 							;4d21	fe ff 	. .
2610  4D23 20 EF        	jr nz,DI_VerifySector			; no - read next Sector											;4d23	20 ef 	  .
2611  4D25              ; -- next track
2612  4D25 AF           	xor a							; sector number 0												;4d25	af 	.
2613  4D26 FD 77 11     	ld (iy+UserSectorNo),a			; set Sector Number to 0										;4d26	fd 77 11 	. w .
2614  4D29 FD 7E 12     	ld a,(iy+UserTrackNo)			; a - current Track number										;4d29	fd 7e 12 	. ~ .
2615  4D2C 3C           	inc a							; increment track												;4d2c	3c 	<
2616  4D2D FD 77 12     	ld (iy+UserTrackNo),a			; set next track number											;4d2d	fd 77 12 	. w .
2617  4D30 FE 28        	cp 40							; check if all 40 tracks written								;4d30	fe 28 	. (
2618  4D32 28 07        	jr z,DI_ExitOK					; yes - exit with no error										;4d32	28 07 	( .
2619  4D34              ; -- more tracks to verify
2620  4D34 06 01        	ld b,1							; 1 track to step in											;4d34	06 01 	. .
2621  4D36 CD CE 5E     	call STEPIN						; move R/W Head to next track									;4d36	cd ce 5e 	. . ^
2622  4D39 18 D5        	jr DI_VerifyTrack				; verify next track												;4d39	18 d5 	. .
2623  4D3B
2624  4D3B              ; -- all 40 tracks verified
2625  4D3B              DI_ExitOK:
2626  4D3B              ; -- move Head back on Track 00
2627  4D3B 06 27        	ld b,39							; 39 tracks to Step Out											;4d3b	06 27 	. '
2628  4D3D CD 01 5F     	call STEPOUT					; Track step out												;4d3d	cd 01 5f 	. . _
2629  4D40 CD 52 5F     	call PowerOff					; Disk power OFF												;4d40	cd 52 5f 	. R _
2630  4D43 E1           	pop hl							; restore hl 													;4d43	e1 	.
2631  4D44 C9           	ret								; ------------- End of Proc -----------------------------------	;4d44	c9 	.
2632  4D45              DI_ExitError:
2633  4D45 FE 11        	cp 17							; is it Error 17 (BREAK)										;4d45	fe 11 	. .
2634  4D47 CA 41 42     	jp z,DOSError					; yes - jump to Error handling routine							;4d47	ca 41 42 	. A B
2635  4D4A 3E 06        	ld a,6							; no - set Error 6 (DISK I/O ERROR)								;4d4a	3e 06 	> .
2636  4D4C C3 41 42     	jp DOSError						; jump to Error handling routine ------------------------------ ;4d4c	c3 41 42 	. A B
2637  4D4F
2638  4D4F              SecHeaderInitData:
2639  4D4F 80 80 80 80  	db $80,$80,$80,$80,$80,$80,$00	; GAP 1 bytes													;4d4f	80 80 80 80 80 80 00
2639  4D53 80 80 00
2640  4D56 FE E7 18 C3  	db $fe,$e7,$18,$c3				; IDAM signature 												;4d56	fe e7 18 c3
2641  4D5A 00           	db $00							; Track number													;4d5a	00 	.
2642  4D5B 00           	db $00							; Sector number													;4d5b	00
2643  4D5C 00           	db $00							; Header checksum												;4d5c	00
2644  4D5D
2645  4D5D              SectorGAP2Data:
2646  4D5D 80 80 80 80  	db $80,$80,$80,$80,$80,$00		; GAP 2 bytes													;4d5d	80 80 80 80 80 00
2646  4D61 80 00
2647  4D63 C3 18 E7 FE  	db $c3,$18,$e7,$fe				; IDAM (reversed) signature										;4d63	c3 18 e7 fe
2648  4D67
2649  4D67              SectorsSequence:
2650  4D67 00 0B 06 01  	db 0,11,6, 1,12,7, 2,13,8, 3,14,9, 4,15,10, 5		;4d67	00 0b 06 01 0c 07 02 0d 08 03 0e 09 04 0f 0a 05 	.
2650  4D6B 0C 07 02 0D
2650  4D6F 08 03 0E 09
2650  4D73 04 0F 0A 05
2651  4D77 FF           	db $ff												;4d77	ff 	.
2652  4D78
2653  4D78
2654  4D78
2655  4D78              ;***************************************************************************************************
2656  4D78              ; DOS Command DRIVE
2657  4D78              ; Syntax: DRIVE number
2658  4D78              ; --------------------
2659  4D78              ; Activate Drive 1 or Drive 2. All DOS operations will be performed on Active Drive.
2660  4D78              ; Only '1' or '2' is accepted as Drive number
2661  4D78              DCmdDRIVE:
2662  4D78 CD 1C 2B     	call 02b1ch		;4d78	cd 1c 2b 	. . +
2663  4D7B B7           	or a			;4d7b	b7 	.
2664  4D7C CA 4A 1E     	jp z,01e4ah		;4d7c	ca 4a 1e 	. J .
2665  4D7F FE 03        	cp 003h		;4d7f	fe 03 	. .
2666  4D81 D2 4A 1E     	jp nc,01e4ah		;4d81	d2 4a 1e 	. J .
2667  4D84              sub_4d84h:
2668  4D84 FE 01        	cp 001h		;4d84	fe 01 	. .
2669  4D86 20 05        	jr nz,l4d8dh		;4d86	20 05 	  .
2670  4D88 FD 36 0B 10  	ld (iy+SelectedDrive),010h		;4d88	fd 36 0b 10 	. 6 . .
2671  4D8C C9           	ret			;4d8c	c9 	.
2672  4D8D              l4d8dh:
2673  4D8D FD 36 0B 80  	ld (iy+SelectedDrive),080h		;4d8d	fd 36 0b 80 	. 6 . .
2674  4D91 C9           	ret			;4d91	c9 	.
2675  4D92
2676  4D92
2677  4D92              ;***************************************************************************************************
2678  4D92              ; DOS Command IN#
2679  4D92              ; Syntax: IN# "filaname", var1, var2, ...
2680  4D92              ; ----------------------------------------
2681  4D92              ; Load data from file specified by filename (which has the file type code "D") into specified variables.
2682  4D92              ; File must be previously opened by 'OPEN' command. Variables var1, var2, ... are BASIC variable names.
2683  4D92              ; Variables can be string or numeric and must match types saved by PR# command.
2684  4D92              ; Filename may have no more than 8 characters
2685  4D92              ; NOTE: This command must always be used from inside BASIC program.
2686  4D92              DCmdIN#:
2687  4D92 CD 28 28     	call 02828h		;4d92	cd 28 28 	. ( (
2688  4D95 CD 78 53     	call ParseFilename		;4d95	cd 78 53 	. x S
2689  4D98 B7           	or a			;4d98	b7 	.
2690  4D99 C2 41 42     	jp nz,DOSError		; Error handling routine	;4d99	c2 41 42 	. A B
2691  4D9C CF           	rst 8			;4d9c	cf 	.
2692  4D9D 2C           	inc l			;4d9d	2c 	,
2693  4D9E E5           	push hl			;4d9e	e5 	.
2694  4D9F CD 78 47     	call sub_4778h		;4d9f	cd 78 47 	. x G
2695  4DA2 FE 08        	cp 008h		;4da2	fe 08 	. .
2696  4DA4 3E 05        	ld a,005h		;4da4	3e 05 	> .
2697  4DA6 C2 41 42     	jp nz,DOSError		; Error handling routine	;4da6	c2 41 42 	. A B
2698  4DA9 13           	inc de			;4da9	13 	.
2699  4DAA 1A           	ld a,(de)			;4daa	1a 	.
2700  4DAB B7           	or a			;4dab	b7 	.
2701  4DAC 3E 0F        	ld a,00fh		;4dac	3e 0f 	> .
2702  4DAE C2 41 42     	jp nz,DOSError		; Error handling routine	;4dae	c2 41 42 	. A B
2703  4DB1 1B           	dec de			;4db1	1b 	.
2704  4DB2 1A           	ld a,(de)			;4db2	1a 	.
2705  4DB3 FE 02        	cp 002h		;4db3	fe 02 	. .
2706  4DB5 28 2B        	jr z,l4de2h		;4db5	28 2b 	( +
2707  4DB7 CD A5 4F     	call sub_4fa5h		;4db7	cd a5 4f 	. . O
2708  4DBA 3E 02        	ld a,002h		;4dba	3e 02 	> .
2709  4DBC 12           	ld (de),a			;4dbc	12 	.
2710  4DBD EB           	ex de,hl			;4dbd	eb 	.
2711  4DBE 11 0A 00     	ld de,0000ah		;4dbe	11 0a 00 	. . .
2712  4DC1 19           	add hl,de			;4dc1	19 	.
2713  4DC2 7E           	ld a,(hl)			;4dc2	7e 	~
2714  4DC3 23           	inc hl			;4dc3	23 	#
2715  4DC4 FD 77 12     	ld (iy+UserTrackNo),a		;4dc4	fd 77 12 	. w .
2716  4DC7 7E           	ld a,(hl)			;4dc7	7e 	~
2717  4DC8 FD 77 11     	ld (iy+UserSectorNo),a		;4dc8	fd 77 11 	. w .
2718  4DCB F3           	di			;4dcb	f3 	.
2719  4DCC CD 41 5F     	call PowerOn		; Disk power ON			;4dcc	cd 41 5f 	. A _
2720  4DCF C5           	push bc			;4dcf	c5 	.
2721  4DD0 01 32 00     	ld bc,00032h		;4dd0	01 32 00 	. 2 .
2722  4DD3 CD BE 5E     	call DELAYMS		; Delay mS in reg C								;4dd3	cd be 5e 	. . ^
2723  4DD6 C1           	pop bc			;4dd6	c1 	.
2724  4DD7 CD 27 5B     	call READSECTOR		; Read a sector from disk						;4dd7	cd 27 5b 	. ' [
2725  4DDA B7           	or a			;4dda	b7 	.
2726  4DDB C2 41 42     	jp nz,DOSError		; Error handling routine	;4ddb	c2 41 42 	. A B
2727  4DDE FB           	ei			;4dde	fb 	.
2728  4DDF CD 52 5F     	call PowerOff		; Disk power OFF		;4ddf	cd 52 5f 	. R _
2729  4DE2              l4de2h:
2730  4DE2 06 C7        	ld b,0c7h		;4de2	06 c7 	. .
2731  4DE4 2A A7 78     	ld hl,(078a7h)		;4de4	2a a7 78 	* . x
2732  4DE7              l4de7h:
2733  4DE7 CD F9 4D     	call sub_4df9h		;4de7	cd f9 4d 	. . M
2734  4DEA 77           	ld (hl),a			;4dea	77 	w
2735  4DEB 23           	inc hl			;4deb	23 	#
2736  4DEC FE 0D        	cp 00dh		;4dec	fe 0d 	. .
2737  4DEE 28 02        	jr z,l4df2h		;4dee	28 02 	( .
2738  4DF0 10 F5        	djnz l4de7h		;4df0	10 f5 	. .
2739  4DF2              l4df2h:
2740  4DF2 AF           	xor a			;4df2	af 	.
2741  4DF3 32 A9 78     	ld (078a9h),a		;4df3	32 a9 78 	2 . x
2742  4DF6 C3 BD 21     	jp 021bdh		;4df6	c3 bd 21 	. . !
2743  4DF9              sub_4df9h:
2744  4DF9 E5           	push hl			;4df9	e5 	.
2745  4DFA D5           	push de			;4dfa	d5 	.
2746  4DFB C5           	push bc			;4dfb	c5 	.
2747  4DFC CD 78 47     	call sub_4778h		;4dfc	cd 78 47 	. x G
2748  4DFF 21 0C 00     	ld hl,0000ch		;4dff	21 0c 00 	! . .
2749  4E02 EB           	ex de,hl			;4e02	eb 	.
2750  4E03 19           	add hl,de			;4e03	19 	.
2751  4E04 7E           	ld a,(hl)			;4e04	7e 	~
2752  4E05 EB           	ex de,hl			;4e05	eb 	.
2753  4E06 FD 6E 31     	ld l,(iy+DataBuf)		;4e06	fd 6e 31 	. n 1
2754  4E09 FD 66 32     	ld h,(iy+DataBuf+1)		;4e09	fd 66 32 	. f 2
2755  4E0C 85           	add a,l			;4e0c	85 	.
2756  4E0D 6F           	ld l,a			;4e0d	6f 	o
2757  4E0E 3E 00        	ld a,000h		;4e0e	3e 00 	> .
2758  4E10 8C           	adc a,h			;4e10	8c 	.
2759  4E11 67           	ld h,a			;4e11	67 	g
2760  4E12 7E           	ld a,(hl)			;4e12	7e 	~
2761  4E13 B7           	or a			;4e13	b7 	.
2762  4E14 20 04        	jr nz,l4e1ah		;4e14	20 04 	  .
2763  4E16 0E 0D        	ld c,00dh		;4e16	0e 0d 	. .
2764  4E18 18 40        	jr l4e5ah		;4e18	18 40 	. @
2765  4E1A              l4e1ah:
2766  4E1A 4F           	ld c,a			;4e1a	4f 	O
2767  4E1B 1A           	ld a,(de)			;4e1b	1a 	.
2768  4E1C 3C           	inc a			;4e1c	3c 	<
2769  4E1D 12           	ld (de),a			;4e1d	12 	.
2770  4E1E FE 7E        	cp 07eh		;4e1e	fe 7e 	. ~
2771  4E20 20 38        	jr nz,l4e5ah		;4e20	20 38 	  8
2772  4E22 AF           	xor a			;4e22	af 	.
2773  4E23 12           	ld (de),a			;4e23	12 	.
2774  4E24 FD 6E 31     	ld l,(iy+DataBuf)		;4e24	fd 6e 31 	. n 1
2775  4E27 FD 66 32     	ld h,(iy+DataBuf+1)		;4e27	fd 66 32 	. f 2
2776  4E2A D5           	push de			;4e2a	d5 	.
2777  4E2B 11 7E 00     	ld de,0007eh		;4e2b	11 7e 00 	. ~ .
2778  4E2E 19           	add hl,de			;4e2e	19 	.
2779  4E2F D1           	pop de			;4e2f	d1 	.
2780  4E30 7E           	ld a,(hl)			;4e30	7e 	~
2781  4E31 B7           	or a			;4e31	b7 	.
2782  4E32 28 2B        	jr z,l4e5fh		;4e32	28 2b 	( +
2783  4E34 FD 77 12     	ld (iy+UserTrackNo),a		;4e34	fd 77 12 	. w .
2784  4E37 1B           	dec de			;4e37	1b 	.
2785  4E38 1B           	dec de			;4e38	1b 	.
2786  4E39 12           	ld (de),a			;4e39	12 	.
2787  4E3A 23           	inc hl			;4e3a	23 	#
2788  4E3B 7E           	ld a,(hl)			;4e3b	7e 	~
2789  4E3C FD 77 11     	ld (iy+UserSectorNo),a		;4e3c	fd 77 11 	. w .
2790  4E3F 13           	inc de			;4e3f	13 	.
2791  4E40 12           	ld (de),a			;4e40	12 	.
2792  4E41 F3           	di			;4e41	f3 	.
2793  4E42 CD 41 5F     	call PowerOn		; Disk power ON			;4e42	cd 41 5f 	. A _
2794  4E45              l4e45h:
2795  4E45 C5           	push bc			;4e45	c5 	.
2796  4E46 01 32 00     	ld bc,00032h		;4e46	01 32 00 	. 2 .
2797  4E49 CD BE 5E     	call DELAYMS		; Delay mS in reg C								;4e49	cd be 5e 	. . ^
2798  4E4C C1           	pop bc			;4e4c	c1 	.
2799  4E4D C5           	push bc			;4e4d	c5 	.
2800  4E4E CD 27 5B     	call READSECTOR		; Read a sector from disk						;4e4e	cd 27 5b 	. ' [
2801  4E51 C1           	pop bc			;4e51	c1 	.
2802  4E52 B7           	or a			;4e52	b7 	.
2803  4E53 C2 41 42     	jp nz,DOSError		; Error handling routine	;4e53	c2 41 42 	. A B
2804  4E56 CD 52 5F     	call PowerOff		; Disk power OFF		;4e56	cd 52 5f 	. R _
2805  4E59 FB           	ei			;4e59	fb 	.
2806  4E5A              l4e5ah:
2807  4E5A 79           	ld a,c			;4e5a	79 	y
2808  4E5B C1           	pop bc			;4e5b	c1 	.
2809  4E5C D1           	pop de			;4e5c	d1 	.
2810  4E5D E1           	pop hl			;4e5d	e1 	.
2811  4E5E C9           	ret			;4e5e	c9 	.
2812  4E5F              l4e5fh:
2813  4E5F 3E 7F        	ld a,07fh		;4e5f	3e 7f 	> 
2814  4E61 12           	ld (de),a			;4e61	12 	.
2815  4E62 18 F6        	jr l4e5ah		;4e62	18 f6 	. .
2816  4E64
2817  4E64
2818  4E64              ;***************************************************************************************************
2819  4E64              ; DOS Command PR#
2820  4E64              ; Syntax: PR# "filaname", D1, D2, ...
2821  4E64              ; -----------------------------------
2822  4E64              ; Send data to file specified by filename (which has the file type code "D") and was previously
2823  4E64              ; opened by 'OPEN' command. Data D1, D2, ... are data to be saved and can be string or numeric.
2824  4E64              ; Filename may have no more than 8 characters
2825  4E64              ; NOTE: This command must always be used from inside BASIC program.
2826  4E64              DCmdPR#:
2827  4E64 CD 28 28     	call 02828h		;4e64	cd 28 28 	. ( (
2828  4E67 CD 78 53     	call ParseFilename		;4e67	cd 78 53 	. x S
2829  4E6A B7           	or a			;4e6a	b7 	.
2830  4E6B C2 41 42     	jp nz,DOSError		; Error handling routine	;4e6b	c2 41 42 	. A B
2831  4E6E E5           	push hl			;4e6e	e5 	.
2832  4E6F CD 78 47     	call sub_4778h		;4e6f	cd 78 47 	. x G
2833  4E72 FE 08        	cp 008h		;4e72	fe 08 	. .
2834  4E74 3E 05        	ld a,005h		;4e74	3e 05 	> .
2835  4E76 C2 41 42     	jp nz,DOSError		; Error handling routine	;4e76	c2 41 42 	. A B
2836  4E79 E1           	pop hl			;4e79	e1 	.
2837  4E7A CF           	rst 8			;4e7a	cf 	.
2838  4E7B 2C           	inc l			;4e7b	2c 	,
2839  4E7C              l4e7ch:
2840  4E7C 2B           	dec hl			;4e7c	2b 	+
2841  4E7D D7           	rst 10h			;4e7d	d7 	.
2842  4E7E CC AC 4E     	call z,sub_4each		;4e7e	cc ac 4e 	. . N
2843  4E81              l4e81h:
2844  4E81 C8           	ret z			;4e81	c8 	.
2845  4E82 E5           	push hl			;4e82	e5 	.
2846  4E83 FE 2C        	cp 02ch		;4e83	fe 2c 	. ,
2847  4E85 CA B3 4E     	jp z,l4eb3h		;4e85	ca b3 4e 	. . N
2848  4E88 FE 3A        	cp 03ah		;4e88	fe 3a 	. :
2849  4E8A 28 2B        	jr z,l4eb7h		;4e8a	28 2b 	( +
2850  4E8C C1           	pop bc			;4e8c	c1 	.
2851  4E8D CD 37 23     	call 02337h		;4e8d	cd 37 23 	. 7 #
2852  4E90 E5           	push hl			;4e90	e5 	.
2853  4E91 E7           	rst 20h			;4e91	e7 	.
2854  4E92 28 12        	jr z,l4ea6h		;4e92	28 12 	( .
2855  4E94 CD BD 0F     	call 00fbdh		;4e94	cd bd 0f 	. . .
2856  4E97 CD 65 28     	call 02865h		;4e97	cd 65 28 	. e (
2857  4E9A 2A 21 79     	ld hl,(07921h)		;4e9a	2a 21 79 	* ! y
2858  4E9D CD BA 4E     	call sub_4ebah		;4e9d	cd ba 4e 	. . N
2859  4EA0 3E 20        	ld a,020h		;4ea0	3e 20 	>
2860  4EA2 CD CA 4E     	call sub_4ecah		;4ea2	cd ca 4e 	. . N
2861  4EA5 B7           	or a			;4ea5	b7 	.
2862  4EA6              l4ea6h:
2863  4EA6 CC BA 4E     	call z,sub_4ebah		;4ea6	cc ba 4e 	. . N
2864  4EA9 E1           	pop hl			;4ea9	e1 	.
2865  4EAA 18 D0        	jr l4e7ch		;4eaa	18 d0 	. .
2866  4EAC              sub_4each:
2867  4EAC 3E 0D        	ld a,00dh		;4eac	3e 0d 	> .
2868  4EAE CD CA 4E     	call sub_4ecah		;4eae	cd ca 4e 	. . N
2869  4EB1 AF           	xor a			;4eb1	af 	.
2870  4EB2 C9           	ret			;4eb2	c9 	.
2871  4EB3              l4eb3h:
2872  4EB3 CD CA 4E     	call sub_4ecah		;4eb3	cd ca 4e 	. . N
2873  4EB6 E1           	pop hl			;4eb6	e1 	.
2874  4EB7              l4eb7h:
2875  4EB7 D7           	rst 10h			;4eb7	d7 	.
2876  4EB8 18 C7        	jr l4e81h		;4eb8	18 c7 	. .
2877  4EBA              sub_4ebah:
2878  4EBA CD DA 29     	call 029dah		;4eba	cd da 29 	. . )
2879  4EBD CD C4 09     	call 009c4h		;4ebd	cd c4 09 	. . .
2880  4EC0 14           	inc d			;4ec0	14 	.
2881  4EC1              l4ec1h:
2882  4EC1 15           	dec d			;4ec1	15 	.
2883  4EC2 C8           	ret z			;4ec2	c8 	.
2884  4EC3 0A           	ld a,(bc)			;4ec3	0a 	.
2885  4EC4 CD CA 4E     	call sub_4ecah		;4ec4	cd ca 4e 	. . N
2886  4EC7 03           	inc bc			;4ec7	03 	.
2887  4EC8 18 F7        	jr l4ec1h		;4ec8	18 f7 	. .
2888  4ECA              sub_4ecah:
2889  4ECA E5           	push hl			;4eca	e5 	.
2890  4ECB D5           	push de			;4ecb	d5 	.
2891  4ECC C5           	push bc			;4ecc	c5 	.
2892  4ECD F5           	push af			;4ecd	f5 	.
2893  4ECE CD 78 47     	call sub_4778h		;4ece	cd 78 47 	. x G
2894  4ED1 EB           	ex de,hl			;4ed1	eb 	.
2895  4ED2 23           	inc hl			;4ed2	23 	#
2896  4ED3 7E           	ld a,(hl)			;4ed3	7e 	~
2897  4ED4 B7           	or a			;4ed4	b7 	.
2898  4ED5 3E 10        	ld a,010h		;4ed5	3e 10 	> .
2899  4ED7 CA 41 42     	jp z,DOSError		; Error handling routine	;4ed7	ca 41 42 	. A B
2900  4EDA 2B           	dec hl			;4eda	2b 	+
2901  4EDB 7E           	ld a,(hl)			;4edb	7e 	~
2902  4EDC FE 02        	cp 002h		;4edc	fe 02 	. .
2903  4EDE 28 2C        	jr z,l4f0ch		;4ede	28 2c 	( ,
2904  4EE0 CD A5 4F     	call sub_4fa5h		;4ee0	cd a5 4f 	. . O
2905  4EE3 11 0A 00     	ld de,0000ah		;4ee3	11 0a 00 	. . .
2906  4EE6 19           	add hl,de			;4ee6	19 	.
2907  4EE7 7E           	ld a,(hl)			;4ee7	7e 	~
2908  4EE8 23           	inc hl			;4ee8	23 	#
2909  4EE9 FD 77 12     	ld (iy+UserTrackNo),a		;4ee9	fd 77 12 	. w .
2910  4EEC 7E           	ld a,(hl)			;4eec	7e 	~
2911  4EED 23           	inc hl			;4eed	23 	#
2912  4EEE FD 77 11     	ld (iy+UserSectorNo),a		;4eee	fd 77 11 	. w .
2913  4EF1 F3           	di			;4ef1	f3 	.
2914  4EF2 CD 41 5F     	call PowerOn		; Disk power ON			;4ef2	cd 41 5f 	. A _
2915  4EF5 DB 13        	in a,(FLWR_PROTECT)		;4ef5	db 13 	. .
2916  4EF7 B7           	or a			;4ef7	b7 	.
2917  4EF8 3E 04        	ld a,004h		;4ef8	3e 04 	> .
2918  4EFA FA 41 42     	jp m,DOSError		; Error handling routine	;4efa	fa 41 42 	. A B
2919  4EFD E5           	push hl			;4efd	e5 	.
2920  4EFE CD 27 5B     	call READSECTOR		; Read a sector from disk						;4efe	cd 27 5b 	. ' [
2921  4F01 B7           	or a			;4f01	b7 	.
2922  4F02 C2 41 42     	jp nz,DOSError		; Error handling routine	;4f02	c2 41 42 	. A B
2923  4F05 E1           	pop hl			;4f05	e1 	.
2924  4F06 11 F4 FF     	ld de,0fff4h		;4f06	11 f4 ff 	. . .
2925  4F09 19           	add hl,de			;4f09	19 	.
2926  4F0A 36 02        	ld (hl),002h		;4f0a	36 02 	6 .
2927  4F0C              l4f0ch:
2928  4F0C 11 0C 00     	ld de,0000ch		;4f0c	11 0c 00 	. . .
2929  4F0F 19           	add hl,de			;4f0f	19 	.
2930  4F10 5E           	ld e,(hl)			;4f10	5e 	^
2931  4F11 34           	inc (hl)			;4f11	34 	4
2932  4F12 16 00        	ld d,000h		;4f12	16 00 	. .
2933  4F14 FD 6E 31     	ld l,(iy+DataBuf)		;4f14	fd 6e 31 	. n 1
2934  4F17 FD 66 32     	ld h,(iy+DataBuf+1)		;4f17	fd 66 32 	. f 2
2935  4F1A 19           	add hl,de			;4f1a	19 	.
2936  4F1B F1           	pop af			;4f1b	f1 	.
2937  4F1C F5           	push af			;4f1c	f5 	.
2938  4F1D 77           	ld (hl),a			;4f1d	77 	w
2939  4F1E 7B           	ld a,e			;4f1e	7b 	{
2940  4F1F 3C           	inc a			;4f1f	3c 	<
2941  4F20 FE 7E        	cp 07eh		;4f20	fe 7e 	. ~
2942  4F22 20 78        	jr nz,l4f9ch		;4f22	20 78 	  x
2943  4F24 F3           	di			;4f24	f3 	.
2944  4F25 CD 41 5F     	call PowerOn		; Disk power ON			;4f25	cd 41 5f 	. A _
2945  4F28 C5           	push bc			;4f28	c5 	.
2946  4F29 01 02 00     	ld bc,00002h		;4f29	01 02 00 	. . .
2947  4F2C CD BE 5E     	call DELAYMS		; Delay mS in reg C								;4f2c	cd be 5e 	. . ^
2948  4F2F C1           	pop bc			;4f2f	c1 	.
2949  4F30 DB 13        	in a,(FLWR_PROTECT)		;4f30	db 13 	. .
2950  4F32 B7           	or a			;4f32	b7 	.
2951  4F33 3E 04        	ld a,004h		;4f33	3e 04 	> .
2952  4F35 FA 41 42     	jp m,DOSError		; Error handling routine	;4f35	fa 41 42 	. A B
2953  4F38 FD 5E 11     	ld e,(iy+UserSectorNo)		;4f38	fd 5e 11 	. ^ .
2954  4F3B FD 56 12     	ld d,(iy+UserTrackNo)		;4f3b	fd 56 12 	. V .
2955  4F3E D5           	push de			;4f3e	d5 	.
2956  4F3F CD A1 59     	call WRITESECTOR		; Write a sector to disk						;4f3f	cd a1 59 	. . Y
2957  4F42 B7           	or a			;4f42	b7 	.
2958  4F43              sub_4f43h:
2959  4F43 C2 41 42     	jp nz,DOSError		; Error handling routine	;4f43	c2 41 42 	. A B
2960  4F46 CD 17 47     	call ReadMap		; Read the track map of the disk				;4f46	cd 17 47 	. . G
2961  4F49 B7           	or a			;4f49	b7 	.
2962  4F4A C2 41 42     	jp nz,DOSError		; Error handling routine	;4f4a	c2 41 42 	. A B
2963  4F4D CD BF 58     	call FINDEMPTYSEC		; Search for empty sector						;4f4d	cd bf 58 	. . X
2964  4F50 B7           	or a			;4f50	b7 	.
2965  4F51 C2 41 42     	jp nz,DOSError		; Error handling routine	;4f51	c2 41 42 	. A B
2966  4F54 CD 54 47     	call SaveMap		; Save the track map to the disk				;4f54	cd 54 47 	. T G
2967  4F57 D1           	pop de			;4f57	d1 	.
2968  4F58 FD 73 11     	ld (iy+UserSectorNo),e		;4f58	fd 73 11 	. s .
2969  4F5B FD 72 12     	ld (iy+UserTrackNo),d		;4f5b	fd 72 12 	. r .
2970  4F5E CD 27 5B     	call READSECTOR		; Read a sector from disk						;4f5e	cd 27 5b 	. ' [
2971  4F61 B7           	or a			;4f61	b7 	.
2972  4F62 C2 41 42     	jp nz,DOSError		; Error handling routine	;4f62	c2 41 42 	. A B
2973  4F65 FD 6E 31     	ld l,(iy+DataBuf)		;4f65	fd 6e 31 	. n 1
2974  4F68 FD 66 32     	ld h,(iy+DataBuf+1)		;4f68	fd 66 32 	. f 2
2975  4F6B 11 7E 00     	ld de,0007eh		;4f6b	11 7e 00 	. ~ .
2976  4F6E 19           	add hl,de			;4f6e	19 	.
2977  4F6F FD 7E 16     	ld a,(iy+NextTrackNo)		;4f6f	fd 7e 16 	. ~ .
2978  4F72 77           	ld (hl),a			;4f72	77 	w
2979  4F73 23           	inc hl			;4f73	23 	#
2980  4F74 FD 7E 15     	ld a,(iy+NextSectorNo)		;4f74	fd 7e 15 	. ~ .
2981  4F77 77           	ld (hl),a			;4f77	77 	w
2982  4F78 CD A1 59     	call WRITESECTOR		; Write a sector to disk						;4f78	cd a1 59 	. . Y
2983  4F7B B7           	or a			;4f7b	b7 	.
2984  4F7C C2 41 42     	jp nz,DOSError		; Error handling routine	;4f7c	c2 41 42 	. A B
2985  4F7F CD 78 47     	call sub_4778h		;4f7f	cd 78 47 	. x G
2986  4F82 EB           	ex de,hl			;4f82	eb 	.
2987  4F83 11 0A 00     	ld de,0000ah		;4f83	11 0a 00 	. . .
2988  4F86 19           	add hl,de			;4f86	19 	.
2989  4F87 FD 7E 16     	ld a,(iy+NextTrackNo)		;4f87	fd 7e 16 	. ~ .
2990  4F8A FD 77 12     	ld (iy+UserTrackNo),a		;4f8a	fd 77 12 	. w .
2991  4F8D 77           	ld (hl),a			;4f8d	77 	w
2992  4F8E 23           	inc hl			;4f8e	23 	#
2993  4F8F FD 7E 15     	ld a,(iy+NextSectorNo)		;4f8f	fd 7e 15 	. ~ .
2994  4F92 FD 77 11     	ld (iy+UserSectorNo),a		;4f92	fd 77 11 	. w .
2995  4F95 77           	ld (hl),a			;4f95	77 	w
2996  4F96 23           	inc hl			;4f96	23 	#
2997  4F97 AF           	xor a			;4f97	af 	.
2998  4F98 77           	ld (hl),a			;4f98	77 	w
2999  4F99 CD 49 47     	call ClearSector		; Clear a sector of the disk					;4f99	cd 49 47 	. I G
3000  4F9C              l4f9ch:
3001  4F9C CD 52 5F     	call PowerOff		; Disk power OFF		;4f9c	cd 52 5f 	. R _
3002  4F9F FB           	ei			;4f9f	fb 	.
3003  4FA0 F1           	pop af			;4fa0	f1 	.
3004  4FA1 C1           	pop bc			;4fa1	c1 	.
3005  4FA2 D1           	pop de			;4fa2	d1 	.
3006  4FA3 E1           	pop hl			;4fa3	e1 	.
3007  4FA4 C9           	ret			;4fa4	c9 	.
3008  4FA5              sub_4fa5h:
3009  4FA5 E5           	push hl			;4fa5	e5 	.
3010  4FA6 D5           	push de			;4fa6	d5 	.
3011  4FA7 FD E5        	push iy		;4fa7	fd e5 	. .
3012  4FA9 E1           	pop hl			;4fa9	e1 	.
3013  4FAA 11 17 00     	ld de,00017h		;4faa	11 17 00 	. . .
3014  4FAD 19           	add hl,de			;4fad	19 	.
3015  4FAE CD BB 4F     	call sub_4fbbh		;4fae	cd bb 4f 	. . O
3016  4FB1 11 0D 00     	ld de,0000dh		;4fb1	11 0d 00 	. . .
3017  4FB4 19           	add hl,de			;4fb4	19 	.
3018  4FB5 CD BB 4F     	call sub_4fbbh		;4fb5	cd bb 4f 	. . O
3019  4FB8 D1           	pop de			;4fb8	d1 	.
3020  4FB9 E1           	pop hl			;4fb9	e1 	.
3021  4FBA C9           	ret			;4fba	c9 	.
3022  4FBB              sub_4fbbh:
3023  4FBB 7E           	ld a,(hl)			;4fbb	7e 	~
3024  4FBC B7           	or a			;4fbc	b7 	.
3025  4FBD C8           	ret z			;4fbd	c8 	.
3026  4FBE FE 02        	cp 002h		;4fbe	fe 02 	. .
3027  4FC0 C0           	ret nz			;4fc0	c0 	.
3028  4FC1 36 01        	ld (hl),001h		;4fc1	36 01 	6 .
3029  4FC3 23           	inc hl			;4fc3	23 	#
3030  4FC4 7E           	ld a,(hl)			;4fc4	7e 	~
3031  4FC5 B7           	or a			;4fc5	b7 	.
3032  4FC6 2B           	dec hl			;4fc6	2b 	+
3033  4FC7 C8           	ret z			;4fc7	c8 	.
3034  4FC8 11 0A 00     	ld de,0000ah		;4fc8	11 0a 00 	. . .
3035  4FCB 19           	add hl,de			;4fcb	19 	.
3036  4FCC 7E           	ld a,(hl)			;4fcc	7e 	~
3037  4FCD FD 77 12     	ld (iy+UserTrackNo),a		;4fcd	fd 77 12 	. w .
3038  4FD0 23           	inc hl			;4fd0	23 	#
3039  4FD1 7E           	ld a,(hl)			;4fd1	7e 	~
3040  4FD2 FD 77 11     	ld (iy+UserSectorNo),a		;4fd2	fd 77 11 	. w .
3041  4FD5 F3           	di			;4fd5	f3 	.
3042  4FD6 CD 41 5F     	call PowerOn		; Disk power ON			;4fd6	cd 41 5f 	. A _
3043  4FD9 C5           	push bc			;4fd9	c5 	.
3044  4FDA 01 32 00     	ld bc,00032h		;4fda	01 32 00 	. 2 .
3045  4FDD CD BE 5E     	call DELAYMS		; Delay mS in reg C								;4fdd	cd be 5e 	. . ^
3046  4FE0 C1           	pop bc			;4fe0	c1 	.
3047  4FE1 DB 13        	in a,(FLWR_PROTECT)		;4fe1	db 13 	. .
3048  4FE3 B7           	or a			;4fe3	b7 	.
3049  4FE4 3E 04        	ld a,004h		;4fe4	3e 04 	> .
3050  4FE6 FA 41 42     	jp m,DOSError		; Error handling routine	;4fe6	fa 41 42 	. A B
3051  4FE9 E5           	push hl			;4fe9	e5 	.
3052  4FEA CD A1 59     	call WRITESECTOR		; Write a sector to disk						;4fea	cd a1 59 	. . Y
3053  4FED E1           	pop hl			;4fed	e1 	.
3054  4FEE B7           	or a			;4fee	b7 	.
3055  4FEF C2 41 42     	jp nz,DOSError		; Error handling routine	;4fef	c2 41 42 	. A B
3056  4FF2 11 F5 FF     	ld de,0fff5h		;4ff2	11 f5 ff 	. . .
3057  4FF5 19           	add hl,de			;4ff5	19 	.
3058  4FF6 CD 52 5F     	call PowerOff		; Disk power OFF		;4ff6	cd 52 5f 	. R _
3059  4FF9 FB           	ei			;4ff9	fb 	.
3060  4FFA C9           	ret			;4ffa	c9 	.
3061  4FFB
3062  4FFB
3063  4FFB
3064  4FFB              ;***************************************************************************************************
3065  4FFB              ; DOS Command DCOPY
3066  4FFB              ; Syntax: DCOPY "filaname"
3067  4FFB              ;         DCOPY
3068  4FFB              ; ------------------------
3069  4FFB              ; Transfer a single file (specified by filename) or all the files in a diskette from one to another.
3070  4FFB              ; To transfer all files type DCOPY without filename argument.
3071  4FFB              ; Filename may have no more than 8 characters
3072  4FFB              DCmdDCOPY:
3073  4FFB ED 5B A2 78  	ld de,(078a2h)		;4ffb	ed 5b a2 78 	. [ . x
3074  4FFF 13           	inc de			;4fff	13 	.
3075  5000 7A           	ld a,d			;5000	7a 	z
3076  5001 B3           	or e			;5001	b3 	.
3077  5002 1E 16        	ld e,016h		;5002	1e 16 	. .
3078  5004 C2 A2 19     	jp nz,019a2h		;5004	c2 a2 19 	. . .
3079  5007 FD 36 39 01  	ld (iy+039h),001h		;5007	fd 36 39 01 	. 6 9 .
3080  500B 2B           	dec hl			;500b	2b 	+
3081  500C D7           	rst 10h			;500c	d7 	.
3082  500D 28 4E        	jr z,l505dh		;500d	28 4e 	( N
3083  500F CD 67 53     	call CSI		; Command string interpreter					;500f	cd 67 53 	. g S
3084  5012 B7           	or a			;5012	b7 	.
3085  5013 C2 41 42     	jp nz,DOSError		; Error handling routine	;5013	c2 41 42 	. A B
3086  5016 E5           	push hl			;5016	e5 	.
3087  5017 CD 68 51     	call sub_5168h		;5017	cd 68 51 	. h Q
3088  501A CD 19 52     	call sub_5219h		;501a	cd 19 52 	. . R
3089  501D F3           	di			;501d	f3 	.
3090  501E CD 41 5F     	call PowerOn		; Disk power ON			;501e	cd 41 5f 	. A _
3091  5021 C5           	push bc			;5021	c5 	.
3092  5022 01 32 00     	ld bc,00032h		;5022	01 32 00 	. 2 .
3093  5025 CD BE 5E     	call DELAYMS		; Delay mS in reg C								;5025	cd be 5e 	. . ^
3094  5028 C1           	pop bc			;5028	c1 	.
3095  5029 CD 13 59     	call FINDFILE		; Search for file in directory					;5029	cd 13 59 	. . Y
3096  502C FE 02        	cp 002h		;502c	fe 02 	. .
3097  502E 28 09        	jr z,l5039h		;502e	28 09 	( .
3098  5030 B7           	or a			;5030	b7 	.
3099  5031 C2 41 42     	jp nz,DOSError		; Error handling routine	;5031	c2 41 42 	. A B
3100  5034 3E 0D        	ld a,00dh		;5034	3e 0d 	> .
3101  5036 C3 41 42     	jp DOSError		; Error handling routine	;5036	c3 41 42 	. A B
3102  5039              l5039h:
3103  5039 FD 7E 0A     	ld a,(iy+FileType+1)		;5039	fd 7e 0a 	. ~ .
3104  503C FD 77 09     	ld (iy+FileType),a		;503c	fd 77 09 	. w .
3105  503F FE 44        	cp 044h		;503f	fe 44 	. D
3106  5041 3E 0C        	ld a,00ch		;5041	3e 0c 	> .
3107  5043 CA 41 42     	jp z,DOSError		; Error handling routine	;5043	ca 41 42 	. A B
3108  5046 CD D3 43     	call sub_43d3h		;5046	cd d3 43 	. . C
3109  5049 B7           	or a			;5049	b7 	.
3110  504A C2 62 51     	jp nz,l5162h		;504a	c2 62 51 	. b Q
3111  504D CD 75 52     	call sub_5275h		;504d	cd 75 52 	. u R
3112  5050 CD 41 5F     	call PowerOn		; Disk power ON			;5050	cd 41 5f 	. A _
3113  5053 CD 6E 44     	call SAVEFILE		; Save a file to disk							;5053	cd 6e 44 	. n D
3114  5056 B7           	or a			;5056	b7 	.
3115  5057 C2 62 51     	jp nz,l5162h		;5057	c2 62 51 	. b Q
3116  505A C3 37 51     	jp l5137h		;505a	c3 37 51 	. 7 Q
3117  505D              l505dh:
3118  505D E5           	push hl			;505d	e5 	.
3119  505E 21 C6 FF     	ld hl,0ffc6h		;505e	21 c6 ff 	! . .
3120  5061 39           	add hl,sp			;5061	39 	9
3121  5062 11 E9 7A     	ld de,SYS_BASIC_PRG		; address of first byte of BASIC program ;5062	11 e9 7a 	. . z
3122  5065 B7           	or a			;5065	b7 	.
3123  5066 ED 52        	sbc hl,de		;5066	ed 52 	. R
3124  5068 CB 3C        	srl h		;5068	cb 3c 	. <
3125  506A CB 3C        	srl h		;506a	cb 3c 	. <
3126  506C CB 3C        	srl h		;506c	cb 3c 	. <
3127  506E FD 74 36     	ld (iy+CopyTrackCount),h		;506e	fd 74 36 	. t 6
3128  5071 FD 36 37 00  	ld (iy+CopyTrackPtr),000h		;5071	fd 36 37 00 	. 6 7 .
3129  5075 FD 36 12 00  	ld (iy+UserTrackNo),000h		;5075	fd 36 12 00 	. 6 . .
3130  5079 FD 36 11 00  	ld (iy+UserSectorNo),000h		;5079	fd 36 11 00 	. 6 . .
3131  507D CD A5 4F     	call sub_4fa5h		;507d	cd a5 4f 	. . O
3132  5080 CD 68 51     	call sub_5168h		;5080	cd 68 51 	. h Q
3133  5083              l5083h:
3134  5083 11 E9 7A     	ld de,SYS_BASIC_PRG		; address of first byte of BASIC program ;5083	11 e9 7a 	. . z
3135  5086 ED 53 A4 78  	ld (SYS_BASIC_START_PTR),de		; start of current BASIC Program ;5086	ed 53 a4 78 	. S . x
3136  508A CD 19 52     	call sub_5219h		;508a	cd 19 52 	. . R
3137  508D F3           	di			;508d	f3 	.
3138  508E CD 41 5F     	call PowerOn		; Disk power ON			;508e	cd 41 5f 	. A _
3139  5091              l5091h:
3140  5091 CD 27 5B     	call READSECTOR		; Read a sector from disk						;5091	cd 27 5b 	. ' [
3141  5094 B7           	or a			;5094	b7 	.
3142  5095 C2 62 51     	jp nz,l5162h		;5095	c2 62 51 	. b Q
3143  5098 FD 6E 31     	ld l,(iy+DataBuf)		;5098	fd 6e 31 	. n 1
3144  509B FD 66 32     	ld h,(iy+DataBuf+1)		;509b	fd 66 32 	. f 2
3145  509E ED 5B A4 78  	ld de,(SYS_BASIC_START_PTR)		; start of current BASIC Program ;509e	ed 5b a4 78 	. [ . x
3146  50A2 01 80 00     	ld bc,00080h		;50a2	01 80 00 	. . .
3147  50A5 ED B0        	ldir		;50a5	ed b0 	. .
3148  50A7 ED 53 A4 78  	ld (SYS_BASIC_START_PTR),de		; start of current BASIC Program ;50a7	ed 53 a4 78 	. S . x
3149  50AB FD 34 11     	inc (iy+UserSectorNo)		;50ab	fd 34 11 	. 4 .
3150  50AE FD 7E 11     	ld a,(iy+UserSectorNo)		;50ae	fd 7e 11 	. ~ .
3151  50B1 FE 10        	cp 010h		;50b1	fe 10 	. .
3152  50B3 20 DC        	jr nz,l5091h		;50b3	20 dc 	  .
3153  50B5 FD 36 11 00  	ld (iy+UserSectorNo),000h		;50b5	fd 36 11 00 	. 6 . .
3154  50B9 FD 34 12     	inc (iy+UserTrackNo)		;50b9	fd 34 12 	. 4 .
3155  50BC FD 7E 12     	ld a,(iy+UserTrackNo)		;50bc	fd 7e 12 	. ~ .
3156  50BF FE 28        	cp 028h		;50bf	fe 28 	. (
3157  50C1 28 08        	jr z,l50cbh		;50c1	28 08 	( .
3158  50C3 FD 96 37     	sub (iy+CopyTrackPtr)		;50c3	fd 96 37 	. . 7
3159  50C6 FD 96 36     	sub (iy+CopyTrackCount)		;50c6	fd 96 36 	. . 6
3160  50C9 20 C6        	jr nz,l5091h		;50c9	20 c6 	  .
3161  50CB              l50cbh:
3162  50CB FD 7E 37     	ld a,(iy+CopyTrackPtr)		;50cb	fd 7e 37 	. ~ 7
3163  50CE FD 77 12     	ld (iy+UserTrackNo),a		;50ce	fd 77 12 	. w .
3164  50D1 CD 52 5F     	call PowerOff		; Disk power OFF		;50d1	cd 52 5f 	. R _
3165  50D4 CD 75 52     	call sub_5275h		;50d4	cd 75 52 	. u R
3166  50D7 F3           	di			;50d7	f3 	.
3167  50D8 CD 41 5F     	call PowerOn		; Disk power ON			;50d8	cd 41 5f 	. A _
3168  50DB C5           	push bc			;50db	c5 	.
3169  50DC 01 02 00     	ld bc,00002h		;50dc	01 02 00 	. . .
3170  50DF CD BE 5E     	call DELAYMS		; Delay mS in reg C								;50df	cd be 5e 	. . ^
3171  50E2 C1           	pop bc			;50e2	c1 	.
3172  50E3 DB 13        	in a,(FLWR_PROTECT)		;50e3	db 13 	. .
3173  50E5 B7           	or a			;50e5	b7 	.
3174  50E6 3E 04        	ld a,004h		;50e6	3e 04 	> .
3175  50E8 FA 62 51     	jp m,l5162h		;50e8	fa 62 51 	. b Q
3176  50EB 21 E9 7A     	ld hl,SYS_BASIC_PRG		; address of first byte of BASIC program ;50eb	21 e9 7a 	! . z
3177  50EE 22 A4 78     	ld (SYS_BASIC_START_PTR),hl		; start of current BASIC Program ;50ee	22 a4 78 	" . x
3178  50F1              l50f1h:
3179  50F1 2A A4 78     	ld hl,(SYS_BASIC_START_PTR)		; start of current BASIC Program ;50f1	2a a4 78 	* . x
3180  50F4 FD 5E 31     	ld e,(iy+DataBuf)		;50f4	fd 5e 31 	. ^ 1
3181  50F7 FD 56 32     	ld d,(iy+DataBuf+1)		;50f7	fd 56 32 	. V 2
3182  50FA 01 80 00     	ld bc,00080h		;50fa	01 80 00 	. . .
3183  50FD ED B0        	ldir		;50fd	ed b0 	. .
3184  50FF 22 A4 78     	ld (SYS_BASIC_START_PTR),hl		; start of current BASIC Program ;50ff	22 a4 78 	" . x
3185  5102 CD A1 59     	call WRITESECTOR		; Write a sector to disk						;5102	cd a1 59 	. . Y
3186  5105 B7           	or a			;5105	b7 	.
3187  5106 20 5A        	jr nz,l5162h		;5106	20 5a 	  Z
3188  5108 FD 34 11     	inc (iy+UserSectorNo)		;5108	fd 34 11 	. 4 .
3189  510B FD 7E 11     	ld a,(iy+UserSectorNo)		;510b	fd 7e 11 	. ~ .
3190  510E FE 10        	cp 010h		;510e	fe 10 	. .
3191  5110 20 DF        	jr nz,l50f1h		;5110	20 df 	  .
3192  5112 FD 36 11 00  	ld (iy+UserSectorNo),000h		;5112	fd 36 11 00 	. 6 . .
3193  5116 FD 34 12     	inc (iy+UserTrackNo)		;5116	fd 34 12 	. 4 .
3194  5119 FD 7E 12     	ld a,(iy+UserTrackNo)		;5119	fd 7e 12 	. ~ .
3195  511C FE 28        	cp 028h		;511c	fe 28 	. (
3196  511E 28 17        	jr z,l5137h		;511e	28 17 	( .
3197  5120 FD 96 37     	sub (iy+CopyTrackPtr)		;5120	fd 96 37 	. . 7
3198  5123 FD 96 36     	sub (iy+CopyTrackCount)		;5123	fd 96 36 	. . 6
3199  5126 20 C9        	jr nz,l50f1h		;5126	20 c9 	  .
3200  5128 FD 7E 36     	ld a,(iy+CopyTrackCount)		;5128	fd 7e 36 	. ~ 6
3201  512B FD 86 37     	add a,(iy+CopyTrackPtr)		;512b	fd 86 37 	. . 7
3202  512E FD 77 37     	ld (iy+CopyTrackPtr),a		;512e	fd 77 37 	. w 7
3203  5131 CD 52 5F     	call PowerOff		; Disk power OFF		;5131	cd 52 5f 	. R _
3204  5134 C3 83 50     	jp l5083h		;5134	c3 83 50 	. . P
3205  5137              l5137h:
3206  5137 CD 52 5F     	call PowerOff		; Disk power OFF		;5137	cd 52 5f 	. R _
3207  513A CD 44 51     	call ClearBASIC		;513a	cd 44 51 	. D Q
3208  513D 01 19 1A     	ld bc,SysStartBASIC		;513d	01 19 1a 	. . .
3209  5140 C5           	push bc			;5140	c5 	.
3210  5141 C3 4D 1B     	jp 01b4dh		;5141	c3 4d 1b 	. M .
3211  5144
3212  5144
3213  5144
3214  5144              ;***************************************************************************************************
3215  5144              ; Clear BASIC Program and select D1 drive
3216  5144              ClearBASIC:
3217  5144              ; -- clear BASIC program
3218  5144 21 E9 7A     	ld hl,SYS_BASIC_PRG				; address of first byte of BASIC program 						;5144	21 e9 7a 	! . z
3219  5147 22 A4 78     	ld (SYS_BASIC_START_PTR),hl		; store it as start of current BASIC Program 					;5147	22 a4 78 	" . x
3220  514A              ; -- store two 00 bytes as "end of BASIC" sequence
3221  514A 36 00        	ld (hl),0						; 0 as low byte of address										;514a	36 00 	6 .
3222  514C 23           	inc hl							; next address in memory										;514c	23 	#
3223  514D 36 00        	ld (hl),0						; store 0000 as address of next BASIC line						;514d	36 00 	6 .
3224  514F 23           	inc hl							; next addres after BASIC Program								;514f	23 	#
3225  5150              ; -- set end of BASIC area (including 0 bytes allocated for DIM variables)
3226  5150 22 F9 78     	ld (SYS_BASIC_END_PTR),hl		; store it as end of current BASIC Program 						;5150	22 f9 78 	" . x
3227  5153 22 FB 78     	ld (SYS_ARR_START_PTR),hl		; store it as start of area for BASIC arrays					;5153	22 fb 78 	" . x
3228  5156 22 FD 78     	ld (SYS_ARR_END_PTR),hl			; store it as end of area for BASIC arrays						;5156	22 fd 78 	" . x
3229  5159              ; -- select drive D1
3230  5159 FD 36 0B 10  	ld (iy+SelectedDrive),$10		; select D1 drive												;5159	fd 36 0b 10 	. 6 . .
3231  515D FD 36 39 00  	ld (iy+039h),0		;515d	fd 36 39 00 	. 6 9 .
3232  5161 C9           	ret								; --------------------- End of Proc ---------------------------	;5161	c9 	.
3233  5162
3234  5162
3235  5162              l5162h:
3236  5162 CD 44 51     	call ClearBASIC		;5162	cd 44 51 	. D Q
3237  5165 C3 41 42     	jp DOSError		; Error handling routine	;5165	c3 41 42 	. A B
3238  5168              sub_5168h:
3239  5168 21 EC 51     	ld hl,l51ech		;5168	21 ec 51 	! . Q
3240  516B CD A7 28     	call SysMsgOut		;516b	cd a7 28 	. . (
3241  516E CD 92 51     	call sub_5192h		;516e	cd 92 51 	. . Q
3242  5171 79           	ld a,c			;5171	79 	y
3243  5172 CD 2A 03     	call SysPrintChar		;5172	cd 2a 03 	. * .
3244  5175 E6 03        	and 003h		;5175	e6 03 	. .
3245  5177 FD 77 0D     	ld (iy+CopySrc),a		;5177	fd 77 0d 	. w .
3246  517A 21 00 52     	ld hl,l5200h		;517a	21 00 52 	! . R
3247  517D CD A7 28     	call SysMsgOut		;517d	cd a7 28 	. . (
3248  5180 CD 92 51     	call sub_5192h		;5180	cd 92 51 	. . Q
3249  5183 79           	ld a,c			;5183	79 	y
3250  5184 CD 2A 03     	call SysPrintChar		;5184	cd 2a 03 	. * .
3251  5187 E6 03        	and 003h		;5187	e6 03 	. .
3252  5189 FD 77 10     	ld (iy+CopyDst),a		;5189	fd 77 10 	. w .
3253  518C 3E 0D        	ld a,00dh		;518c	3e 0d 	> .
3254  518E CD 2A 03     	call SysPrintChar		;518e	cd 2a 03 	. * .
3255  5191 C9           	ret			;5191	c9 	.
3256  5192              sub_5192h:
3257  5192 3A AF 7A     	ld a,(07aafh)		;5192	3a af 7a 	: . z
3258  5195 B7           	or a			;5195	b7 	.
3259  5196 20 FA        	jr nz,sub_5192h		;5196	20 fa 	  .
3260  5198 F3           	di			;5198	f3 	.
3261  5199 1E 10        	ld e,010h		;5199	1e 10 	. .
3262  519B 53           	ld d,e			;519b	53 	S
3263  519C 2A 20 78     	ld hl,(07820h)		;519c	2a 20 78 	*   x
3264  519F              l519fh:
3265  519F 3A 00 68     	ld a,(06800h)		;519f	3a 00 68 	: . h
3266  51A2 B7           	or a			;51a2	b7 	.
3267  51A3 FA 9F 51     	jp m,l519fh		;51a3	fa 9f 51 	. . Q
3268  51A6 15           	dec d			;51a6	15 	.
3269  51A7 20 05        	jr nz,l51aeh		;51a7	20 05 	  .
3270  51A9 53           	ld d,e			;51a9	53 	S
3271  51AA 3E 40        	ld a,040h		;51aa	3e 40 	> @
3272  51AC AE           	xor (hl)			;51ac	ae 	.
3273  51AD 77           	ld (hl),a			;51ad	77 	w
3274  51AE              l51aeh:
3275  51AE 3A 00 68     	ld a,(06800h)		;51ae	3a 00 68 	: . h
3276  51B1 B7           	or a			;51b1	b7 	.
3277  51B2 F2 AE 51     	jp p,l51aeh		;51b2	f2 ae 51 	. . Q
3278  51B5 3A DF 68     	ld a,(BreakKeybRow)		;51b5	3a df 68 	: . h
3279  51B8 CB 57        	bit BreakKeyCol,a		;51b8	cb 57 	. W
3280  51BA 20 0F        	jr nz,l51cbh		;51ba	20 0f 	  .
3281  51BC 3A FD 68     	ld a,(068fdh)		;51bc	3a fd 68 	: . h
3282  51BF CB 57        	bit 2,a		;51bf	cb 57 	. W
3283  51C1 20 08        	jr nz,l51cbh		;51c1	20 08 	  .
3284  51C3 CD 44 51     	call ClearBASIC		;51c3	cd 44 51 	. D Q
3285  51C6 3E 11        	ld a,011h		;51c6	3e 11 	> .
3286  51C8 C3 41 42     	jp DOSError		; Error handling routine	;51c8	c3 41 42 	. A B
3287  51CB              l51cbh:
3288  51CB 3A F7 68     	ld a,(068f7h)		;51cb	3a f7 68 	: . h
3289  51CE CB 67        	bit 4,a		;51ce	cb 67 	. g
3290  51D0 0E 31        	ld c,031h		;51d0	0e 31 	. 1
3291  51D2 28 06        	jr z,l51dah		;51d2	28 06 	( .
3292  51D4 CB 4F        	bit 1,a		;51d4	cb 4f 	. O
3293  51D6 0E 32        	ld c,032h		;51d6	0e 32 	. 2
3294  51D8 20 C5        	jr nz,l519fh		;51d8	20 c5 	  .
3295  51DA              l51dah:
3296  51DA C5           	push bc			;51da	c5 	.
3297  51DB 01 64 00     	ld bc,00064h		;51db	01 64 00 	. d .
3298  51DE CD BE 5E     	call DELAYMS		; Delay mS in reg C								;51de	cd be 5e 	. . ^
3299  51E1 C1           	pop bc			;51e1	c1 	.
3300  51E2              l51e2h:
3301  51E2 3A 00 68     	ld a,(06800h)		;51e2	3a 00 68 	: . h
3302  51E5 F6 80        	or 080h		;51e5	f6 80 	. .
3303  51E7 3C           	inc a			;51e7	3c 	<
3304  51E8 20 F8        	jr nz,l51e2h		;51e8	20 f8 	  .
3305  51EA FB           	ei			;51ea	fb 	.
3306  51EB C9           	ret			;51eb	c9 	.
3307  51EC              l51ech:
3308  51EC 0D           	dec c			;51ec	0d 	.
3309  51ED 53           	ld d,e			;51ed	53 	S
3310  51EE 4F           	ld c,a			;51ee	4f 	O
3311  51EF 55           	ld d,l			;51ef	55 	U
3312  51F0 52           	ld d,d			;51f0	52 	R
3313  51F1 43           	ld b,e			;51f1	43 	C
3314  51F2 45           	ld b,l			;51f2	45 	E
3315  51F3 20 44        	jr nz,l5239h		;51f3	20 44 	  D
3316  51F5 49           	ld c,c			;51f5	49 	I
3317  51F6 53           	ld d,e			;51f6	53 	S
3318  51F7 4B           	ld c,e			;51f7	4b 	K
3319  51F8 28 31        	jr z,$+51		;51f8	28 31 	( 1
3320  51FA 2F           	cpl			;51fa	2f 	/
3321  51FB 32 29 3F     	ld (03f29h),a		;51fb	32 29 3f 	2 ) ?
3322  51FE 20 00        	jr nz,l5200h		;51fe	20 00 	  .
3323  5200              l5200h:
3324  5200 0D           	dec c			;5200	0d 	.
3325  5201 44           	ld b,h			;5201	44 	D
3326  5202 45           	ld b,l			;5202	45 	E
3327  5203 53           	ld d,e			;5203	53 	S
3328  5204 54           	ld d,h			;5204	54 	T
3329  5205 49           	ld c,c			;5205	49 	I
3330  5206 4E           	ld c,(hl)			;5206	4e 	N
3331  5207 41           	ld b,c			;5207	41 	A
3332  5208 54           	ld d,h			;5208	54 	T
3333  5209 49           	ld c,c			;5209	49 	I
3334  520A 4F           	ld c,a			;520a	4f 	O
3335  520B 4E           	ld c,(hl)			;520b	4e 	N
3336  520C 20 44        	jr nz,l5252h		;520c	20 44 	  D
3337  520E 49           	ld c,c			;520e	49 	I
3338  520F 53           	ld d,e			;520f	53 	S
3339  5210 4B           	ld c,e			;5210	4b 	K
3340  5211 28 31        	jr z,l5244h		;5211	28 31 	( 1
3341  5213 2F           	cpl			;5213	2f 	/
3342  5214 32 29 3F     	ld (03f29h),a		;5214	32 29 3f 	2 ) ?
3343  5217 20 00        	jr nz,sub_5219h		;5217	20 00 	  .
3344  5219              sub_5219h:
3345  5219 FD 7E 0D     	ld a,(iy+CopySrc)		;5219	fd 7e 0d 	. ~ .
3346  521C CD 84 4D     	call sub_4d84h		;521c	cd 84 4d 	. . M
3347  521F FD BE 10     	cp (iy+CopyDst)		;521f	fd be 10 	. . .
3348  5222 C0           	ret nz			;5222	c0 	.
3349  5223 21 84 52     	ld hl,l5284h		;5223	21 84 52 	! . R
3350  5226              l5226h:
3351  5226 CD A7 28     	call SysMsgOut		;5226	cd a7 28 	. . (
3352  5229 21 9D 52     	ld hl,l529dh		;5229	21 9d 52 	! . R
3353  522C CD A7 28     	call SysMsgOut		;522c	cd a7 28 	. . (
3354  522F              l522fh:
3355  522F 3A AF 7A     	ld a,(07aafh)		;522f	3a af 7a 	: . z
3356  5232 B7           	or a			;5232	b7 	.
3357  5233 20 FA        	jr nz,l522fh		;5233	20 fa 	  .
3358  5235 F3           	di			;5235	f3 	.
3359  5236 1E 10        	ld e,010h		;5236	1e 10 	. .
3360  5238 53           	ld d,e			;5238	53 	S
3361  5239              l5239h:
3362  5239 2A 20 78     	ld hl,(07820h)		;5239	2a 20 78 	*   x
3363  523C              l523ch:
3364  523C 3A 00 68     	ld a,(06800h)		;523c	3a 00 68 	: . h
3365  523F B7           	or a			;523f	b7 	.
3366  5240 FA 3C 52     	jp m,l523ch		;5240	fa 3c 52 	. < R
3367  5243 15           	dec d			;5243	15 	.
3368  5244              l5244h:
3369  5244 20 05        	jr nz,l524bh		;5244	20 05 	  .
3370  5246 53           	ld d,e			;5246	53 	S
3371  5247 3E 40        	ld a,040h		;5247	3e 40 	> @
3372  5249              sub_5249h:
3373  5249 AE           	xor (hl)			;5249	ae 	.
3374  524A 77           	ld (hl),a			;524a	77 	w
3375  524B              l524bh:
3376  524B 3A 00 68     	ld a,(06800h)		;524b	3a 00 68 	: . h
3377  524E B7           	or a			;524e	b7 	.
3378  524F F2 4B 52     	jp p,l524bh		;524f	f2 4b 52 	. K R
3379  5252              l5252h:
3380  5252 3A DF 68     	ld a,(BreakKeybRow)		;5252	3a df 68 	: . h
3381  5255 CB 57        	bit BreakKeyCol,a		;5255	cb 57 	. W
3382  5257 20 0F        	jr nz,l5268h		;5257	20 0f 	  .
3383  5259 3A FD 68     	ld a,(068fdh)		;5259	3a fd 68 	: . h
3384  525C CB 57        	bit 2,a		;525c	cb 57 	. W
3385  525E 20 08        	jr nz,l5268h		;525e	20 08 	  .
3386  5260 CD 44 51     	call ClearBASIC		;5260	cd 44 51 	. D Q
3387  5263 3E 11        	ld a,011h		;5263	3e 11 	> .
3388  5265 C3 41 42     	jp DOSError		; Error handling routine	;5265	c3 41 42 	. A B
3389  5268              l5268h:
3390  5268 3A EF 68     	ld a,(SpaceKeyRow)		;5268	3a ef 68 	: . h
3391  526B CB 67        	bit SpaceKeyCol,a		;526b	cb 67 	. g
3392  526D 20 CD        	jr nz,l523ch		;526d	20 cd 	  .
3393  526F 3A 3C 78     	ld a,(0783ch)		;526f	3a 3c 78 	: < x
3394  5272 77           	ld (hl),a			;5272	77 	w
3395  5273 FB           	ei			;5273	fb 	.
3396  5274 C9           	ret			;5274	c9 	.
3397  5275              sub_5275h:
3398  5275 FD 7E 10     	ld a,(iy+CopyDst)		;5275	fd 7e 10 	. ~ .
3399  5278 CD 84 4D     	call sub_4d84h		;5278	cd 84 4d 	. . M
3400  527B FD BE 0D     	cp (iy+CopySrc)		;527b	fd be 0d 	. . .
3401  527E C0           	ret nz			;527e	c0 	.
3402  527F 21 B7 52     	ld hl,l52b7h		;527f	21 b7 52 	! . R
3403  5282 18 A2        	jr l5226h		;5282	18 a2 	. .
3404  5284              l5284h:
3405  5284 0D           	dec c			;5284	0d 	.
3406  5285 49           	ld c,c			;5285	49 	I
3407  5286 4E           	ld c,(hl)			;5286	4e 	N
3408  5287 53           	ld d,e			;5287	53 	S
3409  5288 45           	ld b,l			;5288	45 	E
3410  5289 52           	ld d,d			;5289	52 	R
3411  528A 54           	ld d,h			;528a	54 	T
3412  528B 20 53        	jr nz,$+85		;528b	20 53 	  S
3413  528D 4F           	ld c,a			;528d	4f 	O
3414  528E 55           	ld d,l			;528e	55 	U
3415  528F 52           	ld d,d			;528f	52 	R
3416  5290 43           	ld b,e			;5290	43 	C
3417  5291 45           	ld b,l			;5291	45 	E
3418  5292 20 44        	jr nz,$+70		;5292	20 44 	  D
3419  5294 49           	ld c,c			;5294	49 	I
3420  5295 53           	ld d,e			;5295	53 	S
3421  5296 4B           	ld c,e			;5296	4b 	K
3422  5297 45           	ld b,l			;5297	45 	E
3423  5298 54           	ld d,h			;5298	54 	T
3424  5299 54           	ld d,h			;5299	54 	T
3425  529A 45           	ld b,l			;529a	45 	E
3426  529B 0D           	dec c			;529b	0d 	.
3427  529C 00           	nop			;529c	00 	.
3428  529D              l529dh:
3429  529D 28 50        	jr z,$+82		;529d	28 50 	( P
3430  529F 52           	ld d,d			;529f	52 	R
3431  52A0 45           	ld b,l			;52a0	45 	E
3432  52A1 53           	ld d,e			;52a1	53 	S
3433  52A2 53           	ld d,e			;52a2	53 	S
3434  52A3 20 53        	jr nz,$+85		;52a3	20 53 	  S
3435  52A5 50           	ld d,b			;52a5	50 	P
3436  52A6 41           	ld b,c			;52a6	41 	A
3437  52A7 43           	ld b,e			;52a7	43 	C
3438  52A8 45           	ld b,l			;52a8	45 	E
3439  52A9 20 57        	jr nz,l5302h		;52a9	20 57 	  W
3440  52AB 48           	ld c,b			;52ab	48 	H
3441  52AC 45           	ld b,l			;52ac	45 	E
3442  52AD 4E           	ld c,(hl)			;52ad	4e 	N
3443  52AE 20 52        	jr nz,l5302h		;52ae	20 52 	  R
3444  52B0 45           	ld b,l			;52b0	45 	E
3445  52B1 41           	ld b,c			;52b1	41 	A
3446  52B2 44           	ld b,h			;52b2	44 	D
3447  52B3 59           	ld e,c			;52b3	59 	Y
3448  52B4 29           	add hl,hl			;52b4	29 	)
3449  52B5 0D           	dec c			;52b5	0d 	.
3450  52B6 00           	nop			;52b6	00 	.
3451  52B7              l52b7h:
3452  52B7 0D           	dec c			;52b7	0d 	.
3453  52B8 49           	ld c,c			;52b8	49 	I
3454  52B9 4E           	ld c,(hl)			;52b9	4e 	N
3455  52BA 53           	ld d,e			;52ba	53 	S
3456  52BB 45           	ld b,l			;52bb	45 	E
3457  52BC 52           	ld d,d			;52bc	52 	R
3458  52BD 54           	ld d,h			;52bd	54 	T
3459  52BE 20 44        	jr nz,$+70		;52be	20 44 	  D
3460  52C0 45           	ld b,l			;52c0	45 	E
3461  52C1 53           	ld d,e			;52c1	53 	S
3462  52C2 54           	ld d,h			;52c2	54 	T
3463  52C3 49           	ld c,c			;52c3	49 	I
3464  52C4 4E           	ld c,(hl)			;52c4	4e 	N
3465  52C5 41           	ld b,c			;52c5	41 	A
3466  52C6 54           	ld d,h			;52c6	54 	T
3467  52C7 49           	ld c,c			;52c7	49 	I
3468  52C8 4F           	ld c,a			;52c8	4f 	O
3469  52C9 4E           	ld c,(hl)			;52c9	4e 	N
3470  52CA 20 44        	jr nz,l5310h		;52ca	20 44 	  D
3471  52CC 49           	ld c,c			;52cc	49 	I
3472  52CD 53           	ld d,e			;52cd	53 	S
3473  52CE 4B           	ld c,e			;52ce	4b 	K
3474  52CF 45           	ld b,l			;52cf	45 	E
3475  52D0 54           	ld d,h			;52d0	54 	T
3476  52D1 54           	ld d,h			;52d1	54 	T
3477  52D2 45           	ld b,l			;52d2	45 	E
3478  52D3 0D           	dec c			;52d3	0d 	.
3479  52D4 00           	nop			;52d4	00 	.
3480  52D5
3481  52D5
3482  52D5              ;***************************************************************************************************
3483  52D5              ; DOS Command STATUS
3484  52D5              ; Syntax: STATUS
3485  52D5              ; ------------------
3486  52D5              ; Display free space left on Disk as number of free sectors and free space in kilobytes.
3487  52D5              ; For Example:
3488  52D5              ;  	624 RECORDS FREE
3489  52D5              ;  	78.0K BYTES FREE
3490  52D5              DCmdSTATUS:
3491  52D5 E5           	push hl			;52d5	e5 	.
3492  52D6 F3           	di			;52d6	f3 	.
3493  52D7 CD 41 5F     	call PowerOn		; Disk power ON			;52d7	cd 41 5f 	. A _
3494  52DA C5           	push bc			;52da	c5 	.
3495  52DB 01 32 00     	ld bc,00032h		;52db	01 32 00 	. 2 .
3496  52DE CD BE 5E     	call DELAYMS		; Delay mS in reg C								;52de	cd be 5e 	. . ^
3497  52E1 C1           	pop bc			;52e1	c1 	.
3498  52E2 FD 36 12 00  	ld (iy+UserTrackNo),000h		;52e2	fd 36 12 00 	. 6 . .
3499  52E6 FD 36 11 0F  	ld (iy+UserSectorNo),00fh		;52e6	fd 36 11 0f 	. 6 . .
3500  52EA CD 27 5B     	call READSECTOR		; Read a sector from disk						;52ea	cd 27 5b 	. ' [
3501  52ED B7           	or a			;52ed	b7 	.
3502  52EE C2 41 42     	jp nz,DOSError		; Error handling routine	;52ee	c2 41 42 	. A B
3503  52F1 CD 52 5F     	call PowerOff		; Disk power OFF		;52f1	cd 52 5f 	. R _
3504  52F4 FD 6E 31     	ld l,(iy+DataBuf)		;52f4	fd 6e 31 	. n 1
3505  52F7 FD 66 32     	ld h,(iy+DataBuf+1)		;52f7	fd 66 32 	. f 2
3506  52FA 1E 00        	ld e,000h		;52fa	1e 00 	. .
3507  52FC 16 00        	ld d,000h		;52fc	16 00 	. .
3508  52FE 0E 4E        	ld c,04eh		;52fe	0e 4e 	. N
3509  5300              l5300h:
3510  5300 06 08        	ld b,008h		;5300	06 08 	. .
3511  5302              l5302h:
3512  5302 7E           	ld a,(hl)			;5302	7e 	~
3513  5303              l5303h:
3514  5303 CB 0F        	rrc a		;5303	cb 0f 	. .
3515  5305 38 01        	jr c,l5308h		;5305	38 01 	8 .
3516  5307 13           	inc de			;5307	13 	.
3517  5308              l5308h:
3518  5308 10 F9        	djnz l5303h		;5308	10 f9 	. .
3519  530A 23           	inc hl			;530a	23 	#
3520  530B 0D           	dec c			;530b	0d 	.
3521  530C 20 F2        	jr nz,l5300h		;530c	20 f2 	  .
3522  530E 6B           	ld l,e			;530e	6b 	k
3523  530F 62           	ld h,d			;530f	62 	b
3524  5310              l5310h:
3525  5310 E5           	push hl			;5310	e5 	.
3526  5311 CD AF 0F     	call 00fafh		;5311	cd af 0f 	. . .
3527  5314 21 4A 53     	ld hl,MSG_RecordsFree		;5314	21 4a 53 	! J S
3528  5317 CD A7 28     	call SysMsgOut		;5317	cd a7 28 	. . (
3529  531A E1           	pop hl			;531a	e1 	.
3530  531B E5           	push hl			;531b	e5 	.
3531  531C CB 3C        	srl h		;531c	cb 3c 	. <
3532  531E CB 1D        	rr l		;531e	cb 1d 	. .
3533  5320 CB 3C        	srl h		;5320	cb 3c 	. <
3534  5322 CB 1D        	rr l		;5322	cb 1d 	. .
3535  5324 CB 3C        	srl h		;5324	cb 3c 	. <
3536  5326 CB 1D        	rr l		;5326	cb 1d 	. .
3537  5328 CD AF 0F     	call 00fafh		;5328	cd af 0f 	. . .
3538  532B 3E 2E        	ld a,02eh		;532b	3e 2e 	> .
3539  532D CD 2A 03     	call SysPrintChar		;532d	cd 2a 03 	. * .
3540  5330 E1           	pop hl			;5330	e1 	.
3541  5331 3E 07        	ld a,007h		;5331	3e 07 	> .
3542  5333 A5           	and l			;5333	a5 	.
3543  5334 3C           	inc a			;5334	3c 	<
3544  5335 47           	ld b,a			;5335	47 	G
3545  5336 21 83 FF     	ld hl,0ff83h		;5336	21 83 ff 	! . .
3546  5339 11 7D 00     	ld de,0007dh		;5339	11 7d 00 	. } .
3547  533C              l533ch:
3548  533C 19           	add hl,de			;533c	19 	.
3549  533D 10 FD        	djnz l533ch		;533d	10 fd 	. .
3550  533F CD AF 0F     	call 00fafh		;533f	cd af 0f 	. . .
3551  5342 21 59 53     	ld hl,MSG_KBytesFree		;5342	21 59 53 	! Y S
3552  5345 CD A7 28     	call SysMsgOut		;5345	cd a7 28 	. . (
3553  5348 E1           	pop hl			;5348	e1 	.
3554  5349 C9           	ret			;5349	c9 	.
3555  534A
3556  534A              MSG_RecordsFree:
3557  534A 20 52 45 43  	db " RECORDS FREE",CR,0		;534a	20 52 45 43 4f 52 44 53 20 46 52 45 45 0d 00
3557  534E 4F 52 44 53
3557  5352 20 46 52 45
3557  5356 45 0D 00
3558  5359              MSG_KBytesFree:
3559  5359 4B 20 42 59  	db "K BYTES FREE",CR,0		;5359	4b 20 42 59 54 45 53 20 46 52 45 45 0d 00
3559  535D 54 45 53 20
3559  5361 46 52 45 45
3559  5365 0D 00
3560  5367
3561  5367
3562  5367              ;***************************************************************************************************
3563  5367              ; Command string interpreter
3564  5367              ; This subroutine reads the user specified filename and puts into IY+FNAM if the syntax is correct.
3565  5367              ; IN: hl - Input text typed by user enclosed with '"' chars
3566  5367              ; OUT: a - Error code
3567  5367              ;     hl - address of next char after filename
3568  5367              ;***************************************************************************************************
3569  5367              CSI:
3570  5367 CD 78 53     	call ParseFilename				; verify syntax and copy filename to DOS Filename Buffer		;5367	cd 78 53 	. x S
3571  536A B7           	or a							; is Error 0? - No Error										;536a	b7 	.
3572  536B C2 41 42     	jp nz,DOSError					; no - jump to Error handling routine -------------------------	;536b	c2 41 42 	. A B
3573  536E              ; -- filename is copied - hl points to next char after filename
3574  536E 7E           	ld a,(hl)						; a - next char in command or BASIC line						;536e	7e 	~
3575  536F B7           	or a							; is it 0? - end of cmd/BASIC line?								;536f	b7 	.
3576  5370 C8           	ret z							; yes - ------------ End of Proc ------------------------------ ;5370	c8 	.
3577  5371              ; -- inside BASIC line ':' char separates statements
3578  5371 FE 3A        	cp ':'							; is it ':' char? - end of BASIC statement?						;5371	fe 3a 	. :
3579  5373 C2 97 19     	jp nz,SysRaiseSyntaxError		; no -  Raise BASIC Syntax Error routine ----------------------	;5373	c2 97 19 	. . .
3580  5376              ; -- correct statement - return with No Error
3581  5376 AF           	xor a							; a - Error Code 00 - No Error									;5376	af 	.
3582  5377 C9           	ret								; ----------------- End of Proc -------------------------------	;5377	c9 	.
3583  5378
3584  5378              ;***************************************************************************************************
3585  5378              ; Parse Filename
3586  5378              ; Verify syntax and copy filename to DOS Filename Buffer
3587  5378              ; IN: iy - DOS base address
3588  5378              ;     hl - filename text enclosed with '"' chars
3589  5378              ; OUT: a - Error code
3590  5378              ParseFilename:
3591  5378              ; -- fill DOS Filename buffer (8 chars) with ' ' char
3592  5378 FD E5        	push iy							; save iy - DOS base address									;5378	fd e5 	. .
3593  537A 06 08        	ld b,8							; filename is 8 chars length 									;537a	06 08 	. .
3594  537C              .next:
3595  537C FD 36 01 20  	ld (iy+Filename),' '			; store space char into Filename Buffor							;537c	fd 36 01 20 	. 6 .
3596  5380 FD 23        	inc iy							; increment pointer for next char								;5380	fd 23 	. #
3597  5382 10 F8        	djnz .next						; fill all 8 bytes with ' ' char	 							;5382	10 f8 	. .
3598  5384 FD E1        	pop iy							; restore iy - DOS base address									;5384	fd e1 	. .
3599  5386
3600  5386              ; -- skip trailing spaces
3601  5386              .testNext:
3602  5386 7E           	ld a,(hl)						; a - char typed by user										;5386	7e 	~
3603  5387 23           	inc hl							; increment for next char										;5387	23 	#
3604  5388 FE 20        	cp  ' '							; is it space char?												;5388	fe 20 	.
3605  538A 28 FA        	jr z,.testNext					; yes - keep skipping											;538a	28 fa 	( .
3606  538C              ; -- char other than ' '
3607  538C 2B           	dec hl							; point hl to this char (other than ' ')						;538c	2b 	+
3608  538D CF           	rst 8							; verify this char is '"' (double quote) and point hl to next	;538d	cf 	.
3609  538E 22           	defb '"'						; expected char													;538e	22
3610  538F 06 08        	ld b,8							; filename has no more than 8 chars max							;538f	06 08 	" . .
3611  5391              ; -- test if filename is empty - Syntax Error
3612  5391 7E           	ld a,(hl)						; a - next char typed by user									;5391	7e 	~
3613  5392 FE 22        	cp '"'							; is it also '"' (double quote)?								;5392	fe 22 	. "
3614  5394 20 03        	jr nz,.copyChars				; no - copy filename to DOS filename buffer						;5394	20 03 	  .
3615  5396              .exitSyntaxError:
3616  5396 3E 01        	ld a,1							; a - Error Code 01 - SYNTAX ERROR								;5396	3e 01 	> .
3617  5398 C9           	ret								; --------------- End of Proc (with Error 1) ------------------	;5398	c9 	.
3618  5399
3619  5399              .copyChars:
3620  5399              ; -- copy filename (max 8 chars) to DOS Filename Buffer
3621  5399 FD E5        	push iy							; save iy - DOS base address									;5399	fd e5 	. .
3622  539B              .copyNext:
3623  539B 7E           	ld a,(hl)						; a - char of filename typed by user							;539b	7e 	~
3624  539C 23           	inc hl							; point to next char											;539c	23 	#
3625  539D FE 22        	cp '"'							; is it '"' (double quote) char? - end of filename text			;539d	fe 22 	. "
3626  539F 28 14        	jr z,.exitNoErrPopIY			; yes - return with No Error (0) - No Error -------------------	;539f	28 14 	( .
3627  53A1 FD 77 01     	ld (iy+Filename),a				; store filename char in DOS Filename Buffer					;53a1	fd 77 01 	. w .
3628  53A4 FD 23        	inc iy							; increment for next byte in filename Buffer					;53a4	fd 23 	. #
3629  53A6 10 F3        	djnz .copyNext					; copy next char if the max length (8 char) is not exceeded		;53a6	10 f3 	. .
3630  53A8
3631  53A8              ; -- ignore any following chars until closing '"' char or 0 terminator
3632  53A8 FD E1        	pop iy							; restore iy - DOS base address									;53a8	fd e1 	. .
3633  53AA              .checkNext:
3634  53AA 7E           	ld a,(hl)						; a - char of filename typed by user							;53aa	7e 	~
3635  53AB 23           	inc hl							; point to nextt char											;53ab	23 	#
3636  53AC B7           	or a							; is it 0? - end of text w/o closing '"' char					;53ac	b7 	.
3637  53AD 28 E7        	jr z,.exitSyntaxError			; yes - return with Error 01 - SYNTAX ERROR	-------------------	;53ad	28 e7 	( .
3638  53AF FE 22        	cp '"'							; is it '"' (double quote) closing char?						;53af	fe 22 	. "
3639  53B1 28 04        	jr z,.exitNoError				; yes - return with No Error (0) - No Error -------------------	;53b1	28 04 	( .
3640  53B3 18 F5        	jr .checkNext					; other char - continue skipping chars							;53b3	18 f5 	. .
3641  53B5              .exitNoErrPopIY:
3642  53B5 FD E1        	pop iy							; restore iy - DOS base address									;53b5	fd e1 	. .
3643  53B7              .exitNoError:
3644  53B7 AF           	xor a							; a - Error 00 - No Error										;53b7	af 	.
3645  53B8 C9           	ret								; ------------------ End of Proc ------------------------------	;53b8	c9 	.
3646  53B9
3647  53B9
3648  53B9
3649  53B9              ;*******************************************************************************************************************
3650  53B9              ; Convert ASCII to HEX
3651  53B9              ; This subroutine converts 4 bytes of ASCII pointed to by HL into DE reg pair.
3652  53B9              ; IN: hl - address of 4 ASCII chars
3653  53B9              ; OUT: CY flag - 1 if Error, 0 if no error
3654  53B9              ;      de - converted value (2 bytes/4 nibbles)
3655  53B9              ;	   hl - address of next byte after sequence
3656  53B9              ;*******************************************************************************************************************
3657  53B9              Asc2Hex:
3658  53B9 CD C1 53     	call .conv2Chars				; e - converted 2 chars 										;53b9	cd c1 53 	. . S
3659  53BC D8           	ret c							; return if Error												;53bc	d8 	.
3660  53BD 53           	ld d,e							; move converted value to high byte								;53bd	53 	S
3661  53BE C3 C1 53     	jp .conv2Chars					; e - covvert 2 chars and return								;53be	c3 c1 53 	. . S
3662  53C1
3663  53C1              ; -- convert 2 chars into 1 byte with value
3664  53C1              .conv2Chars:
3665  53C1              ; -- take first char and convert it to 4 bit value
3666  53C1 7E           	ld a,(hl)						; a - char to convert											;53c1	7e 	~
3667  53C2 23           	inc hl							; hl - address of next char										;53c2	23 	#
3668  53C3 CD D5 53     	call .conv1Char					; convert char into low 4 bits of a								;53c3	cd d5 53 	. . S
3669  53C6 D8           	ret c							; return if Error												;53c6	d8 	.
3670  53C7              ; -- move 4 bits to high nibble of byte
3671  53C7 17           	rla								; shift bits 3..0 to 7..4										;53c7	17 	.
3672  53C8 17           	rla																								;53c8	17 	.
3673  53C9 17           	rla																								;53c9	17 	.
3674  53CA 17           	rla																								;53ca	17 	.
3675  53CB 5F           	ld e,a							; store converted to e											;53cb	5f 	_
3676  53CC              ; -- take second char and convert it to 4 bit value
3677  53CC 7E           	ld a,(hl)						; a - next char to convert										;53cc	7e 	~
3678  53CD 23           	inc hl							; hl - address of next char										;53cd	23 	#
3679  53CE CD D5 53     	call .conv1Char					; convert char into low 4 bits of a								;53ce	cd d5 53 	. . S
3680  53D1 D8           	ret c							; return if Error												;53d1	d8 	.
3681  53D2              ; -- combine low and high nibbles into 1 byte
3682  53D2 B3           	or e							; add stored bits 7..4 											;53d2	b3 	.
3683  53D3 5F           	ld e,a							; e - 2 chars converted											;53d3	5f 	_
3684  53D4 C9           	ret								; -------------------- End of Proc ----------------------------	;53d4	c9 	.
3685  53D5              .conv1Char:
3686  53D5              ; -- chars '0'..'9'
3687  53D5 FE 30        	cp '0'							; check if less than '0' (illegal char)							;53d5	fe 30 	. 0
3688  53D7 D8           	ret c							; yes - return with Error										;53d7	d8 	.
3689  53D8 FE 3A        	cp '9'+1						; check if greater than '9' - can be 'A'..'F'					;53d8	fe 3a 	. :
3690  53DA 30 03        	jr nc,.tryAtoF					; yes - try 'A'..'F'											;53da	30 03 	0 .
3691  53DC              ; -- chars '0'..'9' contain its numeric value in low nibble
3692  53DC E6 0F        	and %00001111					; mask 4 lower bits -> ('0' becomes 0, '1'->1,etc)				;53dc	e6 0f 	. .
3693  53DE C9           	ret								; -------------------- End of Proc ----------------------------	;53de	c9 	.
3694  53DF              .tryAtoF:
3695  53DF              ; -- chars 'A'..'F'
3696  53DF FE 41        	cp 'A'							; check if less than 'A' (illegal char)							;53df	fe 41 	. A
3697  53E1 D8           	ret c							; yes - return with Error										;53e1	d8 	.
3698  53E2 FE 47        	cp 'F'+1						; check if greater than 'F' (illegal char)						;53e2	fe 47 	. G
3699  53E4 30 02        	jr nc,.exit						; yes - set Carry Flag (error) and return						;53e4	30 02 	0 .
3700  53E6              ; -- chars 'A'..'F' can be convert by substract 'A' (65) and add 10
3701  53E6 C6 C9        	add a,-55						; convert 'A'->10 ($A), 'B'->11 ($B), etc						;53e6	c6 c9 	. .
3702  53E8              ; -- since above operation sets CY flag, below inversion will clear it - No Error
3703  53E8              .exit:
3704  53E8 3F           	ccf								; invert CY flag 												;53e8	3f 	?
3705  53E9 C9           	ret								; -------------------- End of Proc ----------------------------	;53e9	c9 	.
3706  53EA
3707  53EA
3708  53EA
3709  53EA              ;***************************************************************************************************
3710  53EA              ; Search for identification address mark (IDAM) of the disk
3711  53EA              ; IN: (iy+UserTrackNo) - requested track
3712  53EA              ;     (iy+UserSectorNo)	- requested sector
3713  53EA              ; OUT: a - Error Code (0 - Success)
3714  53EA              ;***************************************************************************************************
3715  53EA              ReadIDAddressMark:
3716  53EA 26 A5        	ld h,165						; set Sector Try Counter - try to find Sector 165 times			;53ea	26 a5 	& .
3717  53EC 2E 0A        	ld l,10							; set Try Counter - try to read 10 times						;53ec	2e 0a 	. .
3718  53EE 18 0B        	jr RAM_SetTrack					; set requested Track on Drive and start read					;53ee	18 0b 	. .
3719  53F0              ResetTrackTo0:
3720  53F0 2E 0A        	ld l,10							; set Try Counter - try to read 10 times						;53f0	2e 0a 	. .
3721  53F2 FD 36 38 11  	ld (iy+StepPhase),%00010001		; reset Step Motor lines to 0001-0001 							;53f2	fd 36 38 11 	. 6 8 .
3722  53F6              ; -- move Head to Track 00
3723  53F6 06 28        	ld b,40							; max 40 tracks to Step Out										;53f6	06 28 	. (
3724  53F8 CD 01 5F     	call STEPOUT					; Track step out												;53f8	cd 01 5f 	. . _
3725  53FB
3726  53FB
3727  53FB              ;***************************************************************************************************
3728  53FB              ; Setup Floppy Drive to Read requested Track
3729  53FB              RAM_SetTrack:
3730  53FB FD 7E 12     	ld a,(iy+UserTrackNo)			; a - requested track number									;53fb	fd 7e 12 	. ~ .
3731  53FE FD 96 14     	sub (iy+CurTrackNo)				; calculate difference (tracks to step in/out)					;53fe	fd 96 14 	. . .
3732  5401 28 1A        	jr z,RAM_TrackIsSet				; no difference - track is already set							;5401	28 1a 	( .
3733  5403 F2 11 54     	jp p,RAM_NeedStepIn				; reqested track is greater - need to Step In 					;5403	f2 11 54 	. . T
3734  5406              ; -- requested track is less than current - need to Step Out
3735  5406 ED 44        	neg								; get positive value of difference								;5406	ed 44 	. D
3736  5408 47           	ld b,a							; b - number of tracks to Step Out								;5408	47 	G
3737  5409 CD 01 5F     	call STEPOUT					; move R/W Head on drive to req track							;5409	cd 01 5f 	. . _
3738  540C 18 0F        	jr RAM_TrackIsSet				; track is set - calculate T+S checksum and start read	 		;540c	18 0f 	. .
3739  540E              RAM_BreakExit:
3740  540E C3 A4 5E     	jp WaitBreakKeyReleased			; Wait for Break key released									;540e	c3 a4 5e 	. . ^
3741  5411              RAM_NeedStepIn:
3742  5411              ; -- reqested track is greater than current - need to Step In
3743  5411 47           	ld b,a							; b - number of tracks to Step In								;5411	47 	G
3744  5412 CD CE 5E     	call STEPIN						; move R/W Head on drive to req track							;5412	cd ce 5e 	. . ^
3745  5415              ; -- wait delay 100 ms
3746  5415 C5           	push bc							; save bc														;5415	c5 	.
3747  5416 01 64 00     	ld bc,100						; 100 ms to delay												;5416	01 64 00 	. d .
3748  5419 CD BE 5E     	call DELAYMS					; wait 100 ms delay												;5419	cd be 5e 	. . ^
3749  541C C1           	pop bc							; restore bc													;541c	c1 	.
3750  541D              RAM_TrackIsSet:
3751  541D 0E 12        	ld c,FLPOOL						; I/O Port address to pool clock		 						;541d	0e 12 	. .
3752  541F              ; -- calculate expected checksum (track number + sector number)
3753  541F FD 7E 12     	ld a,(iy+UserTrackNo)			; a - track number												;541f	fd 7e 12 	. ~ .
3754  5422 FD 86 11     	add a,(iy+UserSectorNo)			; add - sector number											;5422	fd 86 11 	. . .
3755  5425 57           	ld d,a							; d = checksum													;5425	57 	W
3756  5426 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register)				;5426	db 11 	. .
3757  5428              RAM_Wait:
3758  5428              ; -- wait for FDC Clock Pulse
3759  5428 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5428	ed 78 	. x
3760  542A F2 28 54     	jp p,RAM_Wait					; wait until Clock BIt = 1										;542a	f2 28 54 	. ( T
3761  542D 00           	nop								; spare 16 clock cycles - short delay							;542d	00 	.
3762  542E 00           	nop																								;542e	00 	.
3763  542F 00           	nop																								;542f	00 	.
3764  5430 00           	nop																								;5430	00 	.
3765  5431
3766  5431
3767  5431              ;***************************************************************************************************
3768  5431              ; Find GAP1
3769  5431              ; Read incomming bistream from Floppy Disk until $80 value is found or BREAK key pressed
3770  5431              ; NOTE: In order to read 1 byte from FDC we have to read FLDATA register 8 times (bit by bit)
3771  5431              ;       FLDATA hardware register will be shifted every time we read it.
3772  5431
3773  5431              ; ---------- [1] --- read bits from Disk until $80 received
3774  5431              RAM_WaitFor80:
3775  5431              ; -- test if BREAK key is pressed
3776  5431 3A DF 68     	ld a,(BreakKeybRow)				; read Keyboard Row with BREAK key								;5431	3a df 68 	: . h
3777  5434 E6 04        	and BreakKeybMask				; mask only BREAK key - if 0 -> key is pressed					;5434	e6 04 	. .
3778  5436 28 D6        	jr z,RAM_BreakExit				; yes - exit reading											;5436	28 d6 	( .
3779  5438
3780  5438              ; -- read data (bit)
3781  5438 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register)				;5438	db 11 	. .
3782  543A 47           	ld b,a							; b - store byte 												;543a	47 	G
3783  543B              .waitClockBit:
3784  543B              ; -- wait for FDC Clock Pulse
3785  543B ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;543b	ed 78 	. x
3786  543D F2 3B 54     	jp p,.waitClockBit				; wait until Clock BIt = 1										;543d	f2 3b 54 	. ; T
3787  5440              ; -- test if we have $80 received
3788  5440 78           	ld a,b							; byte being received											;5440	78 	x
3789  5441 FE 80        	cp $80							; is this $80 - GAP1 start sequence								;5441	fe 80 	. .
3790  5443 C2 31 54     	jp nz,RAM_WaitFor80				; no - keep reding until $80 received (or BREAK key pressed)	;5443	c2 31 54 	. 1 T
3791  5446
3792  5446              ; -- we have $80 received - next byte can be:
3793  5446              ; $80 - still GAP1 byte -> keep reading
3794  5446              ; other - end of GAP1 -> go to IDAM sequence read
3795  5446              RAM_ReadByte:
3796  5446 00           	nop								; delay 4 clock cycles											;5446	00 	.
3797  5447 00           	nop								; delay 4 clock cycles											;5447	00 	.
3798  5448 00           	nop								; delay 4 clock cycles											;5448	00 	.
3799  5449 3E 00        	ld a,0							; delay 7 clock cycles											;5449	3e 00 	> .
3800  544B 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;544b	3e 00 	> .
3801  544D DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;544d	db 11 	. .
3802  544F              .waitClockBit1:
3803  544F              ; -- wait for FDC Clock Pulse
3804  544F ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;544f	ed 78 	. x
3805  5451 F2 4F 54     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5451	f2 4f 54 	. O T
3806  5454 2B           	dec hl							; delay 6 clock cycles											;5454	2b 	+
3807  5455 23           	inc hl							; delay 6 clock cycles											;5455	23 	#
3808  5456 2B           	dec hl							; delay 6 clock cycles											;5456	2b 	+
3809  5457 23           	inc hl							; delay 6 clock cycles											;5457	23 	#
3810  5458 2B           	dec hl							; delay 6 clock cycles											;5458	2b 	+
3811  5459 23           	inc hl							; delay 6 clock cycles											;5459	23 	#
3812  545A 00           	nop								; delay 4 clock cycles											;545a	00 	.
3813  545B 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;545b	3e 00 	> .
3814  545D DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;545d	db 11 	. .
3815  545F              .waitClockBit2:
3816  545F              ; -- wait for FDC Clock Pulse
3817  545F ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;545f	ed 78 	. x
3818  5461 F2 5F 54     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5461	f2 5f 54 	. _ T
3819  5464 2B           	dec hl							; delay 6 clock cycles											;5464	2b 	+
3820  5465 23           	inc hl							; delay 6 clock cycles											;5465	23 	#
3821  5466 2B           	dec hl							; delay 6 clock cycles											;5466	2b 	+
3822  5467 23           	inc hl							; delay 6 clock cycles											;5467	23 	#
3823  5468 2B           	dec hl							; delay 6 clock cycles											;5468	2b 	+
3824  5469 23           	inc hl							; delay 6 clock cycles											;5469	23 	#
3825  546A 00           	nop								; delay 4 clock cycles											;546a	00 	.
3826  546B 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;546b	3e 00 	> .
3827  546D DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;546d	db 11 	. .
3828  546F              .waitClockBit3:
3829  546F              ; -- wait for FDC Clock Pulse
3830  546F ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;546f	ed 78 	. x
3831  5471 F2 6F 54     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5471	f2 6f 54 	. o T
3832  5474 2B           	dec hl							; delay 6 clock cycles											;5474	2b 	+
3833  5475 23           	inc hl							; delay 6 clock cycles											;5475	23 	#
3834  5476 2B           	dec hl							; delay 6 clock cycles											;5476	2b 	+
3835  5477 23           	inc hl							; delay 6 clock cycles											;5477	23 	#
3836  5478 2B           	dec hl							; delay 6 clock cycles											;5478	2b 	+
3837  5479 23           	inc hl							; delay 6 clock cycles											;5479	23 	#
3838  547A 00           	nop								; delay 4 clock cycles											;547a	00 	.
3839  547B 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;547b	3e 00 	> .
3840  547D DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;547d	db 11 	. .
3841  547F              .waitClockBit4:
3842  547F              ; -- wait for FDC Clock Pulse
3843  547F ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;547f	ed 78 	. x
3844  5481 F2 7F 54     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5481	f2 7f 54 	.  T
3845  5484 2B           	dec hl							; delay 6 clock cycles											;5484	2b 	+
3846  5485 23           	inc hl							; delay 6 clock cycles											;5485	23 	#
3847  5486 2B           	dec hl							; delay 6 clock cycles											;5486	2b 	+
3848  5487 23           	inc hl							; delay 6 clock cycles											;5487	23 	#
3849  5488 2B           	dec hl							; delay 6 clock cycles											;5488	2b 	+
3850  5489 23           	inc hl							; delay 6 clock cycles											;5489	23 	#
3851  548A 00           	nop								; delay 6 clock cycles											;548a	00 	.
3852  548B 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;548b	3e 00 	> .
3853  548D DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;548d	db 11 	. .
3854  548F              .waitClockBit5:
3855  548F              ; -- wait for FDC Clock Pulse
3856  548F ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;548f	ed 78 	. x
3857  5491 F2 8F 54     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5491	f2 8f 54 	. . T
3858  5494 2B           	dec hl							; delay 6 clock cycles											;5494	2b 	+
3859  5495 23           	inc hl							; delay 6 clock cycles											;5495	23 	#
3860  5496 2B           	dec hl							; delay 6 clock cycles											;5496	2b 	+
3861  5497 23           	inc hl							; delay 6 clock cycles											;5497	23 	#
3862  5498 2B           	dec hl							; delay 6 clock cycles											;5498	2b 	+
3863  5499 23           	inc hl							; delay 6 clock cycles											;5499	23 	#
3864  549A 00           	nop								; delay 4 clock cycles											;549a	00 	.
3865  549B 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;549b	3e 00 	> .
3866  549D DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;549d	db 11 	. .
3867  549F              .waitClockBit6:
3868  549F              ; -- wait for FDC Clock Pulse
3869  549F ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;549f	ed 78 	. x
3870  54A1 F2 9F 54     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;54a1	f2 9f 54 	. . T
3871  54A4 2B           	dec hl							; delay 6 clock cycles											;54a4	2b 	+
3872  54A5 23           	inc hl							; delay 6 clock cycles											;54a5	23 	#
3873  54A6 2B           	dec hl							; delay 6 clock cycles											;54a6	2b 	+
3874  54A7 23           	inc hl							; delay 6 clock cycles											;54a7	23 	#
3875  54A8 2B           	dec hl							; delay 6 clock cycles											;54a8	2b 	+
3876  54A9 23           	inc hl							; delay 6 clock cycles											;54a9	23 	#
3877  54AA 00           	nop								; delay 4 clock cycles											;54aa	00 	.
3878  54AB 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;54ab	3e 00 	> .
3879  54AD DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;54ad	db 11 	. .
3880  54AF              .waitClockBit7:
3881  54AF              ; -- wait for FDC Clock Pulse
3882  54AF ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;54af	ed 78 	. x
3883  54B1 F2 AF 54     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;54b1	f2 af 54 	. . T
3884  54B4 2B           	dec hl							; delay 6 clock cycles											;54b4	2b 	+
3885  54B5 23           	inc hl							; delay 6 clock cycles											;54b5	23 	#
3886  54B6 2B           	dec hl							; delay 6 clock cycles											;54b6	2b 	+
3887  54B7 23           	inc hl							; delay 6 clock cycles											;54b7	23 	#
3888  54B8 2B           	dec hl							; delay 6 clock cycles											;54b8	2b 	+
3889  54B9 23           	inc hl							; delay 6 clock cycles											;54b9	23 	#
3890  54BA 00           	nop								; delay 4 clock cycles											;54ba	00 	.
3891  54BB 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;54bb	3e 00 	> .
3892  54BD DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;54bd	db 11 	. .
3893  54BF 47           	ld b,a							; store for compare												;54bf	47 	G
3894  54C0              .waitClockBit8:
3895  54C0              ; -- wait for FDC Clock Pulse
3896  54C0 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;54c0	ed 78 	. x
3897  54C2 F2 C0 54     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;54c2	f2 c0 54 	. . T
3898  54C5
3899  54C5
3900  54C5
3901  54C5              ; -- We have 1 byte read - if 80 then still reading GAP1
3902  54C5 78           	ld a,b							; a - byte from Floppy Disk										;54c5	78 	x
3903  54C6 FE 80        	cp $80							; is it still $80 - GAP1 sequence byte?							;54c6	fe 80 	. .
3904  54C8 CA 46 54     	jp z,RAM_ReadByte				; yes - read next byte from disk								;54c8	ca 46 54 	. F T
3905  54CB
3906  54CB              ; -- byte from disk is NOT $80 (expected 00 but not verified)
3907  54CB
3908  54CB
3909  54CB
3910  54CB
3911  54CB
3912  54CB
3913  54CB              ;***************************************************************************************************
3914  54CB              ;
3915  54CB              ; Read IDAM sequence 1st byte - $fe
3916  54CB              ;
3917  54CB              RAM_ReadIDAM_FE:
3918  54CB 00           	nop								; delay 4 clock cycles											;54cb	00 	.
3919  54CC 00           	nop								; delay 4 clock cycles											;54cc	00 	.
3920  54CD 00           	nop								; delay 4 clock cycles											;54cd	00 	.
3921  54CE 3E 00        	ld a,0							; delay 7 clock cycles											;54ce	3e 00 	> .
3922  54D0 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;54d0	3e 00 	> .
3923  54D2 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;54d2	db 11 	. .
3924  54D4              .waitClockBit1:
3925  54D4              ; -- wait for FDC Clock Pulse
3926  54D4 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;54d4	ed 78 	. x
3927  54D6 F2 D4 54     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;54d6	f2 d4 54 	. . T
3928  54D9 2B           	dec hl							; delay 6 clock cycles											;54d9	2b 	+
3929  54DA 23           	inc hl							; delay 6 clock cycles											;54da	23 	#
3930  54DB 2B           	dec hl							; delay 6 clock cycles											;54db	2b 	+
3931  54DC 23           	inc hl							; delay 6 clock cycles											;54dc	23 	#
3932  54DD 2B           	dec hl							; delay 6 clock cycles											;54dd	2b 	+
3933  54DE 23           	inc hl							; delay 6 clock cycles											;54de	23 	#
3934  54DF 00           	nop								; delay 4 clock cycles											;54df	00 	.
3935  54E0 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;54e0	3e 00 	> .
3936  54E2 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;54e2	db 11 	. .
3937  54E4              .waitClockBit2:
3938  54E4              ; -- wait for FDC Clock Pulse
3939  54E4 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;54e4	ed 78 	. x
3940  54E6 F2 E4 54     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;54e6	f2 e4 54 	. . T
3941  54E9 2B           	dec hl							; delay 6 clock cycles											;54e9	2b 	+
3942  54EA 23           	inc hl							; delay 6 clock cycles											;54ea	23 	#
3943  54EB 2B           	dec hl							; delay 6 clock cycles											;54eb	2b 	+
3944  54EC 23           	inc hl							; delay 6 clock cycles											;54ec	23 	#
3945  54ED 2B           	dec hl							; delay 6 clock cycles											;54ed	2b 	+
3946  54EE 23           	inc hl							; delay 6 clock cycles											;54ee	23 	#
3947  54EF 00           	nop								; delay 4 clock cycles											;54ef	00 	.
3948  54F0 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;54f0	3e 00 	> .
3949  54F2 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;54f2	db 11 	. .
3950  54F4              .waitClockBit3:
3951  54F4              ; -- wait for FDC Clock Pulse
3952  54F4 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;54f4	ed 78 	. x
3953  54F6 F2 F4 54     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;54f6	f2 f4 54 	. . T
3954  54F9 2B           	dec hl							; delay 6 clock cycles											;54f9	2b 	+
3955  54FA 23           	inc hl							; delay 6 clock cycles											;54fa	23 	#
3956  54FB 2B           	dec hl							; delay 6 clock cycles											;54fb	2b 	+
3957  54FC 23           	inc hl							; delay 6 clock cycles											;54fc	23 	#
3958  54FD 2B           	dec hl							; delay 6 clock cycles											;54fd	2b 	+
3959  54FE 23           	inc hl							; delay 6 clock cycles											;54fe	23 	#
3960  54FF 00           	nop								; delay 4 clock cycles											;54ff	00 	.
3961  5500 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5500	3e 00 	> .
3962  5502 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5502	db 11 	. .
3963  5504              .waitClockBit4:
3964  5504              ; -- wait for FDC Clock Pulse
3965  5504 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5504	ed 78 	. x
3966  5506 F2 04 55     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5506	f2 04 55 	. . U
3967  5509 2B           	dec hl							; delay 6 clock cycles											;5509	2b 	+
3968  550A 23           	inc hl							; delay 6 clock cycles											;550a	23 	#
3969  550B 2B           	dec hl							; delay 6 clock cycles											;550b	2b 	+
3970  550C 23           	inc hl							; delay 6 clock cycles											;550c	23 	#
3971  550D 2B           	dec hl							; delay 6 clock cycles											;550d	2b 	+
3972  550E 23           	inc hl							; delay 6 clock cycles											;550e	23 	#
3973  550F 00           	nop								; delay 4 clock cycles											;550f	00 	.
3974  5510 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5510	3e 00 	> .
3975  5512 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5512	db 11 	. .
3976  5514              .waitClockBit5:
3977  5514              ; -- wait for FDC Clock Pulse
3978  5514 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5514	ed 78 	. x
3979  5516 F2 14 55     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5516	f2 14 55 	. . U
3980  5519 2B           	dec hl							; delay 6 clock cycles											;5519	2b 	+
3981  551A 23           	inc hl							; delay 6 clock cycles											;551a	23 	#
3982  551B 2B           	dec hl							; delay 6 clock cycles											;551b	2b 	+
3983  551C 23           	inc hl							; delay 6 clock cycles											;551c	23 	#
3984  551D 2B           	dec hl							; delay 6 clock cycles											;551d	2b 	+
3985  551E 23           	inc hl							; delay 6 clock cycles											;551e	23 	#
3986  551F 00           	nop								; delay 4 clock cycles											;551f	00 	.
3987  5520 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5520	3e 00 	> .
3988  5522 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;5522	db 11 	. .
3989  5524              .waitClockBit6:
3990  5524              ; -- wait for FDC Clock Pulse
3991  5524 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5524	ed 78 	. x
3992  5526 F2 24 55     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;5526	f2 24 55 	. $ U
3993  5529 2B           	dec hl							; delay 6 clock cycles											;5529	2b 	+
3994  552A 23           	inc hl							; delay 6 clock cycles											;552a	23 	#
3995  552B 2B           	dec hl							; delay 6 clock cycles											;552b	2b 	+
3996  552C 23           	inc hl							; delay 6 clock cycles											;552c	23 	#
3997  552D 2B           	dec hl							; delay 6 clock cycles											;552d	2b 	+
3998  552E 23           	inc hl							; delay 6 clock cycles											;552e	23 	#
3999  552F 00           	nop								; delay 4 clock cycles											;552f	00 	.
4000  5530 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5530	3e 00 	> .
4001  5532 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;5532	db 11 	. .
4002  5534              .waitClockBit7:
4003  5534              ; -- wait for FDC Clock Pulse
4004  5534 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5534	ed 78 	. x
4005  5536 F2 34 55     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;5536	f2 34 55 	. 4 U
4006  5539 2B           	dec hl							; delay 6 clock cycles											;5539	2b 	+
4007  553A 23           	inc hl							; delay 6 clock cycles											;553a	23 	#
4008  553B 2B           	dec hl							; delay 6 clock cycles											;553b	2b 	+
4009  553C 23           	inc hl							; delay 6 clock cycles											;553c	23 	#
4010  553D 2B           	dec hl							; delay 6 clock cycles											;553d	2b 	+
4011  553E 23           	inc hl							; delay 6 clock cycles											;553e	23 	#
4012  553F 00           	nop								; delay 4 clock cycles											;553f	00 	.
4013  5540 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5540	3e 00 	> .
4014  5542 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;5542	db 11 	. .
4015  5544 47           	ld b,a							; store for compare												;5544	47 	G
4016  5545              .waitClockBit8:
4017  5545              ; -- wait for FDC Clock Pulse
4018  5545 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5545	ed 78 	. x
4019  5547 F2 45 55     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;5547	f2 45 55 	. E U
4020  554A
4021  554A              ; -- We have 1st byte read (expected $fe)
4022  554A 78           	ld a,b							; a - byte from Floppy Disk										;554a	78 	x
4023  554B FE FE        	cp $fe							; is it FE (first byte of IDAM)?								;554b	fe fe 	. .
4024  554D C2 31 54     	jp nz,RAM_WaitFor80				; no - start over and find byte = $80							;554d	c2 31 54 	. 1 T
4025  5550
4026  5550              ; -- first byte of IDAM received - read next byte ($e7)
4027  5550
4028  5550              RAM_ReadIDAM_E7:
4029  5550 00           	nop								; delay 4 clock cycles											;5550	00 	.
4030  5551 00           	nop								; delay 4 clock cycles											;5551	00 	.
4031  5552 00           	nop								; delay 4 clock cycles											;5552	00 	.
4032  5553 3E 00        	ld a,0							; delay 7 clock cycles											;5553	3e 00 	> .
4033  5555 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;5555	3e 00 	> .
4034  5557 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5557	db 11 	. .
4035  5559              .waitClockBit1:
4036  5559              ; -- wait for FDC Clock Pulse
4037  5559 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5559	ed 78 	. x
4038  555B F2 59 55     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;555b	f2 59 55 	. Y U
4039  555E 2B           	dec hl							; delay 6 clock cycles											;555e	2b 	+
4040  555F 23           	inc hl							; delay 6 clock cycles											;555f	23 	#
4041  5560 2B           	dec hl							; delay 6 clock cycles											;5560	2b 	+
4042  5561 23           	inc hl							; delay 6 clock cycles											;5561	23 	#
4043  5562 2B           	dec hl							; delay 6 clock cycles											;5562	2b 	+
4044  5563 23           	inc hl							; delay 6 clock cycles											;5563	23 	#
4045  5564 00           	nop								; delay 4 clock cycles											;5564	00 	.
4046  5565 3E 00        	ld a,0							; delay 7 clock cycles (47 in total)							;5565	3e 00 	> .
4047  5567 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;5567	db 11 	. .
4048  5569              .waitClockBit2:
4049  5569              ; -- wait for FDC Clock Pulse
4050  5569 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5569	ed 78 	. x
4051  556B F2 69 55     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;556b	f2 69 55 	. i U
4052  556E 2B           	dec hl							; delay 6 clock cycles											;556e	2b 	+
4053  556F 23           	inc hl							; delay 6 clock cycles											;556f	23 	#
4054  5570 2B           	dec hl							; delay 6 clock cycles											;5570	2b 	+
4055  5571 23           	inc hl							; delay 6 clock cycles											;5571	23 	#
4056  5572 2B           	dec hl							; delay 6 clock cycles											;5572	2b 	+
4057  5573 23           	inc hl							; delay 6 clock cycles											;5573	23 	#
4058  5574 00           	nop								; delay 4 clock cycles											;5574	00 	.
4059  5575 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5575	3e 00 	> .
4060  5577 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5577	db 11 	. .
4061  5579              .waitClockBit3:
4062  5579              ; -- wait for FDC Clock Pulse
4063  5579 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5579	ed 78 	. x
4064  557B F2 79 55     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;557b	f2 79 55 	. y U
4065  557E 2B           	dec hl							; delay 6 clock cycles											;557e	2b 	+
4066  557F 23           	inc hl							; delay 6 clock cycles											;557f	23 	#
4067  5580 2B           	dec hl							; delay 6 clock cycles											;5580	2b 	+
4068  5581 23           	inc hl							; delay 6 clock cycles											;5581	23 	#
4069  5582 2B           	dec hl							; delay 6 clock cycles											;5582	2b 	+
4070  5583 23           	inc hl							; delay 6 clock cycles											;5583	23 	#
4071  5584 00           	nop								; delay 4 clock cycles											;5584	00 	.
4072  5585 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5585	3e 00 	> .
4073  5587 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5587	db 11 	. .
4074  5589              .waitClockBit4:
4075  5589              ; -- wait for FDC Clock Pulse
4076  5589 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5589	ed 78 	. x
4077  558B F2 89 55     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;558b	f2 89 55 	. . U
4078  558E 2B           	dec hl							; delay 6 clock cycles											;558e	2b 	+
4079  558F 23           	inc hl							; delay 6 clock cycles											;558f	23 	#
4080  5590 2B           	dec hl							; delay 6 clock cycles											;5590	2b 	+
4081  5591 23           	inc hl							; delay 6 clock cycles											;5591	23 	#
4082  5592 2B           	dec hl							; delay 6 clock cycles											;5592	2b 	+
4083  5593 23           	inc hl							; delay 6 clock cycles											;5593	23 	#
4084  5594 00           	nop								; delay 4 clock cycles											;5594	00 	.
4085  5595 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5595	3e 00 	> .
4086  5597 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5597	db 11 	. .
4087  5599              .waitClockBit5:
4088  5599              ; -- wait for FDC Clock Pulse
4089  5599 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5599	ed 78 	. x
4090  559B F2 99 55     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;559b	f2 99 55 	. . U
4091  559E 2B           	dec hl							; delay 6 clock cycles											;559e	2b 	+
4092  559F 23           	inc hl							; delay 6 clock cycles											;559f	23 	#
4093  55A0 2B           	dec hl							; delay 6 clock cycles											;55a0	2b 	+
4094  55A1 23           	inc hl							; delay 6 clock cycles											;55a1	23 	#
4095  55A2 2B           	dec hl							; delay 6 clock cycles											;55a2	2b 	+
4096  55A3 23           	inc hl							; delay 6 clock cycles											;55a3	23 	#
4097  55A4 00           	nop								; delay 4 clock cycles											;55a4	00 	.
4098  55A5 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;55a5	3e 00 	> .
4099  55A7 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;55a7	db 11 	. .
4100  55A9              .waitClockBit6:
4101  55A9              ; -- wait for FDC Clock Pulse
4102  55A9 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;55a9	ed 78 	. x
4103  55AB F2 A9 55     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;55ab	f2 a9 55 	. . U
4104  55AE 2B           	dec hl							; delay 6 clock cycles											;55ae	2b 	+
4105  55AF 23           	inc hl							; delay 6 clock cycles											;55af	23 	#
4106  55B0 2B           	dec hl							; delay 6 clock cycles											;55b0	2b 	+
4107  55B1 23           	inc hl							; delay 6 clock cycles											;55b1	23 	#
4108  55B2 2B           	dec hl							; delay 6 clock cycles											;55b2	2b 	+
4109  55B3 23           	inc hl							; delay 6 clock cycles											;55b3	23 	#
4110  55B4 00           	nop								; delay 4 clock cycles											;55b4	00 	.
4111  55B5 3E 00        	ld a,0							; delay 7 clock cycles											;55b5	3e 00 	> .
4112  55B7 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;55b7	db 11 	. .
4113  55B9              .waitClockBit7:
4114  55B9              ; -- wait for FDC Clock Pulse
4115  55B9 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;55b9	ed 78 	. x
4116  55BB F2 B9 55     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;55bb	f2 b9 55 	. . U
4117  55BE 2B           	dec hl							; delay 6 clock cycles											;55be	2b 	+
4118  55BF 23           	inc hl							; delay 6 clock cycles											;55bf	23 	#
4119  55C0 2B           	dec hl							; delay 6 clock cycles											;55c0	2b 	+
4120  55C1 23           	inc hl							; delay 6 clock cycles											;55c1	23 	#
4121  55C2 2B           	dec hl							; delay 6 clock cycles											;55c2	2b 	+
4122  55C3 23           	inc hl							; delay 6 clock cycles											;55c3	23 	#
4123  55C4 00           	nop								; delay 4 clock cycles											;55c4	00 	.
4124  55C5 3E 00        	ld a,0							; delay 7 clock cycles											;55c5	3e 00 	> .
4125  55C7 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;55c7	db 11 	. .
4126  55C9 47           	ld b,a							; store for compare												;55c9	47 	G
4127  55CA              .waitClockBit8:
4128  55CA              ; -- wait for FDC Clock Pulse
4129  55CA ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;55ca	ed 78 	. x
4130  55CC F2 CA 55     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;55cc	f2 ca 55 	. . U
4131  55CF
4132  55CF              ; -- We have 2nd byte read (expected $e7)
4133  55CF 78           	ld a,b							; a - byte from Floppy Disk										;55cf	78 	x
4134  55D0 FE E7        	cp $e7							; is it E7 (second byte of IDAM)?								;55d0	fe e7 	. .
4135  55D2 C2 31 54     	jp nz,RAM_WaitFor80				; no - start over and find byte = $80							;55d2	c2 31 54 	. 1 T
4136  55D5
4137  55D5              ; -- second byte of IDAM received - read next byte ($18)
4138  55D5
4139  55D5              RAM_ReadIDAM_18:
4140  55D5 00           	nop								; delay 4 clock cycles											;55d5	00 	.
4141  55D6 00           	nop								; delay 4 clock cycles											;55d6	00 	.
4142  55D7 00           	nop								; delay 4 clock cycles											;55d7	00 	.
4143  55D8 3E 00        	ld a,0							; delay 7 clock cycles											;55d8	3e 00 	> .
4144  55DA 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;55da	3e 00 	> .
4145  55DC DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;55dc	db 11 	. .
4146  55DE              .waitClockBit1:
4147  55DE              ; -- wait for FDC Clock Pulse
4148  55DE ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;55de	ed 78 	. x
4149  55E0 F2 DE 55     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;55e0	f2 de 55 	. . U
4150  55E3 2B           	dec hl							; delay 6 clock cycles											;55e3	2b 	+
4151  55E4 23           	inc hl							; delay 6 clock cycles											;55e4	23 	#
4152  55E5 2B           	dec hl							; delay 6 clock cycles											;55e5	2b 	+
4153  55E6 23           	inc hl							; delay 6 clock cycles											;55e6	23 	#
4154  55E7 2B           	dec hl							; delay 6 clock cycles											;55e7	2b 	+
4155  55E8 23           	inc hl							; delay 6 clock cycles											;55e8	23 	#
4156  55E9 00           	nop								; delay 4 clock cycles											;55e9	00 	.
4157  55EA 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;55ea	3e 00 	> .
4158  55EC DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;55ec	db 11 	. .
4159  55EE              .waitClockBit2:
4160  55EE              ; -- wait for FDC Clock Pulse
4161  55EE ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;55ee	ed 78 	. x
4162  55F0 F2 EE 55     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;55f0	f2 ee 55 	. . U
4163  55F3 2B           	dec hl							; delay 6 clock cycles											;55f3	2b 	+
4164  55F4 23           	inc hl							; delay 6 clock cycles											;55f4	23 	#
4165  55F5 2B           	dec hl							; delay 6 clock cycles											;55f5	2b 	+
4166  55F6 23           	inc hl							; delay 6 clock cycles											;55f6	23 	#
4167  55F7 2B           	dec hl							; delay 6 clock cycles											;55f7	2b 	+
4168  55F8 23           	inc hl							; delay 6 clock cycles											;55f8	23 	#
4169  55F9 00           	nop								; delay 4 clock cycles											;55f9	00 	.
4170  55FA 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;55fa	3e 00 	> .
4171  55FC DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;55fc	db 11 	. .
4172  55FE              .waitClockBit3:
4173  55FE              ; -- wait for FDC Clock Pulse
4174  55FE ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;55fe	ed 78 	. x
4175  5600 F2 FE 55     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5600	f2 fe 55 	. . U
4176  5603 2B           	dec hl							; delay 6 clock cycles											;5603	2b 	+
4177  5604 23           	inc hl							; delay 6 clock cycles											;5604	23 	#
4178  5605 2B           	dec hl							; delay 6 clock cycles											;5605	2b 	+
4179  5606 23           	inc hl							; delay 6 clock cycles											;5606	23 	#
4180  5607 2B           	dec hl							; delay 6 clock cycles											;5607	2b 	+
4181  5608 23           	inc hl							; delay 6 clock cycles											;5608	23 	#
4182  5609 00           	nop								; delay 4 clock cycles											;5609	00 	.
4183  560A 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;560a	3e 00 	> .
4184  560C DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;560c	db 11 	. .
4185  560E              .waitClockBit4:
4186  560E              ; -- wait for FDC Clock Pulse
4187  560E ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;560e	ed 78 	. x
4188  5610 F2 0E 56     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5610	f2 0e 56 	. . V
4189  5613 2B           	dec hl							; delay 6 clock cycles											;5613	2b 	+
4190  5614 23           	inc hl							; delay 6 clock cycles											;5614	23 	#
4191  5615 2B           	dec hl							; delay 6 clock cycles											;5615	2b 	+
4192  5616 23           	inc hl							; delay 6 clock cycles											;5616	23 	#
4193  5617 2B           	dec hl							; delay 6 clock cycles											;5617	2b 	+
4194  5618 23           	inc hl							; delay 6 clock cycles											;5618	23 	#
4195  5619 00           	nop								; delay 4 clock cycles											;5619	00 	.
4196  561A 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;561a	3e 00 	> .
4197  561C DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;561c	db 11 	. .
4198  561E              .waitClockBit5:
4199  561E              ; -- wait for FDC Clock Pulse
4200  561E ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;561e	ed 78 	. x
4201  5620 F2 1E 56     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5620	f2 1e 56 	. . V
4202  5623 2B           	dec hl							; delay 6 clock cycles											;5623	2b 	+
4203  5624 23           	inc hl							; delay 6 clock cycles											;5624	23 	#
4204  5625 2B           	dec hl							; delay 6 clock cycles											;5625	2b 	+
4205  5626 23           	inc hl							; delay 6 clock cycles											;5626	23 	#
4206  5627 2B           	dec hl							; delay 6 clock cycles											;5627	2b 	+
4207  5628 23           	inc hl							; delay 6 clock cycles											;5628	23 	#
4208  5629 00           	nop								; delay 4 clock cycles											;5629	00 	.
4209  562A 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;562a	3e 00 	> .
4210  562C DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;562c	db 11 	. .
4211  562E              .waitClockBit6:
4212  562E              ; -- wait for FDC Clock Pulse
4213  562E ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;562e	ed 78 	. x
4214  5630 F2 2E 56     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;5630	f2 2e 56 	. . V
4215  5633 2B           	dec hl							; delay 6 clock cycles											;5633	2b 	+
4216  5634 23           	inc hl							; delay 6 clock cycles											;5634	23 	#
4217  5635 2B           	dec hl							; delay 6 clock cycles											;5635	2b 	+
4218  5636 23           	inc hl							; delay 6 clock cycles											;5636	23 	#
4219  5637 2B           	dec hl							; delay 6 clock cycles											;5637	2b 	+
4220  5638 23           	inc hl							; delay 6 clock cycles											;5638	23 	#
4221  5639 00           	nop								; delay 4 clock cycles											;5639	00 	.
4222  563A 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;563a	3e 00 	> .
4223  563C DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;563c	db 11 	. .
4224  563E              .waitClockBit7:
4225  563E              ; -- wait for FDC Clock Pulse
4226  563E ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;563e	ed 78 	. x
4227  5640 F2 3E 56     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;5640	f2 3e 56 	. > V
4228  5643 2B           	dec hl							; delay 6 clock cycles											;5643	2b 	+
4229  5644 23           	inc hl							; delay 6 clock cycles											;5644	23 	#
4230  5645 2B           	dec hl							; delay 6 clock cycles											;5645	2b 	+
4231  5646 23           	inc hl							; delay 6 clock cycles											;5646	23 	#
4232  5647 2B           	dec hl							; delay 6 clock cycles											;5647	2b 	+
4233  5648 23           	inc hl							; delay 6 clock cycles											;5648	23 	#
4234  5649 00           	nop								; delay 4 clock cycles											;5649	00 	.
4235  564A 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;564a	3e 00 	> .
4236  564C DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;564c	db 11 	. .
4237  564E 47           	ld b,a							; store for compare												;564e	47 	G
4238  564F              .waitClockBit8:
4239  564F              ; -- wait for FDC Clock Pulse
4240  564F ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;564f	ed 78 	. x
4241  5651 F2 4F 56     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;5651	f2 4f 56 	. O V
4242  5654
4243  5654              ; -- We have 3rd byte read (expected $18)
4244  5654 78           	ld a,b							; a - byte from Floppy Disk										;5654	78 	x
4245  5655 FE 18        	cp $18							; is it 18 (third byte of IDAM)?								;5655	fe 18 	. .
4246  5657 C2 31 54     	jp nz,RAM_WaitFor80				; no - start over and find byte = $80							;5657	c2 31 54 	. 1 T
4247  565A
4248  565A              ; -- third byte of IDAM received - read next byte ($c3)
4249  565A
4250  565A              RAM_ReadIDAM_C3:
4251  565A 00           	nop								; delay 4 clock cycles											;565a	00 	.
4252  565B 00           	nop								; delay 4 clock cycles											;565b	00 	.
4253  565C 00           	nop								; delay 4 clock cycles											;565c	00 	.
4254  565D 3E 00        	ld a,0							; delay 7 clock cycles											;565d	3e 00 	> .
4255  565F 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;565f	3e 00 	> .
4256  5661 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5661	db 11 	. .
4257  5663              .waitClockBit1:
4258  5663              ; -- wait for FDC Clock Pulse
4259  5663 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5663	ed 78 	. x
4260  5665 F2 63 56     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5665	f2 63 56 	. c V
4261  5668 2B           	dec hl							; delay 6 clock cycles											;5668	2b 	+
4262  5669 23           	inc hl							; delay 6 clock cycles											;5669	23 	#
4263  566A 2B           	dec hl							; delay 6 clock cycles											;566a	2b 	+
4264  566B 23           	inc hl							; delay 6 clock cycles											;566b	23 	#
4265  566C 2B           	dec hl							; delay 6 clock cycles											;566c	2b 	+
4266  566D 23           	inc hl							; delay 6 clock cycles											;566d	23 	#
4267  566E 00           	nop								; delay 4 clock cycles											;566e	00 	.
4268  566F 3E 00        	ld a,0							; delay 7 clock cycles											;566f	3e 00 	> .
4269  5671 3E 00        	ld a,0							; delay 7 clock cycles	(54 in total)							;5671	3e 00 	> .
4270  5673              .waitClockBit2:
4271  5673              ; [!] Not sure why we are shifting FDC data register so many times while waiting for Clock pulse [!]
4272  5673              ; -- wait for FDC Clock Pulse
4273  5673 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7,6,...]	;5673	db 11 	. .
4274  5675 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5675	ed 78 	. x
4275  5677 F2 73 56     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5677	f2 73 56 	. s V
4276  567A 2B           	dec hl							; delay 6 clock cycles											;567a	2b 	+
4277  567B 23           	inc hl							; delay 6 clock cycles											;567b	23 	#
4278  567C 2B           	dec hl							; delay 6 clock cycles											;567c	2b 	+
4279  567D 23           	inc hl							; delay 6 clock cycles											;567d	23 	#
4280  567E 2B           	dec hl							; delay 6 clock cycles											;567e	2b 	+
4281  567F 23           	inc hl							; delay 6 clock cycles											;567f	23 	#
4282  5680 00           	nop								; delay 4 clock cycles											;5680	00 	.
4283  5681 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5681	3e 00 	> .
4284  5683              .waitClockBit3:
4285  5683              ; -- wait for FDC Clock Pulse
4286  5683              ; [!] Still not sure why we are shifting FDC data register so many times while waiting for Clock pulse [!]
4287  5683 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7,6...]	;5683	db 11 	.
4288  5685 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5685	ed 78 	. x
4289  5687 F2 83 56     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5687	f2 83 56 	. . V
4290  568A 2B           	dec hl							; delay 6 clock cycles											;568a	2b 	+
4291  568B 23           	inc hl							; delay 6 clock cycles											;568b	23 	#
4292  568C 2B           	dec hl							; delay 6 clock cycles											;568c	2b 	+
4293  568D 23           	inc hl							; delay 6 clock cycles											;568d	23 	#
4294  568E 2B           	dec hl							; delay 6 clock cycles											;568e	2b 	+
4295  568F 23           	inc hl							; delay 6 clock cycles											;568f	23 	#
4296  5690 00           	nop								; delay 4 clock cycles	(40 cycles in total)					;5690	00 	.
4297  5691 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5691	db 11 	. .
4298  5693              .waitClockBit4:
4299  5693              ; -- wait for FDC Clock Pulse
4300  5693 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5693	ed 78 	. x
4301  5695 F2 93 56     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5695	f2 93 56 	. . V
4302  5698 2B           	dec hl							; delay 6 clock cycles											;5698	2b 	+
4303  5699 23           	inc hl							; delay 6 clock cycles											;5699	23 	#
4304  569A 2B           	dec hl							; delay 6 clock cycles											;569a	2b 	+
4305  569B 23           	inc hl							; delay 6 clock cycles											;569b	23 	#
4306  569C 2B           	dec hl							; delay 6 clock cycles											;569c	2b 	+
4307  569D 23           	inc hl							; delay 6 clock cycles											;569d	23 	#
4308  569E 00           	nop								; delay 4 clock cycles											;569e	00 	.
4309  569F 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;569f	3e 00 	> .
4310  56A1 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;56a1	db 11 	. .
4311  56A3              .waitClockBit5:
4312  56A3              ; -- wait for FDC Clock Pulse
4313  56A3 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;56a3	ed 78 	. x
4314  56A5 F2 A3 56     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;56a5	f2 a3 56 	. . V
4315  56A8 2B           	dec hl							; delay 6 clock cycles											;56a8	2b 	+
4316  56A9 23           	inc hl							; delay 6 clock cycles											;56a9	23 	#
4317  56AA 2B           	dec hl							; delay 6 clock cycles											;56aa	2b 	+
4318  56AB 23           	inc hl							; delay 6 clock cycles											;56ab	23 	#
4319  56AC 2B           	dec hl							; delay 6 clock cycles											;56ac	2b 	+
4320  56AD 23           	inc hl							; delay 6 clock cycles											;56ad	23 	#
4321  56AE 00           	nop								; delay 4 clock cycles											;56ae	00 	.
4322  56AF 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;56af	3e 00 	> .
4323  56B1 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;56b1	db 11 	. .
4324  56B3              .waitClockBit6:
4325  56B3              ; -- wait for FDC Clock Pulse
4326  56B3 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;56b3	ed 78 	. x
4327  56B5 F2 B3 56     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;56b5	f2 b3 56 	. . V
4328  56B8 2B           	dec hl							; delay 6 clock cycles											;56b8	2b 	+
4329  56B9 23           	inc hl							; delay 6 clock cycles											;56b9	23 	#
4330  56BA 2B           	dec hl							; delay 6 clock cycles											;56ba	2b 	+
4331  56BB 23           	inc hl							; delay 6 clock cycles											;56bb	23 	#
4332  56BC 2B           	dec hl							; delay 6 clock cycles											;56bc	2b 	+
4333  56BD 23           	inc hl							; delay 6 clock cycles											;56bd	23 	#
4334  56BE 00           	nop								; delay 4 clock cycles											;56be	00 	.
4335  56BF 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;56bf	3e 00 	> .
4336  56C1 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;56c1	db 11 	. .
4337  56C3              .waitClockBit7:
4338  56C3              ; -- wait for FDC Clock Pulse
4339  56C3 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;56c3	ed 78 	. x
4340  56C5 F2 C3 56     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;56c5	f2 c3 56 	. . V
4341  56C8 2B           	dec hl							; delay 6 clock cycles											;56c8	2b 	+
4342  56C9 23           	inc hl							; delay 6 clock cycles											;56c9	23 	#
4343  56CA 2B           	dec hl							; delay 6 clock cycles											;56ca	2b 	+
4344  56CB 23           	inc hl							; delay 6 clock cycles											;56cb	23 	#
4345  56CC 2B           	dec hl							; delay 6 clock cycles											;56cc	2b 	+
4346  56CD 23           	inc hl							; delay 6 clock cycles											;56cd	23 	#
4347  56CE 00           	nop								; delay 4 clock cycles											;56ce	00 	.
4348  56CF 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;56cf	3e 00 	> .
4349  56D1 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;56d1	db 11 	. .
4350  56D3 47           	ld b,a							; store for compare												;56d3	47 	G
4351  56D4              .waitClockBit8:
4352  56D4              ; -- wait for FDC Clock Pulse
4353  56D4 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;56d4	ed 78 	. x
4354  56D6 F2 D4 56     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;56d6	f2 d4 56 	. . V
4355  56D9
4356  56D9              ; -- We have 4th byte read (expected $c3)
4357  56D9
4358  56D9 78           	ld a,b							; a - byte from Floppy Disk										;56d9	78 	x
4359  56DA FE C3        	cp $c3							; is it c3 (fourth byte of IDAM)?								;56da	fe c3 	. .
4360  56DC C2 31 54     	jp nz,RAM_WaitFor80				; no - start over and find byte = $80							;56dc	c2 31 54 	. 1 T
4361  56DF
4362  56DF              ; -- fourth byte of IDAM received - read next byte (track number)
4363  56DF
4364  56DF              RAM_ReadIDAM_TrkNo:
4365  56DF 00           	nop								; delay 4 clock cycles											;56df	00 	.
4366  56E0 00           	nop								; delay 4 clock cycles											;56e0	00 	.
4367  56E1 00           	nop								; delay 4 clock cycles											;56e1	00 	.
4368  56E2 3E 00        	ld a,0							; delay 7 clock cycles											;56e2	3e 00 	> .
4369  56E4 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;56e4	3e 00 	> .
4370  56E6 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;56e6	db 11 	. .
4371  56E8              .waitClockBit1:
4372  56E8              ; -- wait for FDC Clock Pulse
4373  56E8 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;56e8	ed 78 	. x
4374  56EA F2 E8 56     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;56ea	f2 e8 56 	. . V
4375  56ED 2B           	dec hl							; delay 6 clock cycles											;56ed	2b 	+
4376  56EE 23           	inc hl							; delay 6 clock cycles											;56ee	23 	#
4377  56EF 2B           	dec hl							; delay 6 clock cycles											;56ef	2b 	+
4378  56F0 23           	inc hl							; delay 6 clock cycles											;56f0	23 	#
4379  56F1 2B           	dec hl							; delay 6 clock cycles											;56f1	2b 	+
4380  56F2 23           	inc hl							; delay 6 clock cycles											;56f2	23 	#
4381  56F3 00           	nop								; delay 4 clock cycles											;56f3	00 	.
4382  56F4 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;56f4	3e 00 	> .
4383  56F6 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;56f6	db 11 	. .
4384  56F8              .waitClockBit2:
4385  56F8              ; -- wait for FDC Clock Pulse
4386  56F8 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;56f8	ed 78 	. x
4387  56FA F2 F8 56     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;56fa	f2 f8 56 	. . V
4388  56FD 2B           	dec hl							; delay 6 clock cycles											;56fd	2b 	+
4389  56FE 23           	inc hl							; delay 6 clock cycles											;56fe	23 	#
4390  56FF 2B           	dec hl							; delay 6 clock cycles											;56ff	2b 	+
4391  5700 23           	inc hl							; delay 6 clock cycles											;5700	23 	#
4392  5701 2B           	dec hl							; delay 6 clock cycles											;5701	2b 	+
4393  5702 23           	inc hl							; delay 6 clock cycles											;5702	23 	#
4394  5703 00           	nop								; delay 4 clock cycles											;5703	00 	.
4395  5704 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5704	3e 00 	> .
4396  5706 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5706	db 11 	. .
4397  5708              .waitClockBit3:
4398  5708              ; -- wait for FDC Clock Pulse
4399  5708 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5708	ed 78 	. x
4400  570A F2 08 57     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;570a	f2 08 57 	. . W
4401  570D 2B           	dec hl							; delay 6 clock cycles											;570d	2b 	+
4402  570E 23           	inc hl							; delay 6 clock cycles											;570e	23 	#
4403  570F 2B           	dec hl							; delay 6 clock cycles											;570f	2b 	+
4404  5710 23           	inc hl							; delay 6 clock cycles											;5710	23 	#
4405  5711 2B           	dec hl							; delay 6 clock cycles											;5711	2b 	+
4406  5712 23           	inc hl							; delay 6 clock cycles											;5712	23 	#
4407  5713 00           	nop								; delay 4 clock cycles											;5713	00 	.
4408  5714 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5714	3e 00 	> .
4409  5716 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5716	db 11 	. .
4410  5718              .waitClockBit4:
4411  5718              ; -- wait for FDC Clock Pulse
4412  5718 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5718	ed 78 	. x
4413  571A F2 18 57     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;571a	f2 18 57 	. . W
4414  571D 2B           	dec hl							; delay 6 clock cycles											;571d	2b 	+
4415  571E 23           	inc hl							; delay 6 clock cycles											;571e	23 	#
4416  571F 2B           	dec hl							; delay 6 clock cycles											;571f	2b 	+
4417  5720 23           	inc hl							; delay 6 clock cycles											;5720	23 	#
4418  5721 2B           	dec hl							; delay 6 clock cycles											;5721	2b 	+
4419  5722 23           	inc hl							; delay 6 clock cycles											;5722	23 	#
4420  5723 00           	nop								; delay 4 clock cycles											;5723	00 	.
4421  5724 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5724	3e 00 	> .
4422  5726 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5726	db 11 	. .
4423  5728              .waitClockBit5:
4424  5728              ; -- wait for FDC Clock Pulse
4425  5728 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5728	ed 78 	. x
4426  572A F2 28 57     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;572a	f2 28 57 	. ( W
4427  572D 2B           	dec hl							; delay 6 clock cycles											;572d	2b 	+
4428  572E 23           	inc hl							; delay 6 clock cycles											;572e	23 	#
4429  572F 2B           	dec hl							; delay 6 clock cycles											;572f	2b 	+
4430  5730 23           	inc hl							; delay 6 clock cycles											;5730	23 	#
4431  5731 2B           	dec hl							; delay 6 clock cycles											;5731	2b 	+
4432  5732 23           	inc hl							; delay 6 clock cycles											;5732	23 	#
4433  5733 00           	nop								; delay 4 clock cycles											;5733	00 	.
4434  5734 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5734	3e 00 	> .
4435  5736 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;5736	db 11 	. .
4436  5738              .waitClockBit6:
4437  5738              ; -- wait for FDC Clock Pulse
4438  5738 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5738	ed 78 	. x
4439  573A F2 38 57     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;573a	f2 38 57 	. 8 W
4440  573D 2B           	dec hl							; delay 6 clock cycles											;573d	2b 	+
4441  573E 23           	inc hl							; delay 6 clock cycles											;573e	23 	#
4442  573F 2B           	dec hl							; delay 6 clock cycles											;573f	2b 	+
4443  5740 23           	inc hl							; delay 6 clock cycles											;5740	23 	#
4444  5741 2B           	dec hl							; delay 6 clock cycles											;5741	2b 	+
4445  5742 23           	inc hl							; delay 6 clock cycles											;5742	23 	#
4446  5743 00           	nop								; delay 4 clock cycles											;5743	00 	.
4447  5744 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5744	3e 00 	> .
4448  5746 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;5746	db 11 	. .
4449  5748              .waitClockBit7:
4450  5748              ; -- wait for FDC Clock Pulse
4451  5748 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5748	ed 78 	. x
4452  574A F2 48 57     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;574a	f2 48 57 	. H W
4453  574D FD 7E 12     	ld a,(iy+UserTrackNo)			; a - requested track number 									;574d	fd 7e 12 	. ~ .
4454  5750 47           	ld b,a							; b - requested track number									;5750	47 	G
4455  5751 00           	nop								; delay 4 clock cycles 											;5751	00 	.
4456  5752 C3 55 57     	jp .continue1					; delay 10 clock cycles											;5752	c3 55 57 	. U W
4457  5755              .continue1:
4458  5755 C3 58 57     	jp .continue2					; delay 10 clock cycles											;5755	c3 58 57 	. X W
4459  5758              .continue2:
4460  5758 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register)  [bit 0]		;5758	db 11 	. .
4461  575A 08           	ex af,af'						; save a (byte from Floppy Disk) in alt register				;575a	08 	.
4462  575B              .waitClockBit8:
4463  575B              ; -- wait for FDC Clock Pulse
4464  575B ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;575b	ed 78 	. x
4465  575D F2 5B 57     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;575d	f2 5b 57 	. [ W
4466  5760
4467  5760              ; -- We have Track number byte read (expected the same as requested)
4468  5760
4469  5760 08           	ex af,af'						; restore a - track number read from disk 						;5760	08 	.
4470  5761 B8           	cp b							; is the same as requested (in IY+UserTrackNo)					;5761	b8 	.
4471  5762 CA 6C 57     	jp z,RAM_ReadIDAM_SecNo			; yes - continue to read Sector number 							;5762	ca 6c 57 	. l W
4472  5765
4473  5765              ; -- wrong track number
4474  5765
4475  5765 2D           	dec l							; decrement Try Counter - is it 0?								;5765	2d 	-
4476  5766 C2 FB 53     	jp nz,RAM_SetTrack				; no - set Track on Drive and start again						;5766	c2 fb 53 	. . S
4477  5769 C3 F0 53     	jp ResetTrackTo0				; yes - no more try - Reset Track to 0 and try 10 times again 	;5769	c3 f0 53 	. . S
4478  576C
4479  576C              RAM_ReadIDAM_SecNo:
4480  576C 00           	nop								; delay 4 clock cycles											;576c	00 	.
4481  576D 00           	nop								; delay 4 clock cycles											;576d	00 	.
4482  576E 00           	nop								; delay 4 clock cycles											;576e	00 	.
4483  576F C3 72 57     	jp .continue					; delay 10 clock cycles 										;576f	c3 72 57 	. r W
4484  5772              .continue:
4485  5772 3E 00        	ld a,0							; delay 7 clock cycles											;5772	3e 00 	> .
4486  5774 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5774	db 11 	. .
4487  5776              .waitClockBit1:
4488  5776              ; -- wait for FDC Clock Pulse
4489  5776 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5776	ed 78 	. x
4490  5778 F2 76 57     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5778	f2 76 57 	. v W
4491  577B 2B           	dec hl							; delay 6 clock cycles											;577b	2b 	+
4492  577C 23           	inc hl							; delay 6 clock cycles											;577c	23 	#
4493  577D 2B           	dec hl							; delay 6 clock cycles											;577d	2b 	+
4494  577E 23           	inc hl							; delay 6 clock cycles											;577e	23 	#
4495  577F 2B           	dec hl							; delay 6 clock cycles											;577f	2b 	+
4496  5780 23           	inc hl							; delay 6 clock cycles											;5780	23 	#
4497  5781 00           	nop								; delay 4 clock cycles											;5781	00 	.
4498  5782 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5782	3e 00 	> .
4499  5784 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;5784	db 11 	. .
4500  5786              .waitClockBit2:
4501  5786              ; -- wait for FDC Clock Pulse
4502  5786 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5786	ed 78 	. x
4503  5788 F2 86 57     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5788	f2 86 57 	. . W
4504  578B 2B           	dec hl							; delay 6 clock cycles											;578b	2b 	+
4505  578C 23           	inc hl							; delay 6 clock cycles											;578c	23 	#
4506  578D 2B           	dec hl							; delay 6 clock cycles											;578d	2b 	+
4507  578E 23           	inc hl							; delay 6 clock cycles											;578e	23 	#
4508  578F 2B           	dec hl							; delay 6 clock cycles											;578f	2b 	+
4509  5790 23           	inc hl							; delay 6 clock cycles											;5790	23 	#
4510  5791 00           	nop								; delay 4 clock cycles											;5791	00 	.
4511  5792 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5792	3e 00 	> .
4512  5794 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5794	db 11 	. .
4513  5796              .waitClockBit3:
4514  5796              ; -- wait for FDC Clock Pulse
4515  5796 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5796	ed 78 	. x
4516  5798 F2 96 57     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5798	f2 96 57 	. . W
4517  579B 2B           	dec hl							; delay 6 clock cycles											;579b	2b 	+
4518  579C 23           	inc hl							; delay 6 clock cycles											;579c	23 	#
4519  579D 2B           	dec hl							; delay 6 clock cycles											;579d	2b 	+
4520  579E 23           	inc hl							; delay 6 clock cycles											;579e	23 	#
4521  579F 2B           	dec hl							; delay 6 clock cycles											;579f	2b 	+
4522  57A0 23           	inc hl							; delay 6 clock cycles											;57a0	23 	#
4523  57A1 00           	nop								; delay 4 clock cycles											;57a1	00 	.
4524  57A2 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;57a2	3e 00 	> .
4525  57A4 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;57a4	db 11 	. .
4526  57A6              .waitClockBit4:
4527  57A6              ; -- wait for FDC Clock Pulse
4528  57A6 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;57a6	ed 78 	. x
4529  57A8 F2 A6 57     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;57a8	f2 a6 57 	. . W
4530  57AB 2B           	dec hl							; delay 6 clock cycles											;57ab	2b 	+
4531  57AC 23           	inc hl							; delay 6 clock cycles											;57ac	23 	#
4532  57AD 2B           	dec hl							; delay 6 clock cycles											;57ad	2b 	+
4533  57AE 23           	inc hl							; delay 6 clock cycles											;57ae	23 	#
4534  57AF 2B           	dec hl							; delay 6 clock cycles											;57af	2b 	+
4535  57B0 23           	inc hl							; delay 6 clock cycles											;57b0	23 	#
4536  57B1 00           	nop								; delay 4 clock cycles											;57b1	00 	.
4537  57B2 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;57b2	3e 00 	> .
4538  57B4 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;57b4	db 11 	. .
4539  57B6              .waitClockBit5:
4540  57B6              ; -- wait for FDC Clock Pulse
4541  57B6 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;57b6	ed 78 	. x
4542  57B8 F2 B6 57     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;57b8	f2 b6 57 	. . W
4543  57BB 2B           	dec hl							; delay 6 clock cycles											;57bb	2b 	+
4544  57BC 23           	inc hl							; delay 6 clock cycles											;57bc	23 	#
4545  57BD 2B           	dec hl							; delay 6 clock cycles											;57bd	2b 	+
4546  57BE 23           	inc hl							; delay 6 clock cycles											;57be	23 	#
4547  57BF 2B           	dec hl							; delay 6 clock cycles											;57bf	2b 	+
4548  57C0 23           	inc hl							; delay 6 clock cycles											;57c0	23 	#
4549  57C1 00           	nop								; delay 4 clock cycles											;57c1	00 	.
4550  57C2 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;57c2	3e 00 	> .
4551  57C4 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;57c4	db 11 	. .
4552  57C6              .waitClockBit6:
4553  57C6              ; -- wait for FDC Clock Pulse
4554  57C6 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;57c6	ed 78 	. x
4555  57C8 F2 C6 57     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;57c8	f2 c6 57 	. . W
4556  57CB 2B           	dec hl							; delay 6 clock cycles											;57cb	2b 	+
4557  57CC 23           	inc hl							; delay 6 clock cycles											;57cc	23 	#
4558  57CD 2B           	dec hl							; delay 6 clock cycles											;57cd	2b 	+
4559  57CE 23           	inc hl							; delay 6 clock cycles											;57ce	23 	#
4560  57CF 2B           	dec hl							; delay 6 clock cycles											;57cf	2b 	+
4561  57D0 23           	inc hl							; delay 6 clock cycles											;57d0	23 	#
4562  57D1 00           	nop								; delay 4 clock cycles											;57d1	00 	.
4563  57D2 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;57d2	3e 00 	> .
4564  57D4 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;57d4	db 11 	. .
4565  57D6              .waitClockBit7:
4566  57D6              ; -- wait for FDC Clock Pulse
4567  57D6 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;57d6	ed 78 	. x
4568  57D8 F2 D6 57     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;57d8	f2 d6 57 	. . W
4569  57DB FD 7E 11     	ld a,(iy+UserSectorNo)			; a - requested sector number 									;57db	fd 7e 11 	. ~ .
4570  57DE 47           	ld b,a							; b - requested sector number 									;57de	47 	G
4571  57DF 00           	nop								; delay 4 clock cycles											;57df	00 	.
4572  57E0 C3 E3 57     	jp .continue1					; delay 10 clock cycles											;57e0	c3 e3 57 	. . W
4573  57E3              .continue1:
4574  57E3 C3 E6 57     	jp .continue2					; delay 10 clock cycles											;57e3	c3 e6 57 	. . W
4575  57E6              .continue2:
4576  57E6 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;57e6	db 11 	. .
4577  57E8 08           	ex af,af'						; save a (byte from Floppy Disk) in alt register				;57e8	08 	.
4578  57E9              .waitClockBit8:
4579  57E9              ; -- wait for FDC Clock Pulse
4580  57E9 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;57e9	ed 78 	. x
4581  57EB F2 E9 57     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;57eb	f2 e9 57 	. . W
4582  57EE
4583  57EE              ; -- We have Sector Number byte read (expected the same as requested)
4584  57EE
4585  57EE 08           	ex af,af'						; restore a - Sector Number read from disk 						;57ee	08 	.
4586  57EF B8           	cp b							; is the same as requested (in IY+UserSectorNo)					;57ef	b8 	.
4587  57F0 CA FB 57     	jp z,RAM_ReadIDAM_Crc			; yes - continue to read Checksum Byte 							;57f0	ca fb 57 	. . W
4588  57F3
4589  57F3              ; -- wrong Sector Number
4590  57F3
4591  57F3 25           	dec h							; decrement Sector Try Counter - is it 0?						;57f3	25 	%
4592  57F4 C2 31 54     	jp nz,RAM_WaitFor80				; no - start over and read next sector on this track			;57f4	c2 31 54 	. 1 T
4593  57F7
4594  57F7              ; -- been trying too many times - return with Error
4595  57F7
4596  57F7 3E 09        	ld a,09							; Error code 09 - SECTOR NOT FOUND								;57f7	3e 09 	> .
4597  57F9 B7           	or a							; clear Carry Flag												;57f9	b7 	.
4598  57FA C9           	ret								; -------------- End of proc (with Error) ---------------------	;57fa	c9 	.
4599  57FB
4600  57FB
4601  57FB
4602  57FB              RAM_ReadIDAM_Crc:
4603  57FB 00           	nop								; delay 4 clock cycles											;57fb	00 	.
4604  57FC 00           	nop								; delay 4 clock cycles											;57fc	00 	.
4605  57FD 00           	nop								; delay 4 clock cycles											;57fd	00 	.
4606  57FE C3 01 58     	jp .continue1					; delay 10 clock cycles											;57fe	c3 01 58 	. . X
4607  5801              .continue1:
4608  5801 3E 00        	ld a,0							; delay 7 clock cycles	(29 in total)							;5801	3e 00 	> .
4609  5803 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5803	db 11 	. .
4610  5805              .waitClockBit1:
4611  5805              ; -- wait for FDC Clock Pulse
4612  5805 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5805	ed 78 	. x
4613  5807 F2 05 58     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5807	f2 05 58 	. . X
4614  580A 2B           	dec hl							; delay 6 clock cycles											;580a	2b 	+
4615  580B 23           	inc hl							; delay 6 clock cycles											;580b	23 	#
4616  580C 2B           	dec hl							; delay 6 clock cycles											;580c	2b 	+
4617  580D 23           	inc hl							; delay 6 clock cycles											;580d	23 	#
4618  580E 2B           	dec hl							; delay 6 clock cycles											;580e	2b 	+
4619  580F 23           	inc hl							; delay 6 clock cycles											;580f	23 	#
4620  5810 00           	nop								; delay 4 clock cycles											;5810	00 	.
4621  5811 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5811	3e 00 	> .
4622  5813 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;5813	db 11 	. .
4623  5815              .waitClockBit2:
4624  5815              ; -- wait for FDC Clock Pulse
4625  5815 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5815	ed 78 	. x
4626  5817 F2 15 58     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5817	f2 15 58 	. . X
4627  581A 2B           	dec hl							; delay 6 clock cycles											;581a	2b 	+
4628  581B 23           	inc hl							; delay 6 clock cycles											;581b	23 	#
4629  581C 2B           	dec hl							; delay 6 clock cycles											;581c	2b 	+
4630  581D 23           	inc hl							; delay 6 clock cycles											;581d	23 	#
4631  581E 2B           	dec hl							; delay 6 clock cycles											;581e	2b 	+
4632  581F 23           	inc hl							; delay 6 clock cycles											;581f	23 	#
4633  5820 00           	nop								; delay 4 clock cycles											;5820	00 	.
4634  5821 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5821	3e 00 	> .
4635  5823 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5823	db 11 	. .
4636  5825              .waitClockBit3:
4637  5825              ; -- wait for FDC Clock Pulse
4638  5825 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5825	ed 78 	. x
4639  5827 F2 25 58     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5827	f2 25 58 	. % X
4640  582A 2B           	dec hl							; delay 6 clock cycles											;582a	2b 	+
4641  582B 23           	inc hl							; delay 6 clock cycles											;582b	23 	#
4642  582C 2B           	dec hl							; delay 6 clock cycles											;582c	2b 	+
4643  582D 23           	inc hl							; delay 6 clock cycles											;582d	23 	#
4644  582E 2B           	dec hl							; delay 6 clock cycles											;582e	2b 	+
4645  582F 23           	inc hl							; delay 6 clock cycles											;582f	23 	#
4646  5830 00           	nop								; delay 4 clock cycles											;5830	00 	.
4647  5831 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5831	3e 00 	> .
4648  5833 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5833	db 11 	. .
4649  5835              .waitClockBit4:
4650  5835              ; -- wait for FDC Clock Pulse
4651  5835 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5835	ed 78 	. x
4652  5837 F2 35 58     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5837	f2 35 58 	. 5 X
4653  583A 2B           	dec hl							; delay 6 clock cycles											;583a	2b 	+
4654  583B 23           	inc hl							; delay 6 clock cycles											;583b	23 	#
4655  583C 2B           	dec hl							; delay 6 clock cycles											;583c	2b 	+
4656  583D 23           	inc hl							; delay 6 clock cycles											;583d	23 	#
4657  583E 2B           	dec hl							; delay 6 clock cycles											;583e	2b 	+
4658  583F 23           	inc hl							; delay 6 clock cycles											;583f	23 	#
4659  5840 00           	nop								; delay 4 clock cycles											;5840	00 	.
4660  5841 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5841	3e 00 	> .
4661  5843 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5843	db 11 	. .
4662  5845              .waitClockBit5:
4663  5845              ; -- wait for FDC Clock Pulse
4664  5845 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5845	ed 78 	. x
4665  5847 F2 45 58     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5847	f2 45 58 	. E X
4666  584A 2B           	dec hl							; delay 6 clock cycles											;584a	2b 	+
4667  584B 23           	inc hl							; delay 6 clock cycles											;584b	23 	#
4668  584C 2B           	dec hl							; delay 6 clock cycles											;584c	2b 	+
4669  584D 23           	inc hl							; delay 6 clock cycles											;584d	23 	#
4670  584E 2B           	dec hl							; delay 6 clock cycles											;584e	2b 	+
4671  584F 23           	inc hl							; delay 6 clock cycles											;584f	23 	#
4672  5850 00           	nop								; delay 4 clock cycles											;5850	00 	.
4673  5851 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5851	3e 00 	> .
4674  5853 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;5853	db 11 	. .
4675  5855              .waitClockBit6:
4676  5855              ; -- wait for FDC Clock Pulse
4677  5855 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5855	ed 78 	. x
4678  5857 F2 55 58     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;5857	f2 55 58 	. U X
4679  585A 2B           	dec hl							; delay 6 clock cycles											;585a	2b 	+
4680  585B 23           	inc hl							; delay 6 clock cycles											;585b	23 	#
4681  585C 2B           	dec hl							; delay 6 clock cycles											;585c	2b 	+
4682  585D 23           	inc hl							; delay 6 clock cycles											;585d	23 	#
4683  585E 2B           	dec hl							; delay 6 clock cycles											;585e	2b 	+
4684  585F 23           	inc hl							; delay 6 clock cycles											;585f	23 	#
4685  5860 00           	nop								; delay 4 clock cycles											;5860	00 	.
4686  5861 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5861	3e 00 	> .
4687  5863 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;5863	db 11 	. .
4688  5865              .waitClockBit7:
4689  5865              ; -- wait for FDC Clock Pulse
4690  5865 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5865	ed 78 	. x
4691  5867 F2 65 58     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;5867	f2 65 58 	. e X
4692  586A 2B           	dec hl							; delay 6 clock cycles											;586a	2b 	+
4693  586B 23           	inc hl							; delay 6 clock cycles											;586b	23 	#
4694  586C 2B           	dec hl							; delay 6 clock cycles											;586c	2b 	+
4695  586D 23           	inc hl							; delay 6 clock cycles											;586d	23 	#
4696  586E 2B           	dec hl							; delay 6 clock cycles											;586e	2b 	+
4697  586F 23           	inc hl							; delay 6 clock cycles											;586f	23 	#
4698  5870 00           	nop								; delay 4 clock cycles											;5870	00 	.
4699  5871 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5871	3e 00 	> .
4700  5873 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;5873	db 11 	. .
4701  5875
4702  5875              ; -- We have IDAM Crc read (expected the same as calculated before for this track and sector)
4703  5875
4704  5875 BA           	cp d							; is it the same as calculated?									;5875	ba 	.
4705  5876 C2 31 54     	jp nz,RAM_WaitFor80				; no - start over and read again								;5876	c2 31 54 	. 1 T
4706  5879
4707  5879              ; -- Found requested Sector and Crc is OK - return with Error 00
4708  5879
4709  5879 AF           	xor a							; set Error Code 00 - NO ERROR									;5879	af 	.
4710  587A C9           	ret								; -------------------- End of Proc ----------------------------	;587a	c9 	.
4711  587B
4712  587B
4713  587B
4714  587B              ;***************************************************************************************************
4715  587B              ; Create an entry in the directory
4716  587B              ; IN: (iy+Filename) - name of file to create
4717  587B              ;     (iy+FileType) - type of file to create ('T','B', etc)
4718  587B              ;     Interrupt disabled
4719  587B              ; OUT: a - Error code
4720  587B              ;     (iy+NextTrackNo) - Track where is 1st sector for data
4721  587B              ;     (iy+NextSectorNo) - 1st sector for data
4722  587B              ;***************************************************************************************************
4723  587B              CREATEDIRENTRY:
4724  587B              ; -- check if requested fire already exists
4725  587B CD 13 59     	call FINDFILE					; Search for file in Disk Directory 							;587b	cd 13 59 	. . Y
4726  587E FE 0D        	cp 13							; Error 13 - File Not Found?									;587e	fe 0d 	. .
4727  5880 28 02        	jr z,.checkSpace				; yes - continute and check if there is enough space			;5880	28 02 	( .
4728  5882 B7           	or a							; other error? (FILE ALREADY EXISTS, CHECKSUM ERROR, etc)?		;5882	b7 	.
4729  5883 C0           	ret nz							; yes ------------------- End of Proc (with Error) ------------	;5883	c0 	.
4730  5884
4731  5884              .checkSpace:
4732  5884              ; -- check if there is enough space for new Entry in Directory
4733  5884 CD 68 59     	call FINDFREESPACE				; Search empty space in Directory								;5884	cd 68 59 	. h Y
4734  5887 B7           	or a							; was any Error? 												;5887	b7 	.
4735  5888 C0           	ret nz							; yes - ------------ End of Proc (with Error) -----------------	;5888	c0 	.
4736  5889
4737  5889              ; -- hl will point to address in Data Buffer with empty space for new Directory Entry
4738  5889 FD 56 11     	ld d,(iy+UserSectorNo)			; d - Sector Number with empty Directory Entry					;5889	fd 56 11 	. V .
4739  588C D5           	push de							; save de - Sector number										;588c	d5 	.
4740  588D E5           	push hl							; save hl - address in Data Buffer								;588d	e5 	.
4741  588E              ; -- find first not used Sector on Disk
4742  588E CD BF 58     	call FINDEMPTYSEC				; Search for empty sector in Map and mark it as used (allocate)	;588e	cd bf 58 	. . X
4743  5891 E1           	pop hl							; restore hl - address in Data Buffer of Directory Entry		;5891	e1 	.
4744  5892 D1           	pop de							; restore d - Sector Number with empty Directory Entry			;5892	d1 	.
4745  5893 B7           	or a							; any Sector allocate error? 									;5893	b7 	.
4746  5894 C0           	ret nz							; yes --------------- End of Proc (with Error) ----------------	;5894	c0 	.
4747  5895
4748  5895
4749  5895              ; -- read Sector with empty space for new Directory Entry
4750  5895 FD 72 11     	ld (iy+UserSectorNo),d			; set Sector Number (track is still 0)							;5895	fd 72 11 	. r .
4751  5898 E5           	push hl							; save hl - address in Data Buffer of new Directory Entry		;5898	e5 	.
4752  5899 CD 27 5B     	call READSECTOR					; Read a sector from disk into Data Buffer						;5899	cd 27 5b 	. ' [
4753  589C E1           	pop hl							; restore hl - address in Data Buffer of new Directory Entry	;589c	e1 	.
4754  589D B7           	or a							; any Sector Read error? 										;589d	b7 	.
4755  589E C0           	ret nz							; yes --------------- End of Proc (with Error) ----------------	;589e	c0 	.
4756  589F
4757  589F              ; -- create Directory Entry - fill with data
4758  589F EB           	ex de,hl						; de - address in Data Buffer (Entry block)						;589f	eb 	.
4759  58A0              ; -- store File Type
4760  58A0 FD 7E 09     	ld a,(iy+FileType)				; a - File Type specified by user								;58a0	fd 7e 09 	. ~ .
4761  58A3 12           	ld (de),a						; store as 1st char in Directory Entry							;58a3	12 	.
4762  58A4              ; -- store constant separator char
4763  58A4 13           	inc de							; de - address of separator										;58a4	13 	.
4764  58A5 3E 3A        	ld a,':'						; a - separator char ':'										;58a5	3e 3a 	> :
4765  58A7 12           	ld (de),a						; store as 2nd char in Directory Entry							;58a7	12 	.
4766  58A8              ; -- store filename (8 chars)
4767  58A8 13           	inc de							; de - address of filename area									;58a8	13 	.
4768  58A9 FD E5        	push iy							; iy - DOS base address											;58a9	fd e5 	. .
4769  58AB E1           	pop hl							; hl - DOS base address											;58ab	e1 	.
4770  58AC 23           	inc hl							; hl - points to filename field									;58ac	23 	#
4771  58AD 01 08 00     	ld bc,8							; bc - 8 chars to copy											;58ad	01 08 00 	. . .
4772  58B0 ED B0        	ldir							; copy filename													;58b0	ed b0 	. .
4773  58B2              ; -- store file start Track number
4774  58B2 FD 7E 16     	ld a,(iy+NextTrackNo)			; a - Track number 												;58b2	fd 7e 16 	. ~ .
4775  58B5 12           	ld (de),a						; store as 10th byte in Directory Entry							;58b5	12 	.
4776  58B6              ; -- store file start Sector number
4777  58B6 13           	inc de							; de - address of start Sector number byte						;58b6	13 	.
4778  58B7 FD 7E 15     	ld a,(iy+NextSectorNo)			; a - Sector number												;58b7	fd 7e 15 	. ~ .
4779  58BA 12           	ld (de),a						; store as 11th byte in Directory Entry							;58ba	12 	.
4780  58BB CD A1 59     	call WRITESECTOR				; Write back sector with Directory Entries to disk				;58bb	cd a1 59 	. . Y
4781  58BE C9           	ret								; ---------- End of Proc (with Error from WRITESECTOR) --------	;58be	c9 	.
4782  58BF
4783  58BF
4784  58BF              ;***************************************************************************************************
4785  58BF              ; Search for an empty sector in the track map.
4786  58BF              ; IN: (iy+MapAddress) - address of Disk Map data
4787  58BF              ; OUT: a - Error Code
4788  58BF              ;      hl - address in Disk Map data of byte bitmap for empty sector
4789  58BF              ;      (iy+NextSectorNo) - number of first not used Serctor
4790  58BF              ;      (iy+NextTrackNo) - Track number with first not used Serctor
4791  58BF              ;
4792  58BF              ;***************************************************************************************************
4793  58BF              FINDEMPTYSEC:
4794  58BF              ; -- setup starting point
4795  58BF FD 36 16 01  	ld (iy+NextTrackNo),1			; start search from Track 1										;58bf	fd 36 16 01 	. 6 . .
4796  58C3 FD 36 15 00  	ld (iy+NextSectorNo),0			; start search from Sector 0									;58c3	fd 36 15 00 	. 6 . .
4797  58C7 FD 6E 34     	ld l,(iy+MapAddress)																			;58c7	fd 6e 34 	. n 4
4798  58CA FD 66 35     	ld h,(iy+MapAddress+1)			; hl - address of Disk Map data									;58ca	fd 66 35 	. f 5
4799  58CD 2B           	dec hl							; hl - point to byte just before Disk Map data					;58cd	2b 	+
4800  58CE              .nextMapByte:
4801  58CE 23           	inc hl							; hl - address of Map byte										;58ce	23 	#
4802  58CF 4E           	ld c,(hl)						; c - 8 bit for 8 disk sectors - bit set means sector is used	;58cf	4e 	N
4803  58D0              .checkNextBit:
4804  58D0 CB 09        	rrc c							; Carry flag - least significant bit - is Sector used?			;58d0	cb 09 	. .
4805  58D2 30 2B        	jr nc,.markSectorUsed			; no - mark it as Used and update Disk Map in buffer			;58d2	30 2b 	0 +
4806  58D4
4807  58D4              ; -- current Sector is used - get next sector number
4808  58D4 FD 34 15     	inc (iy+NextSectorNo)			; increment Sector number										;58d4	fd 34 15 	. 4 .
4809  58D7 FD 7E 15     	ld a,(iy+NextSectorNo)			; a - sector number												;58d7	fd 7e 15 	. ~ .
4810  58DA FE 08        	cp 8							; is it 8? - sector marked in next Map Byte						;58da	fe 08 	. .
4811  58DC 20 F2        	jr nz,.checkNextBit				; no - check next bit of current Map Byte						;58dc	20 f2 	  .
4812  58DE
4813  58DE              ; -- 8 sectors checked - get next byte from Disk Map
4814  58DE 23           	inc hl							; hl - address of Map byte										;58de	23 	#
4815  58DF 4E           	ld c,(hl)						; c - 8 bit for 8 disk sectors - bit set means sector is used	;58df	4e 	N
4816  58E0              .checkNextBit1:
4817  58E0 CB 09        	rrc c							; Carry flag - least significant bit - is Sector used?			;58e0	cb 09 	. .
4818  58E2 30 1B        	jr nc,.markSectorUsed			; no - mark it as Used and update Disk Map in buffer			;58e2	30 1b 	0 .
4819  58E4
4820  58E4              ; -- current Sector is used - get next sector number
4821  58E4 FD 34 15     	inc (iy+NextSectorNo)			; increment Sector number										;58e4	fd 34 15 	. 4 .
4822  58E7 FD 7E 15     	ld a,(iy+NextSectorNo)			; a - sector number												;58e7	fd 7e 15 	. ~ .
4823  58EA FE 10        	cp 16							; is it 16? - sector marked in next Map Byte					;58ea	fe 10 	. .
4824  58EC 20 F2        	jr nz,.checkNextBit1			; no - check next bit of current Map Byte						;58ec	20 f2 	  .
4825  58EE
4826  58EE              ; -- 16 sectors checked (whole track) - set sector 0 on next track
4827  58EE FD 36 15 00  	ld (iy+NextSectorNo),0			; set Sector number 0											;58ee	fd 36 15 00 	. 6 . .
4828  58F2 FD 34 16     	inc (iy+NextTrackNo)			; increment Track number										;58f2	fd 34 16 	. 4 .
4829  58F5 FD 7E 16     	ld a,(iy+NextTrackNo)			; a - Track number												;58f5	fd 7e 16 	. ~ .
4830  58F8 FE 28        	cp 40							; is it 40? - all Tracks checked already?						;58f8	fe 28 	. (
4831  58FA 20 D2        	jr nz,.nextMapByte				; no - continue to check all 40 tracks 							;58fa	20 d2 	  .
4832  58FC
4833  58FC              ; -- all sectors on all tracks are used - return Error 07 - DISK FULL
4834  58FC 3E 07        	ld a,7							; a - Error 07 - DISK FULL										;58fc	3e 07 	> .
4835  58FE C9           	ret								; ----------------- End of Proc (with Error) ------------------	;58fe	c9 	.
4836  58FF
4837  58FF              ; -- found 1st empty sector - mark it as used (allocate) and update Disk Map
4838  58FF              .markSectorUsed:
4839  58FF              ; -- update Map Byte
4840  58FF CB 01        	rlc c							; rotate back Map Byte so bit 0 is for current sector 			;58ff	cb 01 	. .
4841  5901 CB C1        	set 0,c							; set current Sector as used									;5901	cb c1 	. .
4842  5903              ; -- restore place and order of bits in Map Byte
4843  5903 FD 7E 15     	ld a,(iy+NextSectorNo)			; a - current Sector number										;5903	fd 7e 15 	. ~ .
4844  5906 E6 07        	and %0111						; a - how many times we rotated Map Byte so far					;5906	e6 07 	. .
4845  5908 3C           	inc a							; pre increment counter											;5908	3c 	<
4846  5909 47           	ld b,a							; b - loop couner for rotate Map Byte back						;5909	47 	G
4847  590A CB 09        	rrc c							; rotate Map Byte to match current Sector						;590a	cb 09 	. .
4848  590C              .rotateBack:
4849  590C CB 01        	rlc c							; rotate Map Byte												;590c	cb 01 	. .
4850  590E 10 FC        	djnz .rotateBack				; continute to rotate Map Byte b times							;590e	10 fc 	. .
4851  5910 71           	ld (hl),c						; store back modified byte to Disk Map memory					;5910	71 	q
4852  5911 AF           	xor a							; a - Error 00 - NO ERROR										;5911	af 	.
4853  5912 C9           	ret								; ---------------------- End of Proc --------------------------	;5912	c9 	.
4854  5913
4855  5913
4856  5913              ;***************************************************************************************************
4857  5913              ; Search for matching of filename in IY+FNAM with that in the directory.
4858  5913              ; IN: interrupt disabled
4859  5913              ;     (iy+Filename) - filename of file to find
4860  5913              ; OUT: a - Error code
4861  5913              ; --- in case Error 02 - FILE ALREADY EXISTS ----
4862  5913              ;      de - address of file track number (next byte after filename in loaded Directory Entry)
4863  5913              ;***************************************************************************************************
4864  5913              FINDFILE:
4865  5913              ; -- setup starting condition: data buffer, track and sector number
4866  5913 FD 6E 31     	ld l,(iy+DataBuf)				; hl - address of DOS Data Buffer								;5913	fd 6e 31 	. n 1
4867  5916 FD 66 32     	ld h,(iy+DataBuf+1)																				;5916	fd 66 32 	. f 2
4868  5919 FD 36 12 00  	ld (iy+UserTrackNo),0			; search will start from Track Number 0							;5919	fd 36 12 00 	. 6 . .
4869  591D FD 36 11 00  	ld (iy+UserSectorNo),0			; search will start from Sector Number 0						;591d	fd 36 11 00 	. 6 . .
4870  5921
4871  5921              ; -- read Sector from Disk and compare all directory entries
4872  5921              .readNextSector:
4873  5921 CD 27 5B     	call READSECTOR					; Read a sector from disk into iy+SectorBuffer					;5921	cd 27 5b 	. ' [
4874  5924 B7           	or a							; was any Error? 												;5924	b7 	.
4875  5925 C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine							;5925	c2 41 42 	. A B
4876  5928
4877  5928              ; -- we have sector with disk directory entries - read Directory Entry
4878  5928 06 08        	ld b,8							; b - 8 Directory Entries in 1 Sector							;5928	06 08 	. .
4879  592A FD 6E 31     	ld l,(iy+DataBuf)																				;592a	fd 6e 31 	. n 1
4880  592D FD 66 32     	ld h,(iy+DataBuf+1)				; hl - address of Data Buffer with 1st directory entry			;592d	fd 66 32 	. f 2
4881  5930 FD E5        	push iy							; iy - DOS base address											;5930	fd e5 	. .
4882  5932 D1           	pop de							; copy to de register											;5932	d1 	.
4883  5933 13           	inc de							; de + 1 - address of searched filename in DOS base structure	;5933	13 	.
4884  5934              .compareEntry:
4885  5934 7E           	ld a,(hl)						; a - 1st char from disk - fileType								;5934	7e 	~
4886  5935 B7           	or a							; is it 0? - no more directory entries in data					;5935	b7 	.
4887  5936 C8           	ret z							; yes - ------------ End of Proc (No Error) -------------------	;5936	c8 	.
4888  5937
4889  5937              ; -- filetype other than 0
4890  5937 D5           	push de							; save de - address of filename to find (to compare)			;5937	d5 	.
4891  5938 E5           	push hl							; save hl - address in Data Buffer of directory entry			;5938	e5 	.
4892  5939 FE 01        	cp 1							; is filetype = 1 (deleted file entry)							;5939	fe 01 	. .
4893  593B 28 16        	jr z,.nextDirEntry				; yes - get next directory entry								;593b	28 16 	( .
4894  593D              ; -- filetype other than 0 or 1
4895  593D FD 77 0A     	ld (iy+FileType+1),a			; store filetype in filetype field of DOS structure (2nd byte)	;593d	fd 77 0a 	. w .
4896  5940 23           	inc hl							; skip 1 byte from Data Buffer (that will be ':')				;5940	23 	#
4897  5941 23           	inc hl							; hl - points to filename chars in Data Buffer					;5941	23 	#
4898  5942
4899  5942
4900  5942              ; -- compare if filename from Data Buffer (entry) equals searched fileane
4901  5942 0E 08        	ld c,8							; c - max 8 chars of filename									;5942	0e 08 	. .
4902  5944 EB           	ex de,hl						; de - address in Data Buffer, hl - address in DOS structure	;5944	eb 	.
4903  5945              .compareNextChar:
4904  5945 1A           	ld a,(de)						; a - char of filename to find									;5945	1a 	.
4905  5946 BE           	cp (hl)							; is it equal to char of filename from Disk?					;5946	be 	.
4906  5947 20 0A        	jr nz,.nextDirEntry				; no - skip to next Directory Entry								;5947	20 0a 	  .
4907  5949 23           	inc hl							; yes - point to next char from Disk							;5949	23 	#
4908  594A 13           	inc de							; de - point to next char of filename to find					;594a	13 	.
4909  594B 0D           	dec c							; decrement chars to compare counter - all compared?			;594b	0d 	.
4910  594C 20 F7        	jr nz,.compareNextChar			; no - continute to compare all 8 chars							;594c	20 f7 	  .
4911  594E              ; -- filenames match
4912  594E F1           	pop af							; discard (hl) from Stack Pointer								;594e	f1 	.
4913  594F F1           	pop af							; discard (de) from Stack Pointer								;594f	f1 	.
4914  5950 3E 02        	ld a,2							; a - Error 02 - FILE ALREADY EXISTS							;5950	3e 02 	> .
4915  5952 C9           	ret								; ------------------ End of Proc (with Error 02) --------------	;5952	c9 	.
4916  5953              .nextDirEntry:
4917  5953              ; -- deleted file
4918  5953 E1           	pop hl							; restore hl - address in Data Buffer of directory entry		;5953	e1 	.
4919  5954 11 10 00     	ld de,16						; de - 16 bytes per directory entry 							;5954	11 10 00 	. . .
4920  5957 19           	add hl,de						; hl - point to next entry										;5957	19 	.
4921  5958 D1           	pop de							; restore de - address of filename to find (to compare)			;5958	d1 	.
4922  5959 10 D9        	djnz .compareEntry				; continue to compare all 8 dir entries in this Sector			;5959	10 d9 	. .
4923  595B
4924  595B              ; -- all 8 entries compared - read next Sector
4925  595B FD 34 11     	inc (iy+UserSectorNo)			; increment Sector number (track still 0) to read				;595b	fd 34 11 	. 4 .
4926  595E FD 7E 11     	ld a,(iy+UserSectorNo)			; a - next sector number										;595e	fd 7e 11 	. ~ .
4927  5961 FE 0F        	cp 15							; is it 15? - end of disk directory (only 14 sectors) 			;5961	fe 0f 	. .
4928  5963 20 BC        	jr nz,.readNextSector			; no - continure to search all 14 sectors						;5963	20 bc 	  .
4929  5965
4930  5965              ; -- all 14 sectors scaned
4931  5965 3E 0D        	ld a,13							; a - Error 13 - FILE NOT FOUND									;5965	3e 0d 	> .
4932  5967 C9           	ret								; ------------------ End of Proc (with Error 13) --------------	;5967	c9 	.
4933  5968
4934  5968
4935  5968
4936  5968              ;***************************************************************************************************
4937  5968              ; Search for an empty space in the directory.
4938  5968              ; IN: Interrupt disabled.
4939  5968              ; OUT: a - Error Code
4940  5968              ;      hl - address od first empty directory entry (in Data Buffer)
4941  5968              ;      (iy+UserSectorNo) - sector with empty entry (already loaded to Data Buf)
4942  5968              ;      (iy+UserTrackNo) - track where is sector with empty entry (already loaded to Data Buf)
4943  5968              ;***************************************************************************************************
4944  5968              FINDFREESPACE:
4945  5968              ; -- setup starting condition: data buffer, track and sector number
4946  5968 FD 6E 31     	ld l,(iy+DataBuf)				; hl - address of DOS Data Buffer								;5968	fd 6e 31 	. n 1
4947  596B FD 66 32     	ld h,(iy+DataBuf+1)																				;596b	fd 66 32 	. f 2
4948  596E FD 36 12 00  	ld (iy+UserTrackNo),0			; search will start from Track Number 0							;596e	fd 36 12 00 	. 6 . .
4949  5972 FD 36 11 00  	ld (iy+UserSectorNo),0			; search will start from Sector Number 0						;5972	fd 36 11 00 	. 6 . .
4950  5976
4951  5976              ; -- read Sector from Disk and find first empty place for directory entry
4952  5976              .readNextSector:
4953  5976 CD 27 5B     	call READSECTOR					; Read a sector from disk into iy+SectorBuffer					;5976	cd 27 5b 	. ' [
4954  5979 B7           	or a							; was any Error? 												;5979	b7 	.
4955  597A C2 41 42     	jp nz,DOSError					; yes - go to Error handling routine							;597a	c2 41 42 	. A B
4956  597D
4957  597D              ; -- we have sector with disk directory entries - read Directory Entry
4958  597D 06 08        	ld b,8							; b - 8 Directory Entries in 1 Sector							;597d	06 08 	. .
4959  597F FD 6E 31     	ld l,(iy+DataBuf)																				;597f	fd 6e 31 	. n 1
4960  5982 FD 66 32     	ld h,(iy+DataBuf+1)				; hl - address of Data Buffer with 1st directory/file entry		;5982	fd 66 32 	. f 2
4961  5985              .checkDirEntry:
4962  5985 7E           	ld a,(hl)						; a - 1st char from disk - fileType								;5985	7e 	~
4963  5986 B7           	or a							; is it 0? - no more directory entries in data					;5986	b7 	.
4964  5987 C8           	ret z							; yes - ------------ End of Proc (No Error) -------------------	;5987	c8 	.
4965  5988
4966  5988              ; -- filetype other than 0
4967  5988 FE 01        	cp 1							; is filetype = 1 (deleted file entry)?							;5988	fe 01 	. .
4968  598A 20 02        	jr nz,.nextDirEntry				; no - get next directory entry									;598a	20 02 	  .
4969  598C              ; -- deleted file entry - we can reuse it - return with No Error
4970  598C AF           	xor a							; a - Error 00 - NO ERROR										;598c	af 	.
4971  598D C9           	ret								; ------------------ End of Proc (No Error) -------------------	;598d	c9 	.
4972  598E
4973  598E              .nextDirEntry:
4974  598E 11 10 00     	ld de,16						; de - 16 bytes per directory entry 							;598e	11 10 00 	. . .
4975  5991 19           	add hl,de						; hl - point to next entry										;5991	19 	.
4976  5992 10 F1        	djnz .checkDirEntry				; continue to check all 8 dir entries in this Sector			;5992	10 f1 	. .
4977  5994
4978  5994              ; -- all 8 entries checked - read next Sector
4979  5994 FD 34 11     	inc (iy+UserSectorNo)			; increment Sector number (track still 0) to read				;5994	fd 34 11 	. 4 .
4980  5997 FD 7E 11     	ld a,(iy+UserSectorNo)			; a - next sector number										;5997	fd 7e 11 	. ~ .
4981  599A FE 0F        	cp 15							; is it 15? - end of disk directory (only 14 sectors) 			;599a	fe 0f 	. .
4982  599C 20 D8        	jr nz,.readNextSector			; no - continure to search all 14 sectors						;599c	20 d8 	  .
4983  599E
4984  599E              ; -- all 14 sectors scaned
4985  599E 3E 03        	ld a,3							; a - Error 03 - DIRECTORY FULL									;599e	3e 03 	> .
4986  59A0 C9           	ret								; ---------------- End of Proc (with Error) -------------------	;59a0	c9 	.
4987  59A1
4988  59A1
4989  59A1
4990  59A1              ;***************************************************************************************************
4991  59A1              ; Write the content of the buffer pointed to by iy+DataBuf to the track and sector
4992  59A1              ; specified by user.
4993  59A1              ; IN: (iy+UserTrackNo) - track number
4994  59A1              ;     (iy+UserSeckNo) - sector number
4995  59A1              ;     (iy+DataBuf) - address of 128 bytes buffer with data to write
4996  59A1              ; OUT: a - Error code
4997  59A1              ;***************************************************************************************************
4998  59A1              WRITESECTOR:
4999  59A1              ; -- calculate CRC
5000  59A1 CD 10 5B     	call CalcSectorCRC				; Calculate Sector Checksum and sore in de register				;59a1	cd 10 5b 	. . [
5001  59A4 D5           	push de							; save de - calculated Checksum of Sector data					;59a4	d5 	.
5002  59A5
5003  59A5              ; -- store Checksum into Sector Buffer
5004  59A5 FD E5        	push iy							; iy - DOS base address											;59a5	fd e5 	. .
5005  59A7 E1           	pop hl							; copy to hl													;59a7	e1 	.
5006  59A8 11 CD 00     	ld de,SectorBuffer+128			; de - offset where CRC to be stored (just after sector data)	;59a8	11 cd 00 	. . .
5007  59AB 19           	add hl,de						; hl - address in Sector Buffer to store Checksum 				;59ab	19 	.
5008  59AC D1           	pop de							; restore de - calculated Checksum of Sector data				;59ac	d1 	.
5009  59AD 73           	ld (hl),e						; store LSB of Checksum											;59ad	73 	s
5010  59AE 23           	inc hl							; hl - points to MSB											;59ae	23 	#
5011  59AF 72           	ld (hl),d						; store MSB of Checksum											;59af	72 	r
5012  59B0
5013  59B0              ; -- find sector to write to and set ready to write data
5014  59B0 FD E5        	push iy							; iy - DOS base address											;59b0	fd e5 	. .
5015  59B2 E1           	pop hl							; copy to hl													;59b2	e1 	.
5016  59B3 11 43 00     	ld de,SectorHeader				; de - offset to Sector Header bytes							;59b3	11 43 00 	. C .
5017  59B6 19           	add hl,de						; hl - address of Sector Header bytes							;59b6	19 	.
5018  59B7 06 8C        	ld b,10+128+2					; 10 bytes GAP2+IDAM, 128 bytes Sector Data, 2 bytes CRC		;59b7	06 8c 	. .
5019  59B9 D9           	exx								; save bc,de,hl to alternate registers							;59b9	d9 	.
5020  59BA CD EA 53     	call ReadIDAddressMark			; Read identification address mark (Disk head on start sector)	;59ba	cd ea 53 	. . S
5021  59BD CA C6 59     	jp z,.setWriteReqActive			; 0 - no error - set Write Request and continue					;59bd	ca c6 59 	. . Y
5022  59C0              ; -- we have Error - was it canceled by user (pressing Break Key)?
5023  59C0 FE 11        	cp 17							; was it Error 17 - BREAK?										;59c0	fe 11 	. .
5024  59C2 C8           	ret z							; yes -------------- End of Proc (with Error) -----------------	;59c2	c8 	.
5025  59C3              ; -- other error - return with Error 9 - SECTOR NOT FOUND
5026  59C3 3E 09        	ld a,9							; a - Error 9 - SECTOR NOT FOUND								;59c3	3e 09 	> .
5027  59C5 C9           	ret								; ------------------ End of Proc (with Error) -----------------	;59c5	c9 	.
5028  59C6
5029  59C6
5030  59C6              .setWriteReqActive:
5031  59C6 D9           	exx								; restore bc,de,hl from alternate registers						;59c6	d9 	.
5032  59C7              ; -- set Write Request bit in hardware Floppy Control Register
5033  59C7 FD 56 33     	ld d,(iy+FLCtrlShadow)			; d - value last sent to FLCtrl									;59c7	fd 56 33 	. V 3
5034  59CA CB B2        	res 6,d							; clear bit 6 - Write Request (active)							;59ca	cb b2 	. .
5035  59CC 7A           	ld a,d							; a - new value of Control bits									;59cc	7a 	z
5036  59CD D3 10        	out (FLCTRL),a					; set Write Request Bit to 0 (active)							;59cd	d3 10 	. .
5037  59CF
5038  59CF              ; --------------------------------------------------------------------------------------------------
5039  59CF              ; IN: b - number of bytes to write
5040  59CF              ;     d - backed up value sent to FDC Control Register
5041  59CF              ;     hl - pointer to current byte in Copy Buffer
5042  59CF              WS_WriteByte:
5043  59CF 4E           	ld c,(hl)						; c - byte from buffer to send		 							;59cf	4e 	N
5044  59D0
5045  59D0              ; -- write bit 7 of data byte
5046  59D0 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;59d0	3e 20 	>
5047  59D2 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;59d2	aa 	.
5048  59D3              ; -- set CY flag to bit 7 of data byte
5049  59D3 CB 11        	rl c							; Carry flag = bit 7 of data byte - is it 1?					;59d3	cb 11 	. .
5050  59D5 D2 E3 59     	jp nc,.writeBit7_0				; no - write cell with data bit = 0								;59d5	d2 e3 59 	. . Y
5051  59D8              .writeBit7_1:
5052  59D8              ; -- write cell with bit=1 - 0-1 or 1-0
5053  59D8 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;59d8	d3 10 	. .
5054  59DA EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;59da	ee 20 	.
5055  59DC 57           	ld d,a							; save as last value sent to FLCTRL								;59dc	57 	W
5056  59DD 2B           	dec hl							; delay 6 cycles												;59dd	2b 	+
5057  59DE D3 10        	out (FLCTRL),a					; set Write Data Bit 											;59de	d3 10 	. .
5058  59E0 C3 EE 59     	jp .contBit7					; continue with next bit 6										;59e0	c3 ee 59 	. . Y
5059  59E3              .writeBit7_0:
5060  59E3              ; -- write cell with bit=0 - 0-0 or 1-1
5061  59E3 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;59e3	d3 10 	. .
5062  59E5 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;59e5	ee 00 	. .
5063  59E7 57           	ld d,a							; save as last value sent to FLCTRL								;59e7	57 	W
5064  59E8 2B           	dec hl							; delay 6 cycles												;59e8	2b 	+
5065  59E9 D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;59e9	d3 10 	. .
5066  59EB C3 EE 59     	jp .contBit7					; continue with next bit 6										;59eb	c3 ee 59 	. . Y
5067  59EE              .contBit7:
5068  59EE 23           	inc hl							; delay 6 cycles												;59ee	23 	#
5069  59EF C3 F2 59     	jp .delayBit7					; delay 10 cycles												;59ef	c3 f2 59 	. . Y
5070  59F2              .delayBit7:
5071  59F2 C3 F5 59     	jp .writeBit6Cell				; delay 10 cycles												;59f2	c3 f5 59 	. . Y
5072  59F5
5073  59F5              .writeBit6Cell:
5074  59F5              ; -- write bit 6 of data byte
5075  59F5 DB 12        	in a,(FLPOOL)					; send clock to drive controller								;59f5	db 12 	. .
5076  59F7 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;59f7	3e 20 	>
5077  59F9 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;59f9	aa 	.
5078  59FA              ; -- set CY flag to bit 6 of data byte
5079  59FA CB 11        	rl c							; Carry flag = bit 6 of data byte - is it 1?					;59fa	cb 11 	. .
5080  59FC D2 0A 5A     	jp nc,.writeBit6_0				; no - write cell with data bit = 0								;59fc	d2 0a 5a 	. . Z
5081  59FF              .writeBit6_1:
5082  59FF              ; -- write cell with bit=1 - 0-1 or 1-0
5083  59FF D3 10        	out (FLCTRL),a					; set Write Data Bit 											;59ff	d3 10 	. .
5084  5A01 EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;5a01	ee 20 	.
5085  5A03 57           	ld d,a							; save as last value sent to FLCTRL								;5a03	57 	W
5086  5A04 2B           	dec hl							; delay 6 cycles												;5a04	2b 	+
5087  5A05 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a05	d3 10 	. .
5088  5A07 C3 15 5A     	jp .contBit6					; continue with next bit 5										;5a07	c3 15 5a 	. . Z
5089  5A0A              .writeBit6_0:
5090  5A0A              ; -- write cell with bit=0 - 0-0 or 1-1
5091  5A0A D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a0a	d3 10 	. .
5092  5A0C EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;5a0c	ee 00 	. .
5093  5A0E 57           	ld d,a							; save as last value sent to FLCTRL								;5a0e	57 	W
5094  5A0F 2B           	dec hl							; delay 6 cycles												;5a0f	2b 	+
5095  5A10 D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;5a10	d3 10 	. .
5096  5A12 C3 15 5A     	jp .contBit6					; continue with next bit 5										;5a12	c3 15 5a 	. . Z
5097  5A15              .contBit6:
5098  5A15 23           	inc hl							; delay 6 cycles												;5a15	23 	#
5099  5A16 C3 19 5A     	jp .delayBit6					; delay 10 cycles												;5a16	c3 19 5a 	. . Z
5100  5A19              .delayBit6:
5101  5A19 C3 1C 5A     	jp .writeBit5Cell				; delay 10 cycles												;5a19	c3 1c 5a 	. . Z
5102  5A1C
5103  5A1C              .writeBit5Cell:
5104  5A1C              ; -- write bit 5 of data byte
5105  5A1C DB 12        	in a,(FLPOOL)					; send clock to drive controller								;5a1c	db 12 	. .
5106  5A1E 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;5a1e	3e 20 	>
5107  5A20 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;5a20	aa 	.
5108  5A21              ; -- set CY flag to bit 5 of data byte
5109  5A21 CB 11        	rl c							; Carry flag = bit 5 of data byte - is it 1?					;5a21	cb 11 	. .
5110  5A23 D2 31 5A     	jp nc,.writeBit5_0				; no - write cell with data bit = 0								;5a23	d2 31 5a 	. 1 Z
5111  5A26              .writeBit5_1:
5112  5A26              ; -- write cell with bit=1 - 0-1 or 1-0
5113  5A26 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a26	d3 10 	. .
5114  5A28 EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;5a28	ee 20 	.
5115  5A2A 57           	ld d,a							; save as last value sent to FLCTRL								;5a2a	57 	W
5116  5A2B 2B           	dec hl							; delay 6 cycles												;5a2b	2b 	+
5117  5A2C D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a2c	d3 10 	. .
5118  5A2E C3 3C 5A     	jp .contBit5					; continue with next bit 4										;5a2e	c3 3c 5a 	. < Z
5119  5A31              .writeBit5_0:
5120  5A31              ; -- write cell with bit=0 - 0-0 or 1-1
5121  5A31 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a31	d3 10 	. .
5122  5A33 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;5a33	ee 00 	. .
5123  5A35 57           	ld d,a							; save as last value sent to FLCTRL								;5a35	57 	W
5124  5A36 2B           	dec hl							; delay 6 cycles												;5a36	2b 	+
5125  5A37 D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;5a37	d3 10 	. .
5126  5A39 C3 3C 5A     	jp .contBit5					; continue with next bit 4										;5a39	c3 3c 5a 	. < Z
5127  5A3C              .contBit5:
5128  5A3C 23           	inc hl							; delay 6 cycles												;5a3c	23 	#
5129  5A3D C3 40 5A     	jp .delayBit5					; delay 10 cycles												;5a3d	c3 40 5a 	. @ Z
5130  5A40              .delayBit5:
5131  5A40 C3 43 5A     	jp .writeBit4Cell				; delay 10 cycles												;5a40	c3 43 5a 	. C Z
5132  5A43
5133  5A43              .writeBit4Cell:
5134  5A43              ; -- write bit 4 of data byte
5135  5A43 DB 12        	in a,(FLPOOL)					; send clock to drive controller								;5a43	db 12 	. .
5136  5A45 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;5a45	3e 20 	>
5137  5A47 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;5a47	aa 	.
5138  5A48              ; -- set CY flag to bit 4 of data byte
5139  5A48 CB 11        	rl c							; Carry flag = bit 4 of data byte - is it 1?					;5a48	cb 11 	. .
5140  5A4A D2 58 5A     	jp nc,.writeBit4_0				; no - write cell with data bit = 0								;5a4a	d2 58 5a 	. X Z
5141  5A4D              .writeBit4_1:
5142  5A4D              ; -- write cell with bit=1 - 0-1 or 1-0
5143  5A4D D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a4d	d3 10 	. .
5144  5A4F EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;5a4f	ee 20 	.
5145  5A51 57           	ld d,a							; save as last value sent to FLCTRL								;5a51	57 	W
5146  5A52 2B           	dec hl							; delay 6 cycles												;5a52	2b 	+
5147  5A53 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a53	d3 10 	. .
5148  5A55 C3 63 5A     	jp .contBit4					; continue with next bit 3										;5a55	c3 63 5a 	. c Z
5149  5A58              .writeBit4_0:
5150  5A58              ; -- write cell with bit=0 - 0-0 or 1-1
5151  5A58 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a58	d3 10 	. .
5152  5A5A EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;5a5a	ee 00 	. .
5153  5A5C 57           	ld d,a							; save as last value sent to FLCTRL								;5a5c	57 	W
5154  5A5D 2B           	dec hl							; delay 6 cycles												;5a5d	2b 	+
5155  5A5E D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;5a5e	d3 10 	. .
5156  5A60 C3 63 5A     	jp .contBit4					; continue with next bit 3										;5a60	c3 63 5a 	. c Z
5157  5A63              .contBit4:
5158  5A63 23           	inc hl							; delay 6 cycles												;5a63	23 	#
5159  5A64 C3 67 5A     	jp .delayBit4					; delay 10 cycles												;5a64	c3 67 5a 	. g Z
5160  5A67              .delayBit4:
5161  5A67 C3 6A 5A     	jp .writeBit3Cell				; delay 10 cycles												;5a67	c3 6a 5a 	. j Z
5162  5A6A
5163  5A6A              .writeBit3Cell:
5164  5A6A              ; -- write bit 3 of data byte
5165  5A6A DB 12        	in a,(FLPOOL)					; send clock to drive controller								;5a6a	db 12 	. .
5166  5A6C 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;5a6c	3e 20 	>
5167  5A6E AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;5a6e	aa 	.
5168  5A6F              ; -- set CY flag to bit 3 of data byte
5169  5A6F CB 11        	rl c							; Carry flag = bit 3 of data byte - is it 1?					;5a6f	cb 11 	. .
5170  5A71 D2 7F 5A     	jp nc,.writeBit3_0				; no - write cell with data bit = 0								;5a71	d2 7f 5a 	.  Z
5171  5A74              .writeBit3_1:
5172  5A74              ; -- write cell with bit=1 - 0-1 or 1-0
5173  5A74 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a74	d3 10 	. .
5174  5A76 EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;5a76	ee 20 	.
5175  5A78 57           	ld d,a							; save as last value sent to FLCTRL								;5a78	57 	W
5176  5A79 2B           	dec hl							; delay 6 cycles												;5a79	2b 	+
5177  5A7A D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a7a	d3 10 	. .
5178  5A7C C3 8A 5A     	jp .contBit3					; continue with next bit 2										;5a7c	c3 8a 5a 	. . Z
5179  5A7F              .writeBit3_0:
5180  5A7F              ; -- write cell with bit=0 - 0-0 or 1-1
5181  5A7F D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a7f	d3 10 	. .
5182  5A81 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;5a81	ee 00 	. .
5183  5A83 57           	ld d,a							; save as last value sent to FLCTRL								;5a83	57 	W
5184  5A84 2B           	dec hl							; delay 6 cycles												;5a84	2b 	+
5185  5A85 D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;5a85	d3 10 	. .
5186  5A87 C3 8A 5A     	jp .contBit3					; continue with next bit 2										;5a87	c3 8a 5a 	. . Z
5187  5A8A              .contBit3:
5188  5A8A 23           	inc hl							; delay 6 cycles												;5a8a	23 	#
5189  5A8B C3 8E 5A     	jp .delayBit3					; delay 10 cycles												;5a8b	c3 8e 5a 	. . Z
5190  5A8E              .delayBit3:
5191  5A8E C3 91 5A     	jp .writeBit2Cell				; delay 10 cycles												;5a8e	c3 91 5a 	. . Z
5192  5A91
5193  5A91              .writeBit2Cell:
5194  5A91              ; -- write bit 2 of data byte
5195  5A91 DB 12        	in a,(FLPOOL)					; send clock to drive controller								;5a91	db 12 	. .
5196  5A93 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;5a93	3e 20 	>
5197  5A95 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;5a95	aa 	.
5198  5A96              ; -- set CY flag to bit 2 of data byte
5199  5A96 CB 11        	rl c							; Carry flag = bit 2 of data byte - is it 1?					;5a96	cb 11 	. .
5200  5A98 D2 A6 5A     	jp nc,.writeBit2_0				; no - write cell with data bit = 0								;5a98	d2 a6 5a 	. . Z
5201  5A9B              .writeBit2_1:
5202  5A9B              ; -- write cell with bit=1 - 0-1 or 1-0
5203  5A9B D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5a9b	d3 10 	. .
5204  5A9D EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;5a9d	ee 20 	.
5205  5A9F 57           	ld d,a							; save as last value sent to FLCTRL								;5a9f	57 	W
5206  5AA0 2B           	dec hl							; delay 6 cycles												;5aa0	2b 	+
5207  5AA1 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5aa1	d3 10 	. .
5208  5AA3 C3 B1 5A     	jp .contBit2					; continue with next bit 1										;5aa3	c3 b1 5a 	. . Z
5209  5AA6              .writeBit2_0:
5210  5AA6              ; -- write cell with bit=0 - 0-0 or 1-1
5211  5AA6 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5aa6	d3 10 	. .
5212  5AA8 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;5aa8	ee 00 	. .
5213  5AAA 57           	ld d,a							; save as last value sent to FLCTRL								;5aaa	57 	W
5214  5AAB 2B           	dec hl							; delay 6 cycles												;5aab	2b 	+
5215  5AAC D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;5aac	d3 10 	. .
5216  5AAE C3 B1 5A     	jp .contBit2					; continue with next bit 1										;5aae	c3 b1 5a 	. . Z
5217  5AB1              .contBit2:
5218  5AB1 23           	inc hl							; delay 6 cycles												;5ab1	23 	#
5219  5AB2 C3 B5 5A     	jp .delayBit2					; delay 10 cycles												;5ab2	c3 b5 5a 	. . Z
5220  5AB5              .delayBit2:
5221  5AB5 C3 B8 5A     	jp .writeBit1Cell				; delay 10 cycles												;5ab5	c3 b8 5a 	. . Z
5222  5AB8
5223  5AB8              .writeBit1Cell:
5224  5AB8              ; -- write bit 1 of data byte
5225  5AB8 DB 12        	in a,(FLPOOL)					; send clock to drive controller								;5ab8	db 12 	. .
5226  5ABA 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;5aba	3e 20 	>
5227  5ABC AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;5abc	aa 	.
5228  5ABD              ; -- set CY flag to bit 1 of data byte
5229  5ABD CB 11        	rl c							; Carry flag = bit 1 of data byte - is it 1?					;5abd	cb 11 	. .
5230  5ABF D2 CD 5A     	jp nc,.writeBit1_0				; no - write cell with data bit = 0								;5abf	d2 cd 5a 	. . Z
5231  5AC2              .writeBit1_1:
5232  5AC2              ; -- write cell with bit=1 - 0-1 or 1-0
5233  5AC2 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5ac2	d3 10 	. .
5234  5AC4 EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;5ac4	ee 20 	.
5235  5AC6 57           	ld d,a							; save as last value sent to FLCTRL								;5ac6	57 	W
5236  5AC7 2B           	dec hl							; delay 6 cycles												;5ac7	2b 	+
5237  5AC8 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5ac8	d3 10 	. .
5238  5ACA C3 D8 5A     	jp .contBit1					; continue with next bit 0										;5aca	c3 d8 5a 	. . Z
5239  5ACD              .writeBit1_0:
5240  5ACD              ; -- write cell with bit=0 - 0-0 or 1-1
5241  5ACD D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5acd	d3 10 	. .
5242  5ACF EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;5acf	ee 00 	. .
5243  5AD1 57           	ld d,a							; save as last value sent to FLCTRL								;5ad1	57 	W
5244  5AD2 2B           	dec hl							; delay 6 cycles												;5ad2	2b 	+
5245  5AD3 D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;5ad3	d3 10 	. .
5246  5AD5 C3 D8 5A     	jp .contBit1					; continue with next bit 0										;5ad5	c3 d8 5a 	. . Z
5247  5AD8              .contBit1:
5248  5AD8 23           	inc hl							; delay 6 cycles												;5ad8	23 	#
5249  5AD9 C3 DC 5A     	jp .delayBit1					; delay 10 cycles												;5ad9	c3 dc 5a 	. . Z
5250  5ADC              .delayBit1:
5251  5ADC C3 DF 5A     	jp .writeBit0Cell				; delay 10 cycles												;5adc	c3 df 5a 	. . Z
5252  5ADF
5253  5ADF              .writeBit0Cell:
5254  5ADF              ; -- write bit 0 of data byte
5255  5ADF DB 12        	in a,(FLPOOL)					; send clock to drive controller								;5adf	db 12 	. .
5256  5AE1 3E 20        	ld a,FL_WRITE_DATA				; bit 5 (Write Data) to toggle 									;5ae1	3e 20 	>
5257  5AE3 AA           	xor d							; invert last sent Write Data Bit (0->1 or 1>0)					;5ae3	aa 	.
5258  5AE4              ; -- set CY flag to bit 0 of data byte
5259  5AE4 CB 11        	rl c							; Carry flag = bit 0 of data byte - is it 1?					;5ae4	cb 11 	. .
5260  5AE6 D2 F4 5A     	jp nc,.writeBit0_0				; no - write cell with data bit = 0								;5ae6	d2 f4 5a 	. . Z
5261  5AE9              .writeBit0_1:
5262  5AE9              ; -- write cell with bit=1 - 0-1 or 1-0
5263  5AE9 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5ae9	d3 10 	. .
5264  5AEB EE 20        	xor FL_WRITE_DATA				; toggle bit 5 (Write Data 0->1 or 1->0)						;5aeb	ee 20 	.
5265  5AED 57           	ld d,a							; save as last value sent to FLCTRL								;5aed	57 	W
5266  5AEE 2B           	dec hl							; delay 6 cycles												;5aee	2b 	+
5267  5AEF D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5aef	d3 10 	. .
5268  5AF1 C3 FF 5A     	jp .nextByte					; continue with next byte										;5af1	c3 ff 5a 	. . Z
5269  5AF4              .writeBit0_0:
5270  5AF4              ; -- write cell with bit=0 - 0-0 or 1-1
5271  5AF4 D3 10        	out (FLCTRL),a					; set Write Data Bit 											;5af4	d3 10 	. .
5272  5AF6 EE 00        	xor %00000000					; no change of Write Data Bit (0->0) (delay 7 cycles)			;5af6	ee 00 	. .
5273  5AF8 57           	ld d,a							; save as last value sent to FLCTRL								;5af8	57 	W
5274  5AF9 2B           	dec hl							; delay 6 cycles												;5af9	2b 	+
5275  5AFA D3 10        	out (FLCTRL),a					; set Write Data Bit (unchanged)								;5afa	d3 10 	. .
5276  5AFC C3 FF 5A     	jp .nextByte					; continue with next byte										;5afc	c3 ff 5a 	. . Z
5277  5AFF
5278  5AFF              .nextByte:
5279  5AFF 23           	inc hl							; hl was decremented previously									;5aff	23 	#
5280  5B00 23           	inc hl							; hl - address of next byte in buffer							;5b00	23 	#
5281  5B01 00           	nop								; delay 4 cycles												;5b01	00 	.
5282  5B02 05           	dec b							; decrement bytes-to-send counter								;5b02	05 	.
5283  5B03 C2 CF 59     	jp nz,WS_WriteByte			; continue to write all 140 bytes do Disk						;5b03	c2 cf 59 	. . Y
5284  5B06
5285  5B06              ; -- reset Wriite Request bit and update FLCtrl shadow
5286  5B06 CB F2        	set 6,d							; set bit 6 - Write Request (inactive)							;5b06	cb f2 	. .
5287  5B08 7A           	ld a,d							; a - new value of FDC Conntrol Register						;5b08	7a 	z
5288  5B09 D3 10        	out (FLCTRL),a					; set Flopy Control byte										;5b09	d3 10 	. .
5289  5B0B FD 77 33     	ld (iy+FLCtrlShadow),a			; store FLCtrl to shadow register								;5b0b	fd 77 33 	. w 3
5290  5B0E
5291  5B0E              ; -- return with No Error
5292  5B0E AF           	xor a							; a - Error 0 - NO ERROR										;5b0e	af 	.
5293  5B0F C9           	ret								; ------------------- End of Proc -----------------------------	;5b0f	c9 	.
5294  5B10
5295  5B10
5296  5B10              ;***************************************************************************************************
5297  5B10              ; Calculate Sector Checksum and sore in de register
5298  5B10              ; It is a 16bit sum of 128 bytes stored in Sector Buffer
5299  5B10              ; IN: (iy+SectorBuffer) - 128 bytes of data
5300  5B10              ; OUT: de - calculated checksum
5301  5B10              CalcSectorCRC:
5302  5B10              ; -- setup address of data to calculate checksum
5303  5B10 FD E5        	push iy							; iy - DOS base address											;5b10	fd e5 	. .
5304  5B12 E1           	pop hl							; copy to hl register											;5b12	e1 	.
5305  5B13 11 4D 00     	ld de,SectorBuffer				; de offset from DOS base to Buffer with Sector data			;5b13	11 4d 00 	. M .
5306  5B16 19           	add hl,de						; hl - address of first byte in Sector Buffer					;5b16	19 	.
5307  5B17              ; -- just get first byte - no point to add it to 0
5308  5B17 5E           	ld e,(hl)						; e - low byte of checksum of first byte						;5b17	5e 	^
5309  5B18 16 00        	ld d,$00						; de - checksum of first byte									;5b18	16 00 	. .
5310  5B1A 06 7F        	ld b,128-1						; number of bytes to add to checksum (1 added already)			;5b1a	06 7f 	. 
5311  5B1C              .addNext:
5312  5B1C 23           	inc hl							; hl - points to next byte in Sector Buffer						;5b1c	23 	#
5313  5B1D              ; -- 16 bit addition of de and byte
5314  5B1D 7B           	ld a,e							; a - low byte of checksum										;5b1d	7b 	{
5315  5B1E 86           	add a,(hl)						; add byte from buffer											;5b1e	86 	.
5316  5B1F 5F           	ld e,a							; store back to e register										;5b1f	5f 	_
5317  5B20 3E 00        	ld a,0							; a - high byte to add											;5b20	3e 00 	> .
5318  5B22 8A           	adc a,d							; add Carry flag from adding low bytes							;5b22	8a 	.
5319  5B23 57           	ld d,a							; de - checksum new value										;5b23	57 	W
5320  5B24 10 F6        	djnz .addNext					; continue until 127 bytes added								;5b24	10 f6 	. .
5321  5B26 C9           	ret								; ----------------------- End of Proc -------------------------	;5b26	c9 	.
5322  5B27
5323  5B27
5324  5B27
5325  5B27
5326  5B27              ;***************************************************************************************************
5327  5B27              ; Read the content of specified Sector on specified Track into DOS Data Buffer
5328  5B27              ; IN: (iy+UserTrackNo) - Track number to read
5329  5B27              ;     (iy+UserSectorNo) - Sector number to read
5330  5B27              ;	  (iy+DataBuf) - address of 128 byte buffer to store sector
5331  5B27              ;     interrupt disabled
5332  5B27              ; OUT: a - Error Code
5333  5B27              ;***************************************************************************************************
5334  5B27              READSECTOR:
5335  5B27              ; -- set number of tries
5336  5B27 FD 36 13 0A  	ld (iy+RetryCount),10			; try to read sector max 10 times								;5b27	fd 36 13 0a 	. 6 . .
5337  5B2B              RS_StartRead:
5338  5B2B CD EA 53     	call ReadIDAddressMark			; Read IDAM header												;5b2b	cd ea 53 	. . S
5339  5B2E CA 37 5B     	jp z,ReadSectorData				; if 0 (No Error) continue to read Sector Data					;5b2e	ca 37 5b 	. 7 [
5340  5B31              ; -- can't find or read specified Sector
5341  5B31 FE 11        	cp 17							; was it BREAK error (canceled by user)?						;5b31	fe 11 	. .
5342  5B33 C8           	ret z							; yes -------------- End of Proc (with Error 17) --------------	;5b33	c8 	.
5343  5B34              ; -- other error - return with SECTOR NOT FOUND Error
5344  5B34 3E 09        	ld a,9							; a - Error 09 - SECTOR NOT FOUND								;5b34	3e 09 	> .
5345  5B36 C9           	ret								; ------------------ End of Proc (with Error 09) --------------	;5b36	c9 	.
5346  5B37
5347  5B37
5348  5B37              ReadSectorData:
5349  5B37              ; -- set destination address to store Sector data of destination
5350  5B37 FD E5        	push iy							; iy - DOS base address											;5b37	fd e5 	. .
5351  5B39 E1           	pop hl							; copy to hl 													;5b39	e1 	.
5352  5B3A 11 4C 00     	ld de,SectorBuffer-1			; add offset from DOS base to Sector Buffer -1					;5b3a	11 4c 00 	. L .
5353  5B3D 19           	add hl,de						; hl - points to bute just before Sector Buffer memory			;5b3d	19 	.
5354  5B3E              ; -- set number of bytes to read - 128 bytes Sector data, 2 bytes Data Checksum, 1 - ???
5355  5B3E 1E 83        	ld e,128+3						; e - number of bytes to read from Disk (128 + 2 + 1)			;5b3e	1e 83 	. .
5356  5B40 18 03        	jr RS_Wait						; wait for Clock Bit and synchronize to byte 80					;5b40	18 03 	. .
5357  5B42              RS_BreakExit:
5358  5B42 C3 A4 5E     	jp WaitBreakKeyReleased			; Wait for Break key released									;5b42	c3 a4 5e 	. . ^
5359  5B45
5360  5B45              RS_Wait:
5361  5B45 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5b45	db 11 	. .
5362  5B47              .waitClockBit:
5363  5B47 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5b47	ed 78 	. x
5364  5B49 F2 47 5B     	jp p,.waitClockBit				; wait until Clock BIt = 1										;5b49	f2 47 5b 	. G [
5365  5B4C 00           	nop								; delay 4 clock cycles											;5b4c	00 	.
5366  5B4D 00           	nop								; delay 4 clock cycles											;5b4d	00 	.
5367  5B4E 00           	nop								; delay 4 clock cycles											;5b4e	00 	.
5368  5B4F 00           	nop								; delay 4 clock cycles											;5b4f	00 	.
5369  5B50              RS_WaitFor80:
5370  5B50              ; -- test if BREAK key is pressed
5371  5B50 3A DF 68     	ld a,(BreakKeybRow)				; read Keyboard Row with BREAK key								;5b50	3a df 68 	: . h
5372  5B53 E6 04        	and BreakKeybMask				; mask only BREAK key - if 0 -> key is pressed					;5b53	e6 04 	. .
5373  5B55 28 EB        	jr z,RS_BreakExit				; yes - exit reading											;5b55	28 eb 	( .
5374  5B57
5375  5B57              ; -- read data (bit)
5376  5B57 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register)				;5b57	db 11 	. .
5377  5B59 47           	ld b,a							; b - store byte 												;5b59	47 	G
5378  5B5A              .waitClockBit1:
5379  5B5A              ; -- wait for FDC Clock Pulse
5380  5B5A ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5b5a	ed 78 	. x
5381  5B5C F2 5A 5B     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5b5c	f2 5a 5b 	. Z [
5382  5B5F              ; -- test if we have $80 received
5383  5B5F 78           	ld a,b							; byte being received											;5b5f	78 	x
5384  5B60 FE 80        	cp $80							; is this $80 - GAP2 start sequence								;5b60	fe 80 	. .
5385  5B62 C2 50 5B     	jp nz,RS_WaitFor80				; no - keep reding until $80 received (or BREAK key pressed)	;5b62	c2 50 5b 	. P [
5386  5B65
5387  5B65              ; -- we have $80 received - next byte can be:
5388  5B65              ; $80 - still GAP2 byte -> keep reading
5389  5B65              ; other - end of GAP1 -> go to IDAM (ending) sequence read
5390  5B65              RS_ReadByte:
5391  5B65 00           	nop								; delay 4 clock cycles											;5b65	00 	.
5392  5B66 00           	nop								; delay 4 clock cycles											;5b66	00 	.
5393  5B67 00           	nop								; delay 4 clock cycles											;5b67	00 	.
5394  5B68 3E 00        	ld a,0							; delay 7 clock cycles											;5b68	3e 00 	> .
5395  5B6A 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;5b6a	3e 00 	> .
5396  5B6C DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5b6c	db 11 	. .
5397  5B6E              .waitClockBit1:
5398  5B6E              ; -- wait for FDC Clock Pulse
5399  5B6E ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5b6e	ed 78 	. x
5400  5B70 F2 6E 5B     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5b70	f2 6e 5b 	. n [
5401  5B73 2B           	dec hl							; delay 6 clock cycles											;5b73	2b 	+
5402  5B74 23           	inc hl							; delay 6 clock cycles											;5b74	23 	#
5403  5B75 2B           	dec hl							; delay 6 clock cycles											;5b75	2b 	+
5404  5B76 23           	inc hl							; delay 6 clock cycles											;5b76	23 	#
5405  5B77 2B           	dec hl							; delay 6 clock cycles											;5b77	2b 	+
5406  5B78 23           	inc hl							; delay 6 clock cycles											;5b78	23 	#
5407  5B79 00           	nop								; delay 4 clock cycles											;5b79	00 	.
5408  5B7A 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5b7a	3e 00 	> .
5409  5B7C DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;5b7c	db 11 	. .
5410  5B7E              .waitClockBit2:
5411  5B7E              ; -- wait for FDC Clock Pulse
5412  5B7E ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5b7e	ed 78 	. x
5413  5B80 F2 7E 5B     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5b80	f2 7e 5b 	. ~ [
5414  5B83 2B           	dec hl							; delay 6 clock cycles											;5b83	2b 	+
5415  5B84 23           	inc hl							; delay 6 clock cycles											;5b84	23 	#
5416  5B85 2B           	dec hl							; delay 6 clock cycles											;5b85	2b 	+
5417  5B86 23           	inc hl							; delay 6 clock cycles											;5b86	23 	#
5418  5B87 2B           	dec hl							; delay 6 clock cycles											;5b87	2b 	+
5419  5B88 23           	inc hl							; delay 6 clock cycles											;5b88	23 	#
5420  5B89 00           	nop								; delay 4 clock cycles											;5b89	00 	.
5421  5B8A 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5b8a	3e 00 	> .
5422  5B8C DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5b8c	db 11 	. .
5423  5B8E              .waitClockBit3:
5424  5B8E              ; -- wait for FDC Clock Pulse
5425  5B8E ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5b8e	ed 78 	. x
5426  5B90 F2 8E 5B     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5b90	f2 8e 5b 	. . [
5427  5B93 2B           	dec hl							; delay 6 clock cycles											;5b93	2b 	+
5428  5B94 23           	inc hl							; delay 6 clock cycles											;5b94	23 	#
5429  5B95 2B           	dec hl							; delay 6 clock cycles											;5b95	2b 	+
5430  5B96 23           	inc hl							; delay 6 clock cycles											;5b96	23 	#
5431  5B97 2B           	dec hl							; delay 6 clock cycles											;5b97	2b 	+
5432  5B98 23           	inc hl							; delay 6 clock cycles											;5b98	23 	#
5433  5B99 00           	nop								; delay 4 clock cycles											;5b99	00 	.
5434  5B9A 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5b9a	3e 00 	> .
5435  5B9C DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5b9c	db 11 	. .
5436  5B9E              .waitClockBit4:
5437  5B9E              ; -- wait for FDC Clock Pulse
5438  5B9E ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5b9e	ed 78 	. x
5439  5BA0 F2 9E 5B     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5ba0	f2 9e 5b 	. . [
5440  5BA3 2B           	dec hl							; delay 6 clock cycles											;5ba3	2b 	+
5441  5BA4 23           	inc hl							; delay 6 clock cycles											;5ba4	23 	#
5442  5BA5 2B           	dec hl							; delay 6 clock cycles											;5ba5	2b 	+
5443  5BA6 23           	inc hl							; delay 6 clock cycles											;5ba6	23 	#
5444  5BA7 2B           	dec hl							; delay 6 clock cycles											;5ba7	2b 	+
5445  5BA8 23           	inc hl							; delay 6 clock cycles											;5ba8	23 	#
5446  5BA9 00           	nop								; delay 4 clock cycles											;5ba9	00 	.
5447  5BAA 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5baa	3e 00 	> .
5448  5BAC DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5bac	db 11 	. .
5449  5BAE              .waitClockBit5:
5450  5BAE              ; -- wait for FDC Clock Pulse
5451  5BAE ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5bae	ed 78 	. x
5452  5BB0 F2 AE 5B     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5bb0	f2 ae 5b 	. . [
5453  5BB3 2B           	dec hl							; delay 6 clock cycles											;5bb3	2b 	+
5454  5BB4 23           	inc hl							; delay 6 clock cycles											;5bb4	23 	#
5455  5BB5 2B           	dec hl							; delay 6 clock cycles											;5bb5	2b 	+
5456  5BB6 23           	inc hl							; delay 6 clock cycles											;5bb6	23 	#
5457  5BB7 2B           	dec hl							; delay 6 clock cycles											;5bb7	2b 	+
5458  5BB8 23           	inc hl							; delay 6 clock cycles											;5bb8	23 	#
5459  5BB9 00           	nop								; delay 4 clock cycles											;5bb9	00 	.
5460  5BBA 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5bba	3e 00 	> .
5461  5BBC DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;5bbc	db 11 	. .
5462  5BBE              .waitClockBit6:
5463  5BBE              ; -- wait for FDC Clock Pulse
5464  5BBE ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5bbe	ed 78 	. x
5465  5BC0 F2 BE 5B     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;5bc0	f2 be 5b 	. . [
5466  5BC3 2B           	dec hl							; delay 6 clock cycles											;5bc3	2b 	+
5467  5BC4 23           	inc hl							; delay 6 clock cycles											;5bc4	23 	#
5468  5BC5 2B           	dec hl							; delay 6 clock cycles											;5bc5	2b 	+
5469  5BC6 23           	inc hl							; delay 6 clock cycles											;5bc6	23 	#
5470  5BC7 2B           	dec hl							; delay 6 clock cycles											;5bc7	2b 	+
5471  5BC8 23           	inc hl							; delay 6 clock cycles											;5bc8	23 	#
5472  5BC9 00           	nop								; delay 4 clock cycles											;5bc9	00 	.
5473  5BCA 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5bca	3e 00 	> .
5474  5BCC DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;5bcc	db 11 	. .
5475  5BCE              .waitClockBit7:
5476  5BCE              ; -- wait for FDC Clock Pulse
5477  5BCE ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5bce	ed 78 	. x
5478  5BD0 F2 CE 5B     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;5bd0	f2 ce 5b 	. . [
5479  5BD3 2B           	dec hl							; delay 6 clock cycles											;5bd3	2b 	+
5480  5BD4 23           	inc hl							; delay 6 clock cycles											;5bd4	23 	#
5481  5BD5 2B           	dec hl							; delay 6 clock cycles											;5bd5	2b 	+
5482  5BD6 23           	inc hl							; delay 6 clock cycles											;5bd6	23 	#
5483  5BD7 2B           	dec hl							; delay 6 clock cycles											;5bd7	2b 	+
5484  5BD8 23           	inc hl							; delay 6 clock cycles											;5bd8	23 	#
5485  5BD9 00           	nop								; delay 4 clock cycles											;5bd9	00 	.
5486  5BDA 3E 00        	ld a,0							; delay 7 clock cycles	(47 in totoal)							;5bda	3e 00 	> .
5487  5BDC DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;5bdc	db 11 	. .
5488  5BDE 47           	ld b,a							; store for compare												;5bde	47 	G
5489  5BDF              .waitClockBit8:
5490  5BDF              ; -- wait for FDC Clock Pulse
5491  5BDF ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5bdf	ed 78 	. x
5492  5BE1 F2 DF 5B     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;5be1	f2 df 5b 	. . [
5493  5BE4
5494  5BE4
5495  5BE4              ; -- We have 1 byte read - if 80 then still reading GAP2
5496  5BE4 78           	ld a,b							; a - byte from Floppy Disk										;5be4	78 	x
5497  5BE5 FE 80        	cp $80							; is it still $80 - GAP2 sequence byte?							;5be5	fe 80 	. .
5498  5BE7 CA 65 5B     	jp z,RS_ReadByte				; yes - read next byte from disk								;5be7	ca 65 5b 	. e [
5499  5BEA
5500  5BEA              ; -- byte from disk is NOT $80 (expected 00 but not verified)
5501  5BEA
5502  5BEA
5503  5BEA
5504  5BEA              ;***************************************************************************************************
5505  5BEA              ;
5506  5BEA              ; Read IDAM (ending) sequence 1st byte - $c3
5507  5BEA              ;
5508  5BEA              RS_ReadIDAM_C3:
5509  5BEA 00           	nop								; delay 4 clock cycles											;5bea	00 	.
5510  5BEB 00           	nop								; delay 4 clock cycles											;5beb	00 	.
5511  5BEC 00           	nop								; delay 4 clock cycles											;5bec	00 	.
5512  5BED 3E 00        	ld a,0							; delay 7 clock cycles											;5bed	3e 00 	> .
5513  5BEF 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;5bef	3e 00 	> .
5514  5BF1 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5bf1	db 11 	. .
5515  5BF3              .waitClockBit1:
5516  5BF3              ; -- wait for FDC Clock Pulse
5517  5BF3 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5bf3	ed 78 	. x
5518  5BF5 F2 F3 5B     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5bf5	f2 f3 5b 	. . [
5519  5BF8 2B           	dec hl							; delay 6 clock cycles											;5bf8	2b 	+
5520  5BF9 23           	inc hl							; delay 6 clock cycles											;5bf9	23 	#
5521  5BFA 2B           	dec hl							; delay 6 clock cycles											;5bfa	2b 	+
5522  5BFB 23           	inc hl							; delay 6 clock cycles											;5bfb	23 	#
5523  5BFC 2B           	dec hl							; delay 6 clock cycles											;5bfc	2b 	+
5524  5BFD 23           	inc hl							; delay 6 clock cycles											;5bfd	23 	#
5525  5BFE 00           	nop								; delay 4 clock cycles											;5bfe	00 	.
5526  5BFF 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5bff	3e 00 	> .
5527  5C01 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;5c01	db 11 	. .
5528  5C03              .waitClockBit2:
5529  5C03              ; -- wait for FDC Clock Pulse
5530  5C03 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c03	ed 78 	. x
5531  5C05 F2 03 5C     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5c05	f2 03 5c 	. . \
5532  5C08 2B           	dec hl							; delay 6 clock cycles											;5c08	2b 	+
5533  5C09 23           	inc hl							; delay 6 clock cycles											;5c09	23 	#
5534  5C0A 2B           	dec hl							; delay 6 clock cycles											;5c0a	2b 	+
5535  5C0B 23           	inc hl							; delay 6 clock cycles											;5c0b	23 	#
5536  5C0C 2B           	dec hl							; delay 6 clock cycles											;5c0c	2b 	+
5537  5C0D 23           	inc hl							; delay 6 clock cycles											;5c0d	23 	#
5538  5C0E 00           	nop								; delay 4 clock cycles											;5c0e	00 	.
5539  5C0F 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5c0f	3e 00 	> .
5540  5C11 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5c11	db 11 	. .
5541  5C13              .waitClockBit3:
5542  5C13              ; -- wait for FDC Clock Pulse
5543  5C13 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c13	ed 78 	. x
5544  5C15 F2 13 5C     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5c15	f2 13 5c 	. . \
5545  5C18 2B           	dec hl							; delay 6 clock cycles											;5c18	2b 	+
5546  5C19 23           	inc hl							; delay 6 clock cycles											;5c19	23 	#
5547  5C1A 2B           	dec hl							; delay 6 clock cycles											;5c1a	2b 	+
5548  5C1B 23           	inc hl							; delay 6 clock cycles											;5c1b	23 	#
5549  5C1C 2B           	dec hl							; delay 6 clock cycles											;5c1c	2b 	+
5550  5C1D 23           	inc hl							; delay 6 clock cycles											;5c1d	23 	#
5551  5C1E 00           	nop								; delay 4 clock cycles											;5c1e	00 	.
5552  5C1F 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5c1f	3e 00 	> .
5553  5C21 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5c21	db 11 	. .
5554  5C23              .waitClockBit4:
5555  5C23              ; -- wait for FDC Clock Pulse
5556  5C23 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c23	ed 78 	. x
5557  5C25 F2 23 5C     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5c25	f2 23 5c 	. # \
5558  5C28 2B           	dec hl							; delay 6 clock cycles											;5c28	2b 	+
5559  5C29 23           	inc hl							; delay 6 clock cycles											;5c29	23 	#
5560  5C2A 2B           	dec hl							; delay 6 clock cycles											;5c2a	2b 	+
5561  5C2B 23           	inc hl							; delay 6 clock cycles											;5c2b	23 	#
5562  5C2C 2B           	dec hl							; delay 6 clock cycles											;5c2c	2b 	+
5563  5C2D 23           	inc hl							; delay 6 clock cycles											;5c2d	23 	#
5564  5C2E 00           	nop								; delay 4 clock cycles											;5c2e	00 	.
5565  5C2F 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5c2f	3e 00 	> .
5566  5C31 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5c31	db 11 	. .
5567  5C33              .waitClockBit5:
5568  5C33              ; -- wait for FDC Clock Pulse
5569  5C33 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c33	ed 78 	. x
5570  5C35 F2 33 5C     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5c35	f2 33 5c 	. 3 \
5571  5C38 2B           	dec hl							; delay 6 clock cycles											;5c38	2b 	+
5572  5C39 23           	inc hl							; delay 6 clock cycles											;5c39	23 	#
5573  5C3A 2B           	dec hl							; delay 6 clock cycles											;5c3a	2b 	+
5574  5C3B 23           	inc hl							; delay 6 clock cycles											;5c3b	23 	#
5575  5C3C 2B           	dec hl							; delay 6 clock cycles											;5c3c	2b 	+
5576  5C3D 23           	inc hl							; delay 6 clock cycles											;5c3d	23 	#
5577  5C3E 00           	nop								; delay 4 clock cycles											;5c3e	00 	.
5578  5C3F 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5c3f	3e 00 	> .
5579  5C41 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;5c41	db 11 	. .
5580  5C43              .waitClockBit6:
5581  5C43              ; -- wait for FDC Clock Pulse
5582  5C43 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c43	ed 78 	. x
5583  5C45 F2 43 5C     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;5c45	f2 43 5c 	. C \
5584  5C48 2B           	dec hl							; delay 6 clock cycles											;5c48	2b 	+
5585  5C49 23           	inc hl							; delay 6 clock cycles											;5c49	23 	#
5586  5C4A 2B           	dec hl							; delay 6 clock cycles											;5c4a	2b 	+
5587  5C4B 23           	inc hl							; delay 6 clock cycles											;5c4b	23 	#
5588  5C4C 2B           	dec hl							; delay 6 clock cycles											;5c4c	2b 	+
5589  5C4D 23           	inc hl							; delay 6 clock cycles											;5c4d	23 	#
5590  5C4E 00           	nop								; delay 4 clock cycles											;5c4e	00 	.
5591  5C4F 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5c4f	3e 00 	> .
5592  5C51 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;5c51	db 11 	. .
5593  5C53              .waitClockBit7:
5594  5C53              ; -- wait for FDC Clock Pulse
5595  5C53 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c53	ed 78 	. x
5596  5C55 F2 53 5C     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;5c55	f2 53 5c 	. S \
5597  5C58 2B           	dec hl							; delay 6 clock cycles											;5c58	2b 	+
5598  5C59 23           	inc hl							; delay 6 clock cycles											;5c59	23 	#
5599  5C5A 2B           	dec hl							; delay 6 clock cycles											;5c5a	2b 	+
5600  5C5B 23           	inc hl							; delay 6 clock cycles											;5c5b	23 	#
5601  5C5C 2B           	dec hl							; delay 6 clock cycles											;5c5c	2b 	+
5602  5C5D 23           	inc hl							; delay 6 clock cycles											;5c5d	23 	#
5603  5C5E 00           	nop								; delay 4 clock cycles											;5c5e	00 	.
5604  5C5F 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5c5f	3e 00 	> .
5605  5C61 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;5c61	db 11 	. .
5606  5C63 47           	ld b,a							; store for compare												;5c63	47 	G
5607  5C64              .waitClockBit8:
5608  5C64              ; -- wait for FDC Clock Pulse
5609  5C64 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c64	ed 78 	. x
5610  5C66 F2 64 5C     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;5c66	f2 64 5c 	. d \
5611  5C69
5612  5C69              ; -- We have 1st byte read (expected $c3)
5613  5C69
5614  5C69 78           	ld a,b							; a - byte from Floppy Disk										;5c69	78 	x
5615  5C6A FE C3        	cp $c3							; is it C3 (first byte of IDAM ending)?							;5c6a	fe c3 	. .
5616  5C6C C2 50 5B     	jp nz,RS_WaitFor80				; no - start over and find byte = $80							;5c6c	c2 50 5b 	. P [
5617  5C6F
5618  5C6F              ; -- first byte of IDAM received - read next byte ($18)
5619  5C6F
5620  5C6F              RS_REadIDAM_18:
5621  5C6F 00           	nop								; delay 4 clock cycles											;5c6f	00 	.
5622  5C70 00           	nop								; delay 4 clock cycles											;5c70	00 	.
5623  5C71 00           	nop								; delay 4 clock cycles											;5c71	00 	.
5624  5C72 3E 00        	ld a,0							; delay 7 clock cycles											;5c72	3e 00 	> .
5625  5C74 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;5c74	3e 00 	> .
5626  5C76 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5c76	db 11 	. .
5627  5C78              .waitClockBit1:
5628  5C78              ; -- wait for FDC Clock Pulse
5629  5C78 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c78	ed 78 	. x
5630  5C7A F2 78 5C     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5c7a	f2 78 5c 	. x \
5631  5C7D 2B           	dec hl							; delay 6 clock cycles											;5c7d	2b 	+
5632  5C7E 23           	inc hl							; delay 6 clock cycles											;5c7e	23 	#
5633  5C7F 2B           	dec hl							; delay 6 clock cycles											;5c7f	2b 	+
5634  5C80 23           	inc hl							; delay 6 clock cycles											;5c80	23 	#
5635  5C81 2B           	dec hl							; delay 6 clock cycles											;5c81	2b 	+
5636  5C82 23           	inc hl							; delay 6 clock cycles											;5c82	23 	#
5637  5C83 00           	nop								; delay 4 clock cycles											;5c83	00 	.
5638  5C84 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5c84	3e 00 	> .
5639  5C86 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;5c86	db 11 	. .
5640  5C88              .waitClockBit2:
5641  5C88              ; -- wait for FDC Clock Pulse
5642  5C88 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c88	ed 78 	. x
5643  5C8A F2 88 5C     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5c8a	f2 88 5c 	. . \
5644  5C8D 2B           	dec hl							; delay 6 clock cycles											;5c8d	2b 	+
5645  5C8E 23           	inc hl							; delay 6 clock cycles											;5c8e	23 	#
5646  5C8F 2B           	dec hl							; delay 6 clock cycles											;5c8f	2b 	+
5647  5C90 23           	inc hl							; delay 6 clock cycles											;5c90	23 	#
5648  5C91 2B           	dec hl							; delay 6 clock cycles											;5c91	2b 	+
5649  5C92 23           	inc hl							; delay 6 clock cycles											;5c92	23 	#
5650  5C93 00           	nop								; delay 4 clock cycles											;5c93	00 	.
5651  5C94 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5c94	3e 00 	> .
5652  5C96 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5c96	db 11 	. .
5653  5C98              .waitClockBit3:
5654  5C98              ; -- wait for FDC Clock Pulse
5655  5C98 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5c98	ed 78 	. x
5656  5C9A F2 98 5C     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5c9a	f2 98 5c 	. . \
5657  5C9D 2B           	dec hl							; delay 6 clock cycles											;5c9d	2b 	+
5658  5C9E 23           	inc hl							; delay 6 clock cycles											;5c9e	23 	#
5659  5C9F 2B           	dec hl							; delay 6 clock cycles											;5c9f	2b 	+
5660  5CA0 23           	inc hl							; delay 6 clock cycles											;5ca0	23 	#
5661  5CA1 2B           	dec hl							; delay 6 clock cycles											;5ca1	2b 	+
5662  5CA2 23           	inc hl							; delay 6 clock cycles											;5ca2	23 	#
5663  5CA3 00           	nop								; delay 4 clock cycles											;5ca3	00 	.
5664  5CA4 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5ca4	3e 00 	> .
5665  5CA6 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5ca6	db 11 	. .
5666  5CA8              .waitClockBit4:
5667  5CA8              ; -- wait for FDC Clock Pulse
5668  5CA8 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5ca8	ed 78 	. x
5669  5CAA F2 A8 5C     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5caa	f2 a8 5c 	. . \
5670  5CAD 2B           	dec hl							; delay 6 clock cycles											;5cad	2b 	+
5671  5CAE 23           	inc hl							; delay 6 clock cycles											;5cae	23 	#
5672  5CAF 2B           	dec hl							; delay 6 clock cycles											;5caf	2b 	+
5673  5CB0 23           	inc hl							; delay 6 clock cycles											;5cb0	23 	#
5674  5CB1 2B           	dec hl							; delay 6 clock cycles											;5cb1	2b 	+
5675  5CB2 23           	inc hl							; delay 6 clock cycles											;5cb2	23 	#
5676  5CB3 00           	nop								; delay 4 clock cycles											;5cb3	00 	.
5677  5CB4 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5cb4	3e 00 	> .
5678  5CB6 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5cb6	db 11 	. .
5679  5CB8              .waitClockBit5:
5680  5CB8              ; -- wait for FDC Clock Pulse
5681  5CB8 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5cb8	ed 78 	. x
5682  5CBA F2 B8 5C     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5cba	f2 b8 5c 	. . \
5683  5CBD 2B           	dec hl							; delay 6 clock cycles											;5cbd	2b 	+
5684  5CBE 23           	inc hl							; delay 6 clock cycles											;5cbe	23 	#
5685  5CBF 2B           	dec hl							; delay 6 clock cycles											;5cbf	2b 	+
5686  5CC0 23           	inc hl							; delay 6 clock cycles											;5cc0	23 	#
5687  5CC1 2B           	dec hl							; delay 6 clock cycles											;5cc1	2b 	+
5688  5CC2 23           	inc hl							; delay 6 clock cycles											;5cc2	23 	#
5689  5CC3 00           	nop								; delay 4 clock cycles											;5cc3	00 	.
5690  5CC4 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5cc4	3e 00 	> .
5691  5CC6 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;5cc6	db 11 	. .
5692  5CC8              .waitClockBit6:
5693  5CC8              ; -- wait for FDC Clock Pulse
5694  5CC8 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5cc8	ed 78 	. x
5695  5CCA F2 C8 5C     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;5cca	f2 c8 5c 	. . \
5696  5CCD 2B           	dec hl							; delay 6 clock cycles											;5ccd	2b 	+
5697  5CCE 23           	inc hl							; delay 6 clock cycles											;5cce	23 	#
5698  5CCF 2B           	dec hl							; delay 6 clock cycles											;5ccf	2b 	+
5699  5CD0 23           	inc hl							; delay 6 clock cycles											;5cd0	23 	#
5700  5CD1 2B           	dec hl							; delay 6 clock cycles											;5cd1	2b 	+
5701  5CD2 23           	inc hl							; delay 6 clock cycles											;5cd2	23 	#
5702  5CD3 00           	nop								; delay 4 clock cycles											;5cd3	00 	.
5703  5CD4 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5cd4	3e 00 	> .
5704  5CD6 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;5cd6	db 11 	. .
5705  5CD8              .waitClockBit7:
5706  5CD8              ; -- wait for FDC Clock Pulse
5707  5CD8 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5cd8	ed 78 	. x
5708  5CDA F2 D8 5C     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;5cda	f2 d8 5c 	. . \
5709  5CDD 2B           	dec hl							; delay 6 clock cycles											;5cdd	2b 	+
5710  5CDE 23           	inc hl							; delay 6 clock cycles											;5cde	23 	#
5711  5CDF 2B           	dec hl							; delay 6 clock cycles											;5cdf	2b 	+
5712  5CE0 23           	inc hl							; delay 6 clock cycles											;5ce0	23 	#
5713  5CE1 2B           	dec hl							; delay 6 clock cycles											;5ce1	2b 	+
5714  5CE2 23           	inc hl							; delay 6 clock cycles											;5ce2	23 	#
5715  5CE3 00           	nop								; delay 4 clock cycles											;5ce3	00 	.
5716  5CE4 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5ce4	3e 00 	> .
5717  5CE6 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;5ce6	db 11 	. .
5718  5CE8 47           	ld b,a							; store for compare												;5ce8	47 	G
5719  5CE9              .waitClockBit8:
5720  5CE9              ; -- wait for FDC Clock Pulse
5721  5CE9 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5ce9	ed 78 	. x
5722  5CEB F2 E9 5C     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;5ceb	f2 e9 5c 	. . \
5723  5CEE
5724  5CEE              ; -- We have 2nd byte read (expected $18)
5725  5CEE
5726  5CEE 78           	ld a,b							; a - byte from Floppy Disk										;5cee	78 	x
5727  5CEF FE 18        	cp $18							; is it 18 (second byte of IDAM ending)?						;5cef	fe 18 	. .
5728  5CF1 C2 27 5B     	jp nz,READSECTOR				; no - start over and Read a sector from disk					;5cf1	c2 27 5b 	. ' [
5729  5CF4
5730  5CF4              ; -- second byte of IDAM received - read next byte ($e7)
5731  5CF4
5732  5CF4              RS_ReadIDAM_E7:
5733  5CF4 00           	nop								; delay 4 clock cycles											;5cf4	00 	.
5734  5CF5 00           	nop								; delay 4 clock cycles											;5cf5	00 	.
5735  5CF6 00           	nop								; delay 4 clock cycles											;5cf6	00 	.
5736  5CF7 3E 00        	ld a,0							; delay 7 clock cycles											;5cf7	3e 00 	> .
5737  5CF9 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;5cf9	3e 00 	> .
5738  5CFB DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5cfb	db 11 	. .
5739  5CFD              .waitClockBit1:
5740  5CFD              ; -- wait for FDC Clock Pulse
5741  5CFD ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5cfd	ed 78 	. x
5742  5CFF F2 FD 5C     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5cff	f2 fd 5c 	. . \
5743  5D02 2B           	dec hl							; delay 6 clock cycles											;5d02	2b 	+
5744  5D03 23           	inc hl							; delay 6 clock cycles											;5d03	23 	#
5745  5D04 2B           	dec hl							; delay 6 clock cycles											;5d04	2b 	+
5746  5D05 23           	inc hl							; delay 6 clock cycles											;5d05	23 	#
5747  5D06 2B           	dec hl							; delay 6 clock cycles											;5d06	2b 	+
5748  5D07 23           	inc hl							; delay 6 clock cycles											;5d07	23 	#
5749  5D08 00           	nop								; delay 4 clock cycles											;5d08	00 	.
5750  5D09 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5d09	3e 00 	> .
5751  5D0B DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;5d0b	db 11 	. .
5752  5D0D              .waitClockBit2:
5753  5D0D              ; -- wait for FDC Clock Pulse
5754  5D0D ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5d0d	ed 78 	. x
5755  5D0F F2 0D 5D     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5d0f	f2 0d 5d 	. . ]
5756  5D12 2B           	dec hl							; delay 6 clock cycles											;5d12	2b 	+
5757  5D13 23           	inc hl							; delay 6 clock cycles											;5d13	23 	#
5758  5D14 2B           	dec hl							; delay 6 clock cycles											;5d14	2b 	+
5759  5D15 23           	inc hl							; delay 6 clock cycles											;5d15	23 	#
5760  5D16 2B           	dec hl							; delay 6 clock cycles											;5d16	2b 	+
5761  5D17 23           	inc hl							; delay 6 clock cycles											;5d17	23 	#
5762  5D18 00           	nop								; delay 4 clock cycles											;5d18	00 	.
5763  5D19 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5d19	3e 00 	> .
5764  5D1B DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5d1b	db 11 	. .
5765  5D1D              .waitClockBit3:
5766  5D1D              ; -- wait for FDC Clock Pulse
5767  5D1D ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5d1d	ed 78 	. x
5768  5D1F F2 1D 5D     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5d1f	f2 1d 5d 	. . ]
5769  5D22 2B           	dec hl							; delay 6 clock cycles											;5d22	2b 	+
5770  5D23 23           	inc hl							; delay 6 clock cycles											;5d23	23 	#
5771  5D24 2B           	dec hl							; delay 6 clock cycles											;5d24	2b 	+
5772  5D25 23           	inc hl							; delay 6 clock cycles											;5d25	23 	#
5773  5D26 2B           	dec hl							; delay 6 clock cycles											;5d26	2b 	+
5774  5D27 23           	inc hl							; delay 6 clock cycles											;5d27	23 	#
5775  5D28 00           	nop								; delay 4 clock cycles											;5d28	00 	.
5776  5D29 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5d29	3e 00 	> .
5777  5D2B DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5d2b	db 11 	. .
5778  5D2D              .waitClockBit4:
5779  5D2D              ; -- wait for FDC Clock Pulse
5780  5D2D ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5d2d	ed 78 	. x
5781  5D2F F2 2D 5D     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5d2f	f2 2d 5d 	. - ]
5782  5D32 2B           	dec hl							; delay 6 clock cycles											;5d32	2b 	+
5783  5D33 23           	inc hl							; delay 6 clock cycles											;5d33	23 	#
5784  5D34 2B           	dec hl							; delay 6 clock cycles											;5d34	2b 	+
5785  5D35 23           	inc hl							; delay 6 clock cycles											;5d35	23 	#
5786  5D36 2B           	dec hl							; delay 6 clock cycles											;5d36	2b 	+
5787  5D37 23           	inc hl							; delay 6 clock cycles											;5d37	23 	#
5788  5D38 00           	nop								; delay 4 clock cycles											;5d38	00 	.
5789  5D39 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5d39	3e 00 	> .
5790  5D3B DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5d3b	db 11 	. .
5791  5D3D              .waitClockBit5:
5792  5D3D              ; -- wait for FDC Clock Pulse
5793  5D3D ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5d3d	ed 78 	. x
5794  5D3F F2 3D 5D     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5d3f	f2 3d 5d 	. = ]
5795  5D42 2B           	dec hl							; delay 6 clock cycles											;5d42	2b 	+
5796  5D43 23           	inc hl							; delay 6 clock cycles											;5d43	23 	#
5797  5D44 2B           	dec hl							; delay 6 clock cycles											;5d44	2b 	+
5798  5D45 23           	inc hl							; delay 6 clock cycles											;5d45	23 	#
5799  5D46 2B           	dec hl							; delay 6 clock cycles											;5d46	2b 	+
5800  5D47 23           	inc hl							; delay 6 clock cycles											;5d47	23 	#
5801  5D48 00           	nop								; delay 4 clock cycles											;5d48	00 	.
5802  5D49 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5d49	3e 00 	> .
5803  5D4B DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;5d4b	db 11 	. .
5804  5D4D              .waitClockBit6:
5805  5D4D              ; -- wait for FDC Clock Pulse
5806  5D4D ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5d4d	ed 78 	. x
5807  5D4F F2 4D 5D     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;5d4f	f2 4d 5d 	. M ]
5808  5D52 2B           	dec hl							; delay 6 clock cycles											;5d52	2b 	+
5809  5D53 23           	inc hl							; delay 6 clock cycles											;5d53	23 	#
5810  5D54 2B           	dec hl							; delay 6 clock cycles											;5d54	2b 	+
5811  5D55 23           	inc hl							; delay 6 clock cycles											;5d55	23 	#
5812  5D56 2B           	dec hl							; delay 6 clock cycles											;5d56	2b 	+
5813  5D57 23           	inc hl							; delay 6 clock cycles											;5d57	23 	#
5814  5D58 00           	nop								; delay 4 clock cycles											;5d58	00 	.
5815  5D59 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5d59	3e 00 	> .
5816  5D5B DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;5d5b	db 11 	. .
5817  5D5D              .waitClockBit7:
5818  5D5D              ; -- wait for FDC Clock Pulse
5819  5D5D ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5d5d	ed 78 	. x
5820  5D5F F2 5D 5D     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;5d5f	f2 5d 5d 	. ] ]
5821  5D62 2B           	dec hl							; delay 6 clock cycles											;5d62	2b 	+
5822  5D63 23           	inc hl							; delay 6 clock cycles											;5d63	23 	#
5823  5D64 2B           	dec hl							; delay 6 clock cycles											;5d64	2b 	+
5824  5D65 23           	inc hl							; delay 6 clock cycles											;5d65	23 	#
5825  5D66 2B           	dec hl							; delay 6 clock cycles											;5d66	2b 	+
5826  5D67 23           	inc hl							; delay 6 clock cycles											;5d67	23 	#
5827  5D68 00           	nop								; delay 4 clock cycles											;5d68	00 	.
5828  5D69 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5d69	3e 00 	> .
5829  5D6B DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;5d6b	db 11 	. .
5830  5D6D 47           	ld b,a							; store for compare												;5d6d	47 	G
5831  5D6E              .waitClockBit8:
5832  5D6E              ; -- wait for FDC Clock Pulse
5833  5D6E ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5d6e	ed 78 	. x
5834  5D70 F2 6E 5D     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;5d70	f2 6e 5d 	. n ]
5835  5D73
5836  5D73              ; -- We have 3rd byte read (expected $e7)
5837  5D73
5838  5D73 78           	ld a,b							; a - byte from Floppy Disk										;5d73	78 	x
5839  5D74 FE E7        	cp $e7							; is it E7 (third byte of IDAM ending)?							;5d74	fe e7 	. .
5840  5D76 C2 27 5B     	jp nz,READSECTOR				; no - start over and Read a sector from disk					;5d76	c2 27 5b 	. ' [
5841  5D79
5842  5D79              ; -- third byte of IDAM received - read next byte ($fe)
5843  5D79
5844  5D79              RS_REadIDAM_FE:
5845  5D79 00           	nop								; delay 4 clock cycles											;5d79	00 	.
5846  5D7A 00           	nop								; delay 4 clock cycles											;5d7a	00 	.
5847  5D7B 00           	nop								; delay 4 clock cycles											;5d7b	00 	.
5848  5D7C 3E 00        	ld a,0							; delay 7 clock cycles											;5d7c	3e 00 	> .
5849  5D7E 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;5d7e	3e 00 	> .
5850  5D80 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5d80	db 11 	. .
5851  5D82              .waitClockBit1:
5852  5D82              ; -- wait for FDC Clock Pulse
5853  5D82 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5d82	ed 78 	. x
5854  5D84 F2 82 5D     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5d84	f2 82 5d 	. . ]
5855  5D87 2B           	dec hl							; delay 6 clock cycles											;5d87	2b 	+
5856  5D88 23           	inc hl							; delay 6 clock cycles											;5d88	23 	#
5857  5D89 2B           	dec hl							; delay 6 clock cycles											;5d89	2b 	+
5858  5D8A 23           	inc hl							; delay 6 clock cycles											;5d8a	23 	#
5859  5D8B 2B           	dec hl							; delay 6 clock cycles											;5d8b	2b 	+
5860  5D8C 23           	inc hl							; delay 6 clock cycles											;5d8c	23 	#
5861  5D8D 00           	nop								; delay 4 clock cycles											;5d8d	00 	.
5862  5D8E 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5d8e	3e 00 	> .
5863  5D90 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;5d90	db 11 	. .
5864  5D92              .waitClockBit2:
5865  5D92              ; -- wait for FDC Clock Pulse
5866  5D92 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5d92	ed 78 	. x
5867  5D94 F2 92 5D     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5d94	f2 92 5d 	. . ]
5868  5D97 2B           	dec hl							; delay 6 clock cycles											;5d97	2b 	+
5869  5D98 23           	inc hl							; delay 6 clock cycles											;5d98	23 	#
5870  5D99 2B           	dec hl							; delay 6 clock cycles											;5d99	2b 	+
5871  5D9A 23           	inc hl							; delay 6 clock cycles											;5d9a	23 	#
5872  5D9B 2B           	dec hl							; delay 6 clock cycles											;5d9b	2b 	+
5873  5D9C 23           	inc hl							; delay 6 clock cycles											;5d9c	23 	#
5874  5D9D 00           	nop								; delay 4 clock cycles											;5d9d	00 	.
5875  5D9E 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5d9e	3e 00 	> .
5876  5DA0 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5da0	db 11 	. .
5877  5DA2              .waitClockBit3:
5878  5DA2              ; -- wait for FDC Clock Pulse
5879  5DA2 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5da2	ed 78 	. x
5880  5DA4 F2 A2 5D     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5da4	f2 a2 5d 	. . ]
5881  5DA7 2B           	dec hl							; delay 6 clock cycles											;5da7	2b 	+
5882  5DA8 23           	inc hl							; delay 6 clock cycles											;5da8	23 	#
5883  5DA9 2B           	dec hl							; delay 6 clock cycles											;5da9	2b 	+
5884  5DAA 23           	inc hl							; delay 6 clock cycles											;5daa	23 	#
5885  5DAB 2B           	dec hl							; delay 6 clock cycles											;5dab	2b 	+
5886  5DAC 23           	inc hl							; delay 6 clock cycles											;5dac	23 	#
5887  5DAD 00           	nop								; delay 4 clock cycles											;5dad	00 	.
5888  5DAE 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5dae	3e 00 	> .
5889  5DB0 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5db0	db 11 	. .
5890  5DB2              .waitClockBit4:
5891  5DB2              ; -- wait for FDC Clock Pulse
5892  5DB2 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5db2	ed 78 	. x
5893  5DB4 F2 B2 5D     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5db4	f2 b2 5d 	. . ]
5894  5DB7 2B           	dec hl							; delay 6 clock cycles											;5db7	2b 	+
5895  5DB8 23           	inc hl							; delay 6 clock cycles											;5db8	23 	#
5896  5DB9 2B           	dec hl							; delay 6 clock cycles											;5db9	2b 	+
5897  5DBA 23           	inc hl							; delay 6 clock cycles											;5dba	23 	#
5898  5DBB 2B           	dec hl							; delay 6 clock cycles											;5dbb	2b 	+
5899  5DBC 23           	inc hl							; delay 6 clock cycles											;5dbc	23 	#
5900  5DBD 00           	nop								; delay 4 clock cycles											;5dbd	00 	.
5901  5DBE 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5dbe	3e 00 	> .
5902  5DC0 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5dc0	db 11 	. .
5903  5DC2              .waitClockBit5:
5904  5DC2              ; -- wait for FDC Clock Pulse
5905  5DC2 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5dc2	ed 78 	. x
5906  5DC4 F2 C2 5D     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5dc4	f2 c2 5d 	. . ]
5907  5DC7 2B           	dec hl							; delay 6 clock cycles											;5dc7	2b 	+
5908  5DC8 23           	inc hl							; delay 6 clock cycles											;5dc8	23 	#
5909  5DC9 2B           	dec hl							; delay 6 clock cycles											;5dc9	2b 	+
5910  5DCA 23           	inc hl							; delay 6 clock cycles											;5dca	23 	#
5911  5DCB 2B           	dec hl							; delay 6 clock cycles											;5dcb	2b 	+
5912  5DCC 23           	inc hl							; delay 6 clock cycles											;5dcc	23 	#
5913  5DCD 00           	nop								; delay 4 clock cycles											;5dcd	00 	.
5914  5DCE 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5dce	3e 00 	> .
5915  5DD0 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;5dd0	db 11 	. .
5916  5DD2              .waitClockBit6:
5917  5DD2              ; -- wait for FDC Clock Pulse
5918  5DD2 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5dd2	ed 78 	. x
5919  5DD4 F2 D2 5D     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;5dd4	f2 d2 5d 	. . ]
5920  5DD7 2B           	dec hl							; delay 6 clock cycles											;5dd7	2b 	+
5921  5DD8 23           	inc hl							; delay 6 clock cycles											;5dd8	23 	#
5922  5DD9 2B           	dec hl							; delay 6 clock cycles											;5dd9	2b 	+
5923  5DDA 23           	inc hl							; delay 6 clock cycles											;5dda	23 	#
5924  5DDB 2B           	dec hl							; delay 6 clock cycles											;5ddb	2b 	+
5925  5DDC 23           	inc hl							; delay 6 clock cycles											;5ddc	23 	#
5926  5DDD 00           	nop								; delay 4 clock cycles											;5ddd	00 	.
5927  5DDE 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5dde	3e 00 	> .
5928  5DE0 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;5de0	db 11 	. .
5929  5DE2              .waitClockBit7:
5930  5DE2              ; -- wait for FDC Clock Pulse
5931  5DE2 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5de2	ed 78 	. x
5932  5DE4 F2 E2 5D     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;5de4	f2 e2 5d 	. . ]
5933  5DE7 2B           	dec hl							; delay 6 clock cycles											;5de7	2b 	+
5934  5DE8 23           	inc hl							; delay 6 clock cycles											;5de8	23 	#
5935  5DE9 2B           	dec hl							; delay 6 clock cycles											;5de9	2b 	+
5936  5DEA 23           	inc hl							; delay 6 clock cycles											;5dea	23 	#
5937  5DEB 2B           	dec hl							; delay 6 clock cycles											;5deb	2b 	+
5938  5DEC 23           	inc hl							; delay 6 clock cycles											;5dec	23 	#
5939  5DED 00           	nop								; delay 4 clock cycles											;5ded	00 	.
5940  5DEE 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5dee	3e 00 	> .
5941  5DF0 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;5df0	db 11 	. .
5942  5DF2 47           	ld b,a			;5df2	47 	G
5943  5DF3              .waitClockBit8:
5944  5DF3              ; -- wait for FDC Clock Pulse
5945  5DF3 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5df3	ed 78 	. x
5946  5DF5 F2 F3 5D     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;5df5	f2 f3 5d 	. . ]
5947  5DF8
5948  5DF8              ; -- We have 4th byte read (expected $fe)
5949  5DF8
5950  5DF8 78           	ld a,b							; a - byte from Floppy Disk										;5df8	78 	x
5951  5DF9 FE FE        	cp $fe							; is it FE (fourth byte of IDAM ending)?						;5df9	fe fe 	. .
5952  5DFB C2 27 5B     	jp nz,READSECTOR				; no - start over and  Read a sector from disk					;5dfb	c2 27 5b 	. ' [
5953  5DFE
5954  5DFE              ; -- fourth byte of IDAM received - read next byte will be Sector Data Byte
5955  5DFE
5956  5DFE              RS_ReadDataByte:
5957  5DFE 00           	nop								; delay 4 clock cycles											;5dfe	00 	.
5958  5DFF 00           	nop								; delay 4 clock cycles											;5dff	00 	.
5959  5E00 00           	nop								; delay 4 clock cycles											;5e00	00 	.
5960  5E01 3E 00        	ld a,0							; delay 7 clock cycles											;5e01	3e 00 	> .
5961  5E03 3E 00        	ld a,0							; delay 7 clock cycles	(26 in total)							;5e03	3e 00 	> .
5962  5E05              RS_ReadNext:
5963  5E05 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 7]		;5e05	db 11 	. .
5964  5E07              .waitClockBit1:
5965  5E07              ; -- wait for FDC Clock Pulse
5966  5E07 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5e07	ed 78 	. x
5967  5E09 F2 07 5E     	jp p,.waitClockBit1				; wait until Clock BIt = 1										;5e09	f2 07 5e 	. . ^
5968  5E0C 2B           	dec hl							; delay 6 clock cycles											;5e0c	2b 	+
5969  5E0D 23           	inc hl							; delay 6 clock cycles											;5e0d	23 	#
5970  5E0E 2B           	dec hl							; delay 6 clock cycles											;5e0e	2b 	+
5971  5E0F 23           	inc hl							; delay 6 clock cycles											;5e0f	23 	#
5972  5E10 2B           	dec hl							; delay 6 clock cycles											;5e10	2b 	+
5973  5E11 23           	inc hl							; delay 6 clock cycles											;5e11	23 	#
5974  5E12 00           	nop								; delay 4 clock cycles											;5e12	00 	.
5975  5E13 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5e13	3e 00 	> .
5976  5E15 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 6]		;5e15	db 11 	. .
5977  5E17              .waitClockBit2:
5978  5E17              ; -- wait for FDC Clock Pulse
5979  5E17 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5e17	ed 78 	. x
5980  5E19 F2 17 5E     	jp p,.waitClockBit2				; wait until Clock BIt = 1										;5e19	f2 17 5e 	. . ^
5981  5E1C 2B           	dec hl							; delay 6 clock cycles											;5e1c	2b 	+
5982  5E1D 23           	inc hl							; delay 6 clock cycles											;5e1d	23 	#
5983  5E1E 2B           	dec hl							; delay 6 clock cycles											;5e1e	2b 	+
5984  5E1F 23           	inc hl							; delay 6 clock cycles											;5e1f	23 	#
5985  5E20 2B           	dec hl							; delay 6 clock cycles											;5e20	2b 	+
5986  5E21 23           	inc hl							; delay 6 clock cycles											;5e21	23 	#
5987  5E22 00           	nop								; delay 4 clock cycles											;5e22	00 	.
5988  5E23 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5e23	3e 00 	> .
5989  5E25 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 5]		;5e25	db 11 	. .
5990  5E27              .waitClockBit3:
5991  5E27              ; -- wait for FDC Clock Pulse
5992  5E27 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5e27	ed 78 	. x
5993  5E29 F2 27 5E     	jp p,.waitClockBit3				; wait until Clock BIt = 1										;5e29	f2 27 5e 	. ' ^
5994  5E2C 2B           	dec hl							; delay 6 clock cycles											;5e2c	2b 	+
5995  5E2D 23           	inc hl							; delay 6 clock cycles											;5e2d	23 	#
5996  5E2E 2B           	dec hl							; delay 6 clock cycles											;5e2e	2b 	+
5997  5E2F 23           	inc hl							; delay 6 clock cycles											;5e2f	23 	#
5998  5E30 2B           	dec hl							; delay 6 clock cycles											;5e30	2b 	+
5999  5E31 23           	inc hl							; delay 6 clock cycles											;5e31	23 	#
6000  5E32 00           	nop								; delay 4 clock cycles											;5e32	00 	.
6001  5E33 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5e33	3e 00 	> .
6002  5E35 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 4]		;5e35	db 11 	. .
6003  5E37              .waitClockBit4:
6004  5E37              ; -- wait for FDC Clock Pulse
6005  5E37 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5e37	ed 78 	. x
6006  5E39 F2 37 5E     	jp p,.waitClockBit4				; wait until Clock BIt = 1										;5e39	f2 37 5e 	. 7 ^
6007  5E3C 2B           	dec hl							; delay 6 clock cycles											;5e3c	2b 	+
6008  5E3D 23           	inc hl							; delay 6 clock cycles											;5e3d	23 	#
6009  5E3E 2B           	dec hl							; delay 6 clock cycles											;5e3e	2b 	+
6010  5E3F 23           	inc hl							; delay 6 clock cycles											;5e3f	23 	#
6011  5E40 2B           	dec hl							; delay 6 clock cycles											;5e40	2b 	+
6012  5E41 23           	inc hl							; delay 6 clock cycles											;5e41	23 	#
6013  5E42 00           	nop								; delay 4 clock cycles											;5e42	00 	.
6014  5E43 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5e43	3e 00 	> .
6015  5E45 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 3]		;5e45	db 11 	. .
6016  5E47              .waitClockBit5:
6017  5E47              ; -- wait for FDC Clock Pulse
6018  5E47 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5e47	ed 78 	. x
6019  5E49 F2 47 5E     	jp p,.waitClockBit5				; wait until Clock BIt = 1										;5e49	f2 47 5e 	. G ^
6020  5E4C 2B           	dec hl							; delay 6 clock cycles											;5e4c	2b 	+
6021  5E4D 23           	inc hl							; delay 6 clock cycles											;5e4d	23 	#
6022  5E4E 2B           	dec hl							; delay 6 clock cycles											;5e4e	2b 	+
6023  5E4F 23           	inc hl							; delay 6 clock cycles											;5e4f	23 	#
6024  5E50 2B           	dec hl							; delay 6 clock cycles											;5e50	2b 	+
6025  5E51 23           	inc hl							; delay 6 clock cycles											;5e51	23 	#
6026  5E52 00           	nop								; delay 4 clock cycles											;5e52	00 	.
6027  5E53 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5e53	3e 00 	> .
6028  5E55 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 2]		;5e55	db 11 	. .
6029  5E57              .waitClockBit6:
6030  5E57              ; -- wait for FDC Clock Pulse
6031  5E57 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5e57	ed 78 	. x
6032  5E59 F2 57 5E     	jp p,.waitClockBit6				; wait until Clock BIt = 1										;5e59	f2 57 5e 	. W ^
6033  5E5C 2B           	dec hl							; delay 6 clock cycles											;5e5c	2b 	+
6034  5E5D 23           	inc hl							; delay 6 clock cycles											;5e5d	23 	#
6035  5E5E 2B           	dec hl							; delay 6 clock cycles											;5e5e	2b 	+
6036  5E5F 23           	inc hl							; delay 6 clock cycles											;5e5f	23 	#
6037  5E60 2B           	dec hl							; delay 6 clock cycles											;5e60	2b 	+
6038  5E61 23           	inc hl							; delay 6 clock cycles											;5e61	23 	#
6039  5E62 00           	nop								; delay 4 clock cycles											;5e62	00 	.
6040  5E63 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5e63	3e 00 	> .
6041  5E65 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 1]		;5e65	db 11 	. .
6042  5E67              .waitClockBit7:
6043  5E67              ; -- wait for FDC Clock Pulse
6044  5E67 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5e67	ed 78 	. x
6045  5E69 F2 67 5E     	jp p,.waitClockBit7				; wait until Clock BIt = 1										;5e69	f2 67 5e 	. g ^
6046  5E6C 2B           	dec hl							; delay 6 clock cycles											;5e6c	2b 	+
6047  5E6D 23           	inc hl							; delay 6 clock cycles											;5e6d	23 	#
6048  5E6E 2B           	dec hl							; delay 6 clock cycles											;5e6e	2b 	+
6049  5E6F 23           	inc hl							; delay 6 clock cycles											;5e6f	23 	#
6050  5E70 2B           	dec hl							; delay 6 clock cycles											;5e70	2b 	+
6051  5E71 23           	inc hl							; delay 6 clock cycles											;5e71	23 	#
6052  5E72 00           	nop								; delay 4 clock cycles											;5e72	00 	.
6053  5E73 3E 00        	ld a,0							; delay 7 clock cycles	(47 in total)							;5e73	3e 00 	> .
6054  5E75 DB 11        	in a,(FLDATA)					; a - read byte from disk (shift FLDATA register) [bit 0]		;5e75	db 11 	. .
6055  5E77 08           	ex af,af'						; save a (byte from Floppy Disk) in alt register				;5e77	08 	.
6056  5E78              .waitClockBit8:
6057  5E78              ; -- wait for FDC Clock Pulse
6058  5E78 ED 78        	in a,(c)						; read Clock Bit from Flopy Drive								;5e78	ed 78 	. x
6059  5E7A F2 78 5E     	jp p,.waitClockBit8				; wait until Clock BIt = 1										;5e7a	f2 78 5e 	. x ^
6060  5E7D
6061  5E7D              ; -- We have Data byte from Disk
6062  5E7D
6063  5E7D 23           	inc hl							; increment address in Sector Buffer to store new Byte			;5e7d	23 	#
6064  5E7E 1D           	dec e							; decrement number of bytes to read from Disk					;5e7e	1d 	.
6065  5E7F 28 07        	jr z,RS_VerifyCRC				; if all read verify Sector Data Checksum						;5e7f	28 07 	( .
6066  5E81
6067  5E81              ; -- store Data Byte into Sector Buffer and read next byte
6068  5E81 08           	ex af,af'						; restore a - Data Byte from Disk								;5e81	08 	.
6069  5E82 77           	ld (hl),a						; store Data Byte in Sector Buffer								;5e82	77 	w
6070  5E83 ED 5F        	ld a,r							; delay 9 clock cycles											;5e83	ed 5f 	. _
6071  5E85 C3 05 5E     	jp RS_ReadNext					; start read next Data Byte										;5e85	c3 05 5e 	. . ^
6072  5E88              RS_VerifyCRC:
6073  5E88 CD 10 5B     	call CalcSectorCRC				; de - sum of all 128 bytes from Sector Buffer					;5e88	cd 10 5b 	. . [
6074  5E8B 23           	inc hl							; hl - points to next byte from Disk (checksum LSB)				;5e8b	23 	#
6075  5E8C 7E           	ld a,(hl)						; a - checksum LSB from Disk									;5e8c	7e 	~
6076  5E8D BB           	cp e							; is equal to calculated ?										;5e8d	bb 	.
6077  5E8E 20 05        	jr nz,RS_ErrTryAgain			; no - try read again or exit with Error 10 - CHECKSUM ERROR	;5e8e	20 05 	  .
6078  5E90 23           	inc hl							; hl - points to next byte from Disk (checksum MSB)				;5e90	23 	#
6079  5E91 7E           	ld a,(hl)						; a - checksum MSB from Disk									;5e91	7e 	~
6080  5E92 BA           	cp d							; is equal to calculated ?										;5e92	ba 	.
6081  5E93 28 0D        	jr z,RS_ExitOK					; yes - exit with Error 0 - NO ERROR							;5e93	28 0d 	( .
6082  5E95              RS_ErrTryAgain:
6083  5E95 FD 7E 13     	ld a,(iy+RetryCount)			; a - number of read tries when CRC error 						;5e95	fd 7e 13 	. ~ .
6084  5E98 3D           	dec a							; decrement Try Counter	- is it already 0?						;5e98	3d 	=
6085  5E99 FD 77 13     	ld (iy+RetryCount),a			; store back number of tries									;5e99	fd 77 13 	. w .
6086  5E9C C2 2B 5B     	jp nz,RS_StartRead				; no - start Read Sector again									;5e9c	c2 2b 5b 	. + [
6087  5E9F              ; -- no more try - exit with Error 10 - CHECKSUM ERROR
6088  5E9F 3E 0A        	ld a,10							; a - Error 10 - CHECKSUM ERROR									;5e9f	3e 0a 	> .
6089  5EA1 C9           	ret								; --------------------- End of Proc (with Error) --------------	;5ea1	c9 	.
6090  5EA2              RS_ExitOK:
6091  5EA2              ; -- Success
6092  5EA2 AF           	xor a							; a - Error 00 - NO ERROR										;5ea2	af 	.
6093  5EA3 C9           	ret								; --------------------- End of Proc ---------------------------	;5ea3	c9 	.
6094  5EA4
6095  5EA4
6096  5EA4
6097  5EA4              ;***************************************************************************************************
6098  5EA4              ; Wait for Break key released
6099  5EA4              ; IN: none
6100  5EA4              ; OUT: a - Error code (17) - BREAK pressed
6101  5EA4              WaitBreakKeyReleased:
6102  5EA4              ; -- wait until Break key is released
6103  5EA4 3A DF 68     	ld a,(BreakKeybRow)				; read Keyboard row with Break key								;5ea4	3a df 68 	: . h
6104  5EA7 E6 04        	and BreakKeybMask				; mask only BREAK key - if 0 -> Break is pressed				;5ea7	e6 04 	. .
6105  5EA9 28 F9        	jr z,WaitBreakKeyReleased		; yes - wait until released										;5ea9	28 f9 	( .
6106  5EAB              ; -- wait 20 ms
6107  5EAB C5           	push bc							; save bc														;5eab	c5 	.
6108  5EAC 01 14 00     	ld bc,20						; number of ms to wait											;5eac	01 14 00 	. . .
6109  5EAF CD BE 5E     	call DELAYMS					; wait 20 ms delay												;5eaf	cd be 5e 	. . ^
6110  5EB2 C1           	pop bc							; restore bc 													;5eb2	c1 	.
6111  5EB3              ; -- confirm that Break key is released
6112  5EB3 3A DF 68     	ld a,(BreakKeybRow)				; read Keyboard row with Break key								;5eb3	3a df 68 	: . h
6113  5EB6 E6 04        	and BreakKeybMask				; mask only BREAK key - if 0 -> Break is pressed				;5eb6	e6 04 	. .
6114  5EB8 28 EA        	jr z,WaitBreakKeyReleased		; yes - wait until released										;5eb8	28 ea 	( .
6115  5EBA              ; -- Break key released - set Error Code and return
6116  5EBA 3E 11        	ld a,17							; a - Error 17 - BREAK											;5eba	3e 11 	> .
6117  5EBC B7           	or a							; clear CY flag													;5ebc	b7 	.
6118  5EBD C9           	ret								; -------------------- End of Proc ----------------------------	;5ebd	c9 	.
6119  5EBE
6120  5EBE
6121  5EBE
6122  5EBE
6123  5EBE              ;***************************************************************************************************
6124  5EBE              ; Delay mS in reg BC
6125  5EBE              ; IN: BC - number of miliseconds to delay
6126  5EBE              ; OUT: none
6127  5EBE              ;***************************************************************************************************
6128  5EBE              DELAYMS:
6129  5EBE C5           	push bc							; save bc - number of miliseconds								;5ebe	c5 	.
6130  5EBF              ; -- setup 1ms loop
6131  5EBF 01 89 00     	ld bc,137						; number of loop iteration per 1 ms								;5ebf	01 89 00 	. . .
6132  5EC2              .loop:
6133  5EC2 0B           	dec bc							; decrement loop counter										;5ec2	0b 	.
6134  5EC3 78           	ld a,b							; test if counter is 0											;5ec3	78 	x
6135  5EC4 B1           	or c							; is bc == 0 ?													;5ec4	b1 	.
6136  5EC5 20 FB        	jr nz,.loop						; no - continue loop											;5ec5	20 fb 	  .
6137  5EC7              ; -- decrement number of miliseconds of wait
6138  5EC7 C1           	pop bc							; restore bc - miliseconds counter								;5ec7	c1 	.
6139  5EC8 0B           	dec bc							; decrement miliseconds counter									;5ec8	0b 	.
6140  5EC9 78           	ld a,b							; test if counter is 0											;5ec9	78 	x
6141  5ECA B1           	or c							; is bc == 0 ?													;5eca	b1 	.
6142  5ECB 20 F1        	jr nz,DELAYMS					; no - wait another milisecond									;5ecb	20 f1 	  .
6143  5ECD C9           	ret								; -------------------- End of Proc ----------------------------	;5ecd	c9 	.
6144  5ECE
6145  5ECE
6146  5ECE
6147  5ECE              ;***************************************************************************************************
6148  5ECE              ; Step the stepper N tracks inwards specified by register b
6149  5ECE              ; NOTE: Stepper Phase variable contains 4 bits values duplicated in high and low nibble
6150  5ECE              ; this way futher rotation operations used by StepIn and StepOut don't need any corrections
6151  5ECE              ; IN: b - how many tracks to stepin
6152  5ECE              ;***************************************************************************************************
6153  5ECE              STEPIN:
6154  5ECE              ; -- calculate maximum number of tracks we can step in from current
6155  5ECE FD 7E 14     	ld a,(iy+CurTrackNo)			; a - current Track Number										;5ece	fd 7e 14 	. ~ .
6156  5ED1 80           	add a,b							; add number of tracks requested								;5ed1	80 	.
6157  5ED2 FE 28        	cp 40							; is final Track number >= 40?									;5ed2	fe 28 	. (
6158  5ED4 38 02        	jr c,.continue					; no - continue													;5ed4	38 02 	8 .
6159  5ED6
6160  5ED6              ; -- DOS supports only 40 tracks - force last one
6161  5ED6 3E 27        	ld a,39							; set final target Track number to 39							;5ed6	3e 27 	> '
6162  5ED8
6163  5ED8              .continue:
6164  5ED8 FD 77 14     	ld (iy+CurTrackNo),a			; set final number as current track number						;5ed8	fd 77 14 	. w .
6165  5EDB CB 20        	sla b							; b - physical steps needed (b * 2 steps per Track)				;5edb	cb 20 	.
6166  5EDD
6167  5EDD              .doStepIn:
6168  5EDD              ; -- calculate and store new Step Phase
6169  5EDD FD 7E 38     	ld a,(iy+StepPhase)				; a - current Step Phase										;5edd	fd 7e 38 	. ~ 8
6170  5EE0 4F           	ld c,a							; c - save current Step Phase									;5ee0	4f 	O
6171  5EE1 07           	rlca							; rotate left to get next Phase (i.e. 0001 -> 0010)				;5ee1	07 	.
6172  5EE2
6173  5EE2              ; -- write Half-Step Phase to FDC (combined old and new bits)
6174  5EE2              ; -- example: when old Phase was 0001 and new Phase is 0010 then combined Phase is 0011
6175  5EE2 F5           	push af							; save a - new Step Phase										;5ee2	f5 	.
6176  5EE3 FD 77 38     	ld (iy+StepPhase),a				; set new value as current Step Phase							;5ee3	fd 77 38 	. w 8
6177  5EE6 B1           	or c							; a - combine old and new values to Half-Step Phase				;5ee6	b1 	.
6178  5EE7              ; -- write Step Phase
6179  5EE7 CD 32 5F     	call WriteStepPhase				; write Half-Step to FDC - move Disk Head						;5ee7	cd 32 5f 	. 2 _
6180  5EEA              ; -- delay 2 ms
6181  5EEA C5           	push bc							; save bc - physical steps needed								;5eea	c5 	.
6182  5EEB 01 02 00     	ld bc,2							; number of miliseconds to delay								;5eeb	01 02 00 	. . .
6183  5EEE CD BE 5E     	call DELAYMS					; delay 2 ms 													;5eee	cd be 5e 	. . ^
6184  5EF1 C1           	pop bc							; restore bc - physical steps needed							;5ef1	c1 	.
6185  5EF2              ; -- write Step Phase
6186  5EF2 F1           	pop af							; restore a - new Step Phase									;5ef2	f1 	.
6187  5EF3 CD 32 5F     	call WriteStepPhase				; write new Step Phase to FDC - move Disk Head					;5ef3	cd 32 5f 	. 2 _
6188  5EF6              ; -- delay 14 ms
6189  5EF6 C5           	push bc							; save bc - physical steps needed								;5ef6	c5 	.
6190  5EF7 01 0E 00     	ld bc,14						; number of miliseconds to delay								;5ef7	01 0e 00 	. . .
6191  5EFA CD BE 5E     	call DELAYMS					; delay 14 ms													;5efa	cd be 5e 	. . ^
6192  5EFD C1           	pop bc							; restore bc - physical steps needed							;5efd	c1 	.
6193  5EFE 10 DD        	djnz .doStepIn					; continue to Step-in required times							;5efe	10 dd 	. .
6194  5F00 C9           	ret								; ----------------------- End of Proc -------------------------	;5f00	c9 	.
6195  5F01
6196  5F01
6197  5F01
6198  5F01              ;***************************************************************************************************
6199  5F01              ; Step the stepper N tracks outwards specified by register b
6200  5F01              ; NOTE: Stepper Phase variable contains 4 bits values duplicated in high and low nibble
6201  5F01              ; this way futher rotation operations used by StepIn and StepOut don't need any corrections
6202  5F01              ; IN: b - how many tracks to step out
6203  5F01              ;***************************************************************************************************
6204  5F01              STEPOUT:
6205  5F01              ; -- calculate maximum number of tracks we can step out from current
6206  5F01 FD 7E 14     	ld a,(iy+CurTrackNo)			; a - current Track Number										;5f01	fd 7e 14 	. ~ .
6207  5F04 90           	sub b							; subtract number of tracks requested - is result < 0 ?			;5f04	90 	.
6208  5F05 F2 09 5F     	jp p,.continue					; no - continue													;5f05	f2 09 5f 	. . _
6209  5F08
6210  5F08              ; -- DOS supports tracks from 0 to 39 - force first one
6211  5F08 AF           	xor a							; set final target Track number to 0							;5f08	af 	.
6212  5F09
6213  5F09              .continue:
6214  5F09 FD 77 14     	ld (iy+CurTrackNo),a			; set final number as current track number						;5f09	fd 77 14 	. w .
6215  5F0C CB 20        	sla b							; b - physical steps needed (b * 2 steps per Track)				;5f0c	cb 20 	.
6216  5F0E
6217  5F0E              .doStepOut:
6218  5F0E              ; -- calculate and store new Step Phase
6219  5F0E FD 7E 38     	ld a,(iy+StepPhase)				; a - current Step Phase										;5f0e	fd 7e 38 	. ~ 8
6220  5F11 4F           	ld c,a							; c - save current Step Phase									;5f11	4f 	O
6221  5F12 0F           	rrca							; rotate right to get next Phase (i.e. 0100 -> 0010)			;5f12	0f 	.
6222  5F13
6223  5F13              ; -- write Half-Step Phase to FDC (combined old and new bits)
6224  5F13              ; -- example: when old Phase was 0100 and new Phase is 0010 then combined Phase is 0110
6225  5F13 F5           	push af							; save a - new Step Phase										;5f13	f5 	.
6226  5F14 FD 77 38     	ld (iy+StepPhase),a				; set new value as current Step Phase							;5f14	fd 77 38 	. w 8
6227  5F17 B1           	or c							; a - combine old and new values to Half-Step Phase				;5f17	b1 	.
6228  5F18              ; -- write Step Phase
6229  5F18 CD 32 5F     	call WriteStepPhase				; write Half-Step to FDC - move Disk Head						;5f18	cd 32 5f 	. 2 _
6230  5F1B              ; -- delay 2 ms
6231  5F1B C5           	push bc							; save bc - physical steps needed								;5f1b	c5 	.
6232  5F1C 01 02 00     	ld bc,2							; number of miliseconds to delay								;5f1c	01 02 00 	. . .
6233  5F1F CD BE 5E     	call DELAYMS					; delay 2 ms 													;5f1f	cd be 5e 	. . ^
6234  5F22 C1           	pop bc							; restore bc - physical steps needed							;5f22	c1 	.
6235  5F23              ; -- write Step Phase
6236  5F23 F1           	pop af							; restore a - new Step Phase									;5f23	f1 	.
6237  5F24 CD 32 5F     	call WriteStepPhase				; write new Step Phase to FDC - move Disk Head					;5f24	cd 32 5f 	. 2 _
6238  5F27 C5           	push bc							; save bc - physical steps needed								;5f27	c5 	.
6239  5F28 01 0E 00     	ld bc,14						; number of miliseconds to delay								;5f28	01 0e 00 	. . .
6240  5F2B CD BE 5E     	call DELAYMS					; delay 14 ms 													;5f2b	cd be 5e 	. . ^
6241  5F2E C1           	pop bc							; restore bc - physical steps needed							;5f2e	c1 	.
6242  5F2F 10 DD        	djnz .doStepOut					; continue to Step-out required times							;5f2f	10 dd 	. .
6243  5F31 C9           	ret								; ----------------------- End of Proc -------------------------	;5f31	c9 	.
6244  5F32
6245  5F32
6246  5F32              ;***************************************************************************************************
6247  5F32              ; Write new Step Phase bits to Floppy Disk COntroller
6248  5F32              ; IN: a - new Step Phase in lower 4 bits
6249  5F32              WriteStepPhase:
6250  5F32 E6 0F        	and FL_STEPPER_MASK				; only lower 4 bits of value									;5f32	e6 0f 	. .
6251  5F34 4F           	ld c,a							; c - new Step Phase bits										;5f34	4f 	O
6252  5F35 3E F0        	ld a,%11110000					; mask to select only high 4 bits								;5f35	3e f0 	> .
6253  5F37 FD A6 33     	and (iy+FLCtrlShadow)			; a - FLCtrl last value w/o Step Phase bits						;5f37	fd a6 33 	. . 3
6254  5F3A B1           	or c							; a - add new Step Phase bits									;5f3a	b1 	.
6255  5F3B FD 77 33     	ld (iy+FLCtrlShadow),a			; store FLCtrl to shadow register								;5f3b	fd 77 33 	. w 3
6256  5F3E D3 10        	out (FLCTRL),a					; set Flopy Control byte										;5f3e	d3 10 	. .
6257  5F40 C9           	ret								; ------------------ End of Proc ------------------------------	;5f40	c9 	.
6258  5F41
6259  5F41
6260  5F41              ;***************************************************************************************************
6261  5F41              ; Disk power ON
6262  5F41              ; Turn ON the power of the drive selected in DOS vector IY+SelectedDrive.
6263  5F41              ; IN: IY+SelectedDrive: $10 - Drive 1, $80 - Drive 2
6264  5F41              ; OUT: ---
6265  5F41              ; Registers affected: A
6266  5F41              ;***************************************************************************************************
6267  5F41              PowerOn:
6268  5F41              ; -- get current state of FDD Step Motor
6269  5F41 FD 7E 38     	ld a,(iy+StepPhase)				; get current Step Motor Phase									;5f41	fd 7e 38 	. ~ 8
6270  5F44 E6 0F        	and FL_STEPPER_MASK				; only 4 low bits												;5f44	e6 0f 	. .
6271  5F46              ; -- add bits sent before to Floppy Drive Control Register
6272  5F46 FD B6 33     	or (iy+FLCtrlShadow)			; add last byte sent to FLCtrl 									;5f46	fd b6 33 	. . 3
6273  5F49              ; -- select drive
6274  5F49 FD B6 0B     	or (iy+SelectedDrive)			; set bit for drive 											;5f49	fd b6 0b 	. . .
6275  5F4C              ; -- write new parameters to Control register and it's shadow
6276  5F4C FD 77 33     	ld (iy+FLCtrlShadow),a			; store FLCtrl to shadow register								;5f4c	fd 77 33 	. w 3
6277  5F4F D3 10        	out (FLCTRL),a					; set Flopy Control byte										;5f4f	d3 10 	. .
6278  5F51 C9           	ret								; ------------------ End of Proc ------------------------------	;5f51	c9 	.
6279  5F52
6280  5F52
6281  5F52              ;***************************************************************************************************
6282  5F52              ; Disk power OFF
6283  5F52              ; Turn OFF the power to the disk.
6284  5F52              ; Both disks are turned OFF with the write request line set high at the same time.
6285  5F52              ;***************************************************************************************************
6286  5F52              PowerOff:
6287  5F52              ; -- get bits sent before to Floppy Drive Control Register
6288  5F52 FD 7E 33     	ld a,(iy+FLCtrlShadow)			; get last byte sent to FLCtrl 									;5f52	fd 7e 33 	. ~ 3
6289  5F55              ; -- clear WriteReq bit (deactivate)
6290  5F55 F6 40        	or FL_WRITE_REQ					; set bit 6 - Write Request (active LOW)						;5f55	f6 40 	. @
6291  5F57              ; -- disable drive D1 and D2 and set Step MOtor to 0-0-0-0
6292  5F57 E6 60        	and %01100000					; clear all bits except WriteReq and Write Data					;5f57	e6 60 	. `
6293  5F59              ; -- write new parameters to Control register and it's shadow
6294  5F59 FD 77 33     	ld (iy+FLCtrlShadow),a			; store FLCtrl to shadow register								;5f59	fd 77 33 	. w 3
6295  5F5C D3 10        	out (FLCTRL),a					; set Flopy Control byte										;5f5c	d3 10 	. .
6296  5F5E C9           	ret								; ------------------ End of Proc ------------------------------	;5f5e	c9 	.
6297  5F5F
6298  5F5F
6299  5F5F              ;***************************************************************************************************
6300  5F5F              ; END
6301  5F5F
6302  5F5F 00           	nop			;5f5f	00 	.
6303  5F60 00           	nop			;5f60	00 	.
6304  5F61 00           	nop			;5f61	00 	.
6305  5F62 00           	nop			;5f62	00 	.
6306  5F63 00           	nop			;5f63	00 	.
6307  5F64 00           	nop			;5f64	00 	.
6308  5F65 00           	nop			;5f65	00 	.
6309  5F66 00           	nop			;5f66	00 	.
6310  5F67 00           	nop			;5f67	00 	.
6311  5F68 00           	nop			;5f68	00 	.
6312  5F69 00           	nop			;5f69	00 	.
6313  5F6A 00           	nop			;5f6a	00 	.
6314  5F6B 00           	nop			;5f6b	00 	.
6315  5F6C 00           	nop			;5f6c	00 	.
6316  5F6D 00           	nop			;5f6d	00 	.
6317  5F6E 00           	nop			;5f6e	00 	.
6318  5F6F 00           	nop			;5f6f	00 	.
6319  5F70 00           	nop			;5f70	00 	.
6320  5F71 00           	nop			;5f71	00 	.
6321  5F72 00           	nop			;5f72	00 	.
6322  5F73 00           	nop			;5f73	00 	.
6323  5F74 00           	nop			;5f74	00 	.
6324  5F75 00           	nop			;5f75	00 	.
6325  5F76 00           	nop			;5f76	00 	.
6326  5F77 00           	nop			;5f77	00 	.
6327  5F78 00           	nop			;5f78	00 	.
6328  5F79 00           	nop			;5f79	00 	.
6329  5F7A 00           	nop			;5f7a	00 	.
6330  5F7B 00           	nop			;5f7b	00 	.
6331  5F7C 00           	nop			;5f7c	00 	.
6332  5F7D FF           	rst 38h			;5f7d	ff 	.
6333  5F7E FF           	rst 38h			;5f7e	ff 	.
6334  5F7F FF           	rst 38h			;5f7f	ff 	.
6335  5F80 FF           	rst 38h			;5f80	ff 	.
6336  5F81 FF           	rst 38h			;5f81	ff 	.
6337  5F82 FF           	rst 38h			;5f82	ff 	.
6338  5F83 FF           	rst 38h			;5f83	ff 	.
6339  5F84 FF           	rst 38h			;5f84	ff 	.
6340  5F85 FF           	rst 38h			;5f85	ff 	.
6341  5F86 FF           	rst 38h			;5f86	ff 	.
6342  5F87 FF           	rst 38h			;5f87	ff 	.
6343  5F88 FF           	rst 38h			;5f88	ff 	.
6344  5F89 FF           	rst 38h			;5f89	ff 	.
6345  5F8A FF           	rst 38h			;5f8a	ff 	.
6346  5F8B FF           	rst 38h			;5f8b	ff 	.
6347  5F8C FF           	rst 38h			;5f8c	ff 	.
6348  5F8D FF           	rst 38h			;5f8d	ff 	.
6349  5F8E FF           	rst 38h			;5f8e	ff 	.
6350  5F8F FF           	rst 38h			;5f8f	ff 	.
6351  5F90 FF           	rst 38h			;5f90	ff 	.
6352  5F91 FF           	rst 38h			;5f91	ff 	.
6353  5F92 FF           	rst 38h			;5f92	ff 	.
6354  5F93 FF           	rst 38h			;5f93	ff 	.
6355  5F94 FF           	rst 38h			;5f94	ff 	.
6356  5F95 FF           	rst 38h			;5f95	ff 	.
6357  5F96 FF           	rst 38h			;5f96	ff 	.
6358  5F97 FF           	rst 38h			;5f97	ff 	.
6359  5F98 FF           	rst 38h			;5f98	ff 	.
6360  5F99 FF           	rst 38h			;5f99	ff 	.
6361  5F9A FF           	rst 38h			;5f9a	ff 	.
6362  5F9B FF           	rst 38h			;5f9b	ff 	.
6363  5F9C FF           	rst 38h			;5f9c	ff 	.
6364  5F9D FF           	rst 38h			;5f9d	ff 	.
6365  5F9E FF           	rst 38h			;5f9e	ff 	.
6366  5F9F FF           	rst 38h			;5f9f	ff 	.
6367  5FA0 FF           	rst 38h			;5fa0	ff 	.
6368  5FA1 FF           	rst 38h			;5fa1	ff 	.
6369  5FA2 FF           	rst 38h			;5fa2	ff 	.
6370  5FA3 FF           	rst 38h			;5fa3	ff 	.
6371  5FA4 FF           	rst 38h			;5fa4	ff 	.
6372  5FA5 FF           	rst 38h			;5fa5	ff 	.
6373  5FA6 FF           	rst 38h			;5fa6	ff 	.
6374  5FA7 FF           	rst 38h			;5fa7	ff 	.
6375  5FA8 FF           	rst 38h			;5fa8	ff 	.
6376  5FA9 FF           	rst 38h			;5fa9	ff 	.
6377  5FAA FF           	rst 38h			;5faa	ff 	.
6378  5FAB FF           	rst 38h			;5fab	ff 	.
6379  5FAC FF           	rst 38h			;5fac	ff 	.
6380  5FAD FF           	rst 38h			;5fad	ff 	.
6381  5FAE FF           	rst 38h			;5fae	ff 	.
6382  5FAF FF           	rst 38h			;5faf	ff 	.
6383  5FB0 FF           	rst 38h			;5fb0	ff 	.
6384  5FB1 FF           	rst 38h			;5fb1	ff 	.
6385  5FB2 FF           	rst 38h			;5fb2	ff 	.
6386  5FB3 FF           	rst 38h			;5fb3	ff 	.
6387  5FB4 FF           	rst 38h			;5fb4	ff 	.
6388  5FB5 FF           	rst 38h			;5fb5	ff 	.
6389  5FB6 FF           	rst 38h			;5fb6	ff 	.
6390  5FB7 FF           	rst 38h			;5fb7	ff 	.
6391  5FB8 FF           	rst 38h			;5fb8	ff 	.
6392  5FB9 FF           	rst 38h			;5fb9	ff 	.
6393  5FBA FF           	rst 38h			;5fba	ff 	.
6394  5FBB FF           	rst 38h			;5fbb	ff 	.
6395  5FBC FF           	rst 38h			;5fbc	ff 	.
6396  5FBD FF           	rst 38h			;5fbd	ff 	.
6397  5FBE FF           	rst 38h			;5fbe	ff 	.
6398  5FBF FF           	rst 38h			;5fbf	ff 	.
6399  5FC0 FF           	rst 38h			;5fc0	ff 	.
6400  5FC1 FF           	rst 38h			;5fc1	ff 	.
6401  5FC2 FF           	rst 38h			;5fc2	ff 	.
6402  5FC3 FF           	rst 38h			;5fc3	ff 	.
6403  5FC4 FF           	rst 38h			;5fc4	ff 	.
6404  5FC5 FF           	rst 38h			;5fc5	ff 	.
6405  5FC6 FF           	rst 38h			;5fc6	ff 	.
6406  5FC7 FF           	rst 38h			;5fc7	ff 	.
6407  5FC8 FF           	rst 38h			;5fc8	ff 	.
6408  5FC9 FF           	rst 38h			;5fc9	ff 	.
6409  5FCA FF           	rst 38h			;5fca	ff 	.
6410  5FCB FF           	rst 38h			;5fcb	ff 	.
6411  5FCC FF           	rst 38h			;5fcc	ff 	.
6412  5FCD FF           	rst 38h			;5fcd	ff 	.
6413  5FCE FF           	rst 38h			;5fce	ff 	.
6414  5FCF FF           	rst 38h			;5fcf	ff 	.
6415  5FD0 FF           	rst 38h			;5fd0	ff 	.
6416  5FD1 FF           	rst 38h			;5fd1	ff 	.
6417  5FD2 FF           	rst 38h			;5fd2	ff 	.
6418  5FD3 FF           	rst 38h			;5fd3	ff 	.
6419  5FD4 FF           	rst 38h			;5fd4	ff 	.
6420  5FD5 FF           	rst 38h			;5fd5	ff 	.
6421  5FD6 FF           	rst 38h			;5fd6	ff 	.
6422  5FD7 FF           	rst 38h			;5fd7	ff 	.
6423  5FD8 FF           	rst 38h			;5fd8	ff 	.
6424  5FD9 FF           	rst 38h			;5fd9	ff 	.
6425  5FDA FF           	rst 38h			;5fda	ff 	.
6426  5FDB FF           	rst 38h			;5fdb	ff 	.
6427  5FDC FF           	rst 38h			;5fdc	ff 	.
6428  5FDD FF           	rst 38h			;5fdd	ff 	.
6429  5FDE FF           	rst 38h			;5fde	ff 	.
6430  5FDF FF           	rst 38h			;5fdf	ff 	.
6431  5FE0 FF           	rst 38h			;5fe0	ff 	.
6432  5FE1 FF           	rst 38h			;5fe1	ff 	.
6433  5FE2 FF           	rst 38h			;5fe2	ff 	.
6434  5FE3 FF           	rst 38h			;5fe3	ff 	.
6435  5FE4 FF           	rst 38h			;5fe4	ff 	.
6436  5FE5 FF           	rst 38h			;5fe5	ff 	.
6437  5FE6 FF           	rst 38h			;5fe6	ff 	.
6438  5FE7 FF           	rst 38h			;5fe7	ff 	.
6439  5FE8 FF           	rst 38h			;5fe8	ff 	.
6440  5FE9 FF           	rst 38h			;5fe9	ff 	.
6441  5FEA FF           	rst 38h			;5fea	ff 	.
6442  5FEB FF           	rst 38h			;5feb	ff 	.
6443  5FEC FF           	rst 38h			;5fec	ff 	.
6444  5FED FF           	rst 38h			;5fed	ff 	.
6445  5FEE FF           	rst 38h			;5fee	ff 	.
6446  5FEF FF           	rst 38h			;5fef	ff 	.
6447  5FF0 FF           	rst 38h			;5ff0	ff 	.
6448  5FF1 FF           	rst 38h			;5ff1	ff 	.
6449  5FF2 FF           	rst 38h			;5ff2	ff 	.
6450  5FF3 FF           	rst 38h			;5ff3	ff 	.
6451  5FF4 FF           	rst 38h			;5ff4	ff 	.
6452  5FF5 FF           	rst 38h			;5ff5	ff 	.
6453  5FF6 FF           	rst 38h			;5ff6	ff 	.
6454  5FF7 FF           	rst 38h			;5ff7	ff 	.
6455  5FF8 FF           	rst 38h			;5ff8	ff 	.
6456  5FF9 FF           	rst 38h			;5ff9	ff 	.
6457  5FFA FF           	rst 38h			;5ffa	ff 	.
6458  5FFB FF           	rst 38h			;5ffb	ff 	.
6459  5FFC FF           	rst 38h			;5ffc	ff 	.
6460  5FFD FF           	rst 38h			;5ffd	ff 	.
6461  5FFE FF           	rst 38h			;5ffe	ff 	.
6462  5FFF FF           	rst 38h			;5fff	ff 	.
6463  6000
# file closed: vzdos.asm

Value    Label
------ - -----------------------------------------------------------
0x5F0E   STEPOUT.doStepOut
0x5F09   STEPOUT.continue
0x5F32   WriteStepPhase
0x5EDD   STEPIN.doStepIn
0x5ED8   STEPIN.continue
0x5EC2   DELAYMS.loop
0x5EA2   RS_ExitOK
0x5E95   RS_ErrTryAgain
0x5E88   RS_VerifyCRC
0x5E78   RS_ReadNext.waitClockBit8
0x5E67   RS_ReadNext.waitClockBit7
0x5E57   RS_ReadNext.waitClockBit6
0x5E47   RS_ReadNext.waitClockBit5
0x5E37   RS_ReadNext.waitClockBit4
0x5E27   RS_ReadNext.waitClockBit3
0x5E17   RS_ReadNext.waitClockBit2
0x5E07   RS_ReadNext.waitClockBit1
0x5E05   RS_ReadNext
0x5DFE X RS_ReadDataByte
0x5DF3   RS_REadIDAM_FE.waitClockBit8
0x5DE2   RS_REadIDAM_FE.waitClockBit7
0x5DD2   RS_REadIDAM_FE.waitClockBit6
0x5DC2   RS_REadIDAM_FE.waitClockBit5
0x5DB2   RS_REadIDAM_FE.waitClockBit4
0x5DA2   RS_REadIDAM_FE.waitClockBit3
0x5D92   RS_REadIDAM_FE.waitClockBit2
0x5D82   RS_REadIDAM_FE.waitClockBit1
0x5D79 X RS_REadIDAM_FE
0x5D6E   RS_ReadIDAM_E7.waitClockBit8
0x5D5D   RS_ReadIDAM_E7.waitClockBit7
0x5D4D   RS_ReadIDAM_E7.waitClockBit6
0x5D3D   RS_ReadIDAM_E7.waitClockBit5
0x5D2D   RS_ReadIDAM_E7.waitClockBit4
0x5D1D   RS_ReadIDAM_E7.waitClockBit3
0x5D0D   RS_ReadIDAM_E7.waitClockBit2
0x5CFD   RS_ReadIDAM_E7.waitClockBit1
0x5CF4 X RS_ReadIDAM_E7
0x5CE9   RS_REadIDAM_18.waitClockBit8
0x5CD8   RS_REadIDAM_18.waitClockBit7
0x5CC8   RS_REadIDAM_18.waitClockBit6
0x5CB8   RS_REadIDAM_18.waitClockBit5
0x5CA8   RS_REadIDAM_18.waitClockBit4
0x5C88   RS_REadIDAM_18.waitClockBit2
0x5C78   RS_REadIDAM_18.waitClockBit1
0x5C6F X RS_REadIDAM_18
0x5C64   RS_ReadIDAM_C3.waitClockBit8
0x5C53   RS_ReadIDAM_C3.waitClockBit7
0x5C43   RS_ReadIDAM_C3.waitClockBit6
0x5C33   RS_ReadIDAM_C3.waitClockBit5
0x5C23   RS_ReadIDAM_C3.waitClockBit4
0x5C13   RS_ReadIDAM_C3.waitClockBit3
0x5C03   RS_ReadIDAM_C3.waitClockBit2
0x5BF3   RS_ReadIDAM_C3.waitClockBit1
0x5BEA X RS_ReadIDAM_C3
0x5BDF   RS_ReadByte.waitClockBit8
0x5BCE   RS_ReadByte.waitClockBit7
0x5BBE   RS_ReadByte.waitClockBit6
0x5BAE   RS_ReadByte.waitClockBit5
0x5B9E   RS_ReadByte.waitClockBit4
0x5B8E   RS_ReadByte.waitClockBit3
0x5B7E   RS_ReadByte.waitClockBit2
0x5B6E   RS_ReadByte.waitClockBit1
0x5B65   RS_ReadByte
0x5B5A   RS_WaitFor80.waitClockBit1
0x5B50   RS_WaitFor80
0x5B47   RS_Wait.waitClockBit
0x5B42   RS_BreakExit
0x5B45   RS_Wait
0x5B37   ReadSectorData
0x5B2B   RS_StartRead
0x5B1C   CalcSectorCRC.addNext
0x5AFF   WS_WriteByte.nextByte
0x5AE9 X WS_WriteByte.writeBit0_1
0x5AF4   WS_WriteByte.writeBit0_0
0x5ADF   WS_WriteByte.writeBit0Cell
0x5ADC   WS_WriteByte.delayBit1
0x5AD8   WS_WriteByte.contBit1
0x5AC2 X WS_WriteByte.writeBit1_1
0x5ACD   WS_WriteByte.writeBit1_0
0x5AB8   WS_WriteByte.writeBit1Cell
0x5AB5   WS_WriteByte.delayBit2
0x5AB1   WS_WriteByte.contBit2
0x5A9B X WS_WriteByte.writeBit2_1
0x5AA6   WS_WriteByte.writeBit2_0
0x5A91   WS_WriteByte.writeBit2Cell
0x5A8E   WS_WriteByte.delayBit3
0x5A8A   WS_WriteByte.contBit3
0x5A74 X WS_WriteByte.writeBit3_1
0x5A7F   WS_WriteByte.writeBit3_0
0x5A6A   WS_WriteByte.writeBit3Cell
0x5A67   WS_WriteByte.delayBit4
0x5A63   WS_WriteByte.contBit4
0x5A4D X WS_WriteByte.writeBit4_1
0x5A58   WS_WriteByte.writeBit4_0
0x5A43   WS_WriteByte.writeBit4Cell
0x5A40   WS_WriteByte.delayBit5
0x5A3C   WS_WriteByte.contBit5
0x5A26 X WS_WriteByte.writeBit5_1
0x5A31   WS_WriteByte.writeBit5_0
0x5A1C   WS_WriteByte.writeBit5Cell
0x5A19   WS_WriteByte.delayBit6
0x5A15   WS_WriteByte.contBit6
0x59FF X WS_WriteByte.writeBit6_1
0x5A0A   WS_WriteByte.writeBit6_0
0x59F5   WS_WriteByte.writeBit6Cell
0x59F2   WS_WriteByte.delayBit7
0x59EE   WS_WriteByte.contBit7
0x59D8 X WS_WriteByte.writeBit7_1
0x59E3   WS_WriteByte.writeBit7_0
0x59CF   WS_WriteByte
0x59C6   WRITESECTOR.setWriteReqActive
0x5B10   CalcSectorCRC
0x598E   FINDFREESPACE.nextDirEntry
0x5985   FINDFREESPACE.checkDirEntry
0x5976   FINDFREESPACE.readNextSector
0x5945   FINDFILE.compareNextChar
0x5953   FINDFILE.nextDirEntry
0x5934   FINDFILE.compareEntry
0x5921   FINDFILE.readNextSector
0x590C   FINDEMPTYSEC.rotateBack
0x58E0   FINDEMPTYSEC.checkNextBit1
0x58FF   FINDEMPTYSEC.markSectorUsed
0x58D0   FINDEMPTYSEC.checkNextBit
0x58CE   FINDEMPTYSEC.nextMapByte
0x5884   CREATEDIRENTRY.checkSpace
0x5865   RAM_ReadIDAM_Crc.waitClockBit7
0x5855   RAM_ReadIDAM_Crc.waitClockBit6
0x5845   RAM_ReadIDAM_Crc.waitClockBit5
0x5835   RAM_ReadIDAM_Crc.waitClockBit4
0x5825   RAM_ReadIDAM_Crc.waitClockBit3
0x5815   RAM_ReadIDAM_Crc.waitClockBit2
0x5805   RAM_ReadIDAM_Crc.waitClockBit1
0x5801   RAM_ReadIDAM_Crc.continue1
0x57FB   RAM_ReadIDAM_Crc
0x57E9   RAM_ReadIDAM_SecNo.waitClockBit8
0x57E6   RAM_ReadIDAM_SecNo.continue2
0x57E3   RAM_ReadIDAM_SecNo.continue1
0x57D6   RAM_ReadIDAM_SecNo.waitClockBit7
0x57C6   RAM_ReadIDAM_SecNo.waitClockBit6
0x57B6   RAM_ReadIDAM_SecNo.waitClockBit5
0x57A6   RAM_ReadIDAM_SecNo.waitClockBit4
0x5796   RAM_ReadIDAM_SecNo.waitClockBit3
0x5786   RAM_ReadIDAM_SecNo.waitClockBit2
0x5776   RAM_ReadIDAM_SecNo.waitClockBit1
0x5772   RAM_ReadIDAM_SecNo.continue
0x576C   RAM_ReadIDAM_SecNo
0x575B   RAM_ReadIDAM_TrkNo.waitClockBit8
0x5758   RAM_ReadIDAM_TrkNo.continue2
0x5755   RAM_ReadIDAM_TrkNo.continue1
0x5748   RAM_ReadIDAM_TrkNo.waitClockBit7
0x5738   RAM_ReadIDAM_TrkNo.waitClockBit6
0x5728   RAM_ReadIDAM_TrkNo.waitClockBit5
0x5718   RAM_ReadIDAM_TrkNo.waitClockBit4
0x5708   RAM_ReadIDAM_TrkNo.waitClockBit3
0x56F8   RAM_ReadIDAM_TrkNo.waitClockBit2
0x56E8   RAM_ReadIDAM_TrkNo.waitClockBit1
0x56DF X RAM_ReadIDAM_TrkNo
0x56D4   RAM_ReadIDAM_C3.waitClockBit8
0x56C3   RAM_ReadIDAM_C3.waitClockBit7
0x56B3   RAM_ReadIDAM_C3.waitClockBit6
0x56A3   RAM_ReadIDAM_C3.waitClockBit5
0x5693   RAM_ReadIDAM_C3.waitClockBit4
0x5683   RAM_ReadIDAM_C3.waitClockBit3
0x5673   RAM_ReadIDAM_C3.waitClockBit2
0x5663   RAM_ReadIDAM_C3.waitClockBit1
0x565A X RAM_ReadIDAM_C3
0x564F   RAM_ReadIDAM_18.waitClockBit8
0x563E   RAM_ReadIDAM_18.waitClockBit7
0x562E   RAM_ReadIDAM_18.waitClockBit6
0x561E   RAM_ReadIDAM_18.waitClockBit5
0x560E   RAM_ReadIDAM_18.waitClockBit4
0x55FE   RAM_ReadIDAM_18.waitClockBit3
0x55EE   RAM_ReadIDAM_18.waitClockBit2
0x55DE   RAM_ReadIDAM_18.waitClockBit1
0x55D5 X RAM_ReadIDAM_18
0x55CA   RAM_ReadIDAM_E7.waitClockBit8
0x55B9   RAM_ReadIDAM_E7.waitClockBit7
0x55A9   RAM_ReadIDAM_E7.waitClockBit6
0x5599   RAM_ReadIDAM_E7.waitClockBit5
0x5589   RAM_ReadIDAM_E7.waitClockBit4
0x5579   RAM_ReadIDAM_E7.waitClockBit3
0x5569   RAM_ReadIDAM_E7.waitClockBit2
0x5559   RAM_ReadIDAM_E7.waitClockBit1
0x5550 X RAM_ReadIDAM_E7
0x5545   RAM_ReadIDAM_FE.waitClockBit8
0x5534   RAM_ReadIDAM_FE.waitClockBit7
0x5514   RAM_ReadIDAM_FE.waitClockBit5
0x5504   RAM_ReadIDAM_FE.waitClockBit4
0x54F4   RAM_ReadIDAM_FE.waitClockBit3
0x54E4   RAM_ReadIDAM_FE.waitClockBit2
0x54D4   RAM_ReadIDAM_FE.waitClockBit1
0x54CB X RAM_ReadIDAM_FE
0x54C0   RAM_ReadByte.waitClockBit8
0x54AF   RAM_ReadByte.waitClockBit7
0x549F   RAM_ReadByte.waitClockBit6
0x548F   RAM_ReadByte.waitClockBit5
0x547F   RAM_ReadByte.waitClockBit4
0x546F   RAM_ReadByte.waitClockBit3
0x545F   RAM_ReadByte.waitClockBit2
0x544F   RAM_ReadByte.waitClockBit1
0x5446   RAM_ReadByte
0x543B   RAM_WaitFor80.waitClockBit
0x5431   RAM_WaitFor80
0x5428   RAM_Wait
0x5EA4   WaitBreakKeyReleased
0x540E   RAM_BreakExit
0x5411   RAM_NeedStepIn
0x541D   RAM_TrackIsSet
0x53F0   ResetTrackTo0
0x53FB   RAM_SetTrack
0x53E8   Asc2Hex.exit
0x53DF   Asc2Hex.tryAtoF
0x53D5   Asc2Hex.conv1Char
0x53C1   Asc2Hex.conv2Chars
0x53B7   ParseFilename.exitNoError
0x53AA   ParseFilename.checkNext
0x53B5   ParseFilename.exitNoErrPopIY
0x539B   ParseFilename.copyNext
0x5396   ParseFilename.exitSyntaxError
0x5399   ParseFilename.copyChars
0x5386   ParseFilename.testNext
0x537C   ParseFilename.next
0x5359   MSG_KBytesFree
0x533C   l533ch
0x534A   MSG_RecordsFree
0x5308   l5308h
0x5303   l5303h
0x5300   l5300h
0x5310   l5310h
0x5302   l5302h
0x52B7   l52b7h
0x5268   l5268h
0x5249 X sub_5249h
0x524B   l524bh
0x523C   l523ch
0x522F   l522fh
0x529D   l529dh
0x5226   l5226h
0x5284   l5284h
0x5244   l5244h
0x5252   l5252h
0x5239   l5239h
0x51E2   l51e2h
0x51DA   l51dah
0x51CB   l51cbh
0x51AE   l51aeh
0x519F   l519fh
0x5200   l5200h
0x5192   sub_5192h
0x51EC   l51ech
0x50F1   l50f1h
0x50CB   l50cbh
0x5091   l5091h
0x5083   l5083h
0x5137   l5137h
0x5524   RAM_ReadIDAM_FE.waitClockBit6
0x5275   sub_5275h
0x5162   l5162h
0x5039   l5039h
0x5168   sub_5168h
0x505D   l505dh
0x4FBB   sub_4fbbh
0x4F43 X sub_4f43h
0x4F9C   l4f9ch
0x4F0C   l4f0ch
0x4EC1   l4ec1h
0x4ECA   sub_4ecah
0x4EBA   sub_4ebah
0x4EA6   l4ea6h
0x4EB3   l4eb3h
0x4E81   l4e81h
0x4EAC   sub_4each
0x4E7C   l4e7ch
0x4E45 X l4e45h
0x4E5F   l4e5fh
0x4E5A   l4e5ah
0x4E1A   l4e1ah
0x4DF2   l4df2h
0x4DF9   sub_4df9h
0x4DE7   l4de7h
0x4DE2   l4de2h
0x4D8D   l4d8dh
0x4D84   sub_4d84h
0x4D3B   DI_ExitOK
0x4D45   DI_ExitError
0x4D14   DI_VerifySector
0x4D10   DI_VerifyTrack
0x4CF9   DI_VerifyDisk
0x4CC0   DI_WriteByte.nextByte
0x4CAA X DI_WriteByte.writeBit0_1
0x4CB5   DI_WriteByte.writeBit0_0
0x4CA0   DI_WriteByte.writeBit0Cell
0x4C9D   DI_WriteByte.delayBit1
0x4C83 X DI_WriteByte.writeBit1_1
0x4C8E   DI_WriteByte.writeBit1_0
0x4C79   DI_WriteByte.writeBit1Cell
0x4C76   DI_WriteByte.delayBit2
0x4C72   DI_WriteByte.contBit2
0x4C5C X DI_WriteByte.writeBit2_1
0x4C67   DI_WriteByte.writeBit2_0
0x4C52   DI_WriteByte.writeBit2Cell
0x4C4F   DI_WriteByte.delayBit3
0x4C4B   DI_WriteByte.contBit3
0x4C35 X DI_WriteByte.writeBit3_1
0x4C40   DI_WriteByte.writeBit3_0
0x4C2B   DI_WriteByte.writeBit3Cell
0x4C28   DI_WriteByte.delayBit4
0x4EB7   l4eb7h
0x4C24   DI_WriteByte.contBit4
0x4C0E X DI_WriteByte.writeBit4_1
0x4C19   DI_WriteByte.writeBit4_0
0x4C04   DI_WriteByte.writeBit4Cell
0x4C01   DI_WriteByte.delayBit5
0x4BFD   DI_WriteByte.contBit5
0x4BE7 X DI_WriteByte.writeBit5_1
0x4BF2   DI_WriteByte.writeBit5_0
0x4BDD   DI_WriteByte.writeBit5Cell
0x4BDA   DI_WriteByte.delayBit6
0x4BD6   DI_WriteByte.contBit6
0x4BC0 X DI_WriteByte.writeBit6_1
0x4BCB   DI_WriteByte.writeBit6_0
0x4BB6   DI_WriteByte.writeBit6Cell
0x4BB3   DI_WriteByte.delayBit7
0x4BAF   DI_WriteByte.contBit7
0x4B99 X DI_WriteByte.writeBit7_1
0x4BA4   DI_WriteByte.writeBit7_0
0x4B90   DI_WriteByte
0x4B85   DI_WriteSector
0x4D67   SectorsSequence
0x4B67   DI_WriteTrack
0x4D4F   SecHeaderInitData
0x4ACE   DCmdREN.newFilenameNotFound
0x4ABD   DCmdREN.oldFilenameFound
0x4A48   DCmdERA.loop2
0x4A3F   DCmdERA.loop1
0x4A4F   DCmdERA.saveDiskMap
0x49F7   DCmdERA.nextFileSector
0x49C0   DCmdERA.fileFound
0x497A   DCmdDIR.waitKeyRelAgain
0x496B   DCmdDIR.waitKeyPressed
0x495C   DCmdDIR.waitKeyReleased
0x4981   DCmdDIR.moveToNextEntry
0x4940   DCmdDIR.printNextChar
0x494C   DCmdDIR.testSPACEPress
0x493E   DCmdDIR.printFilename
0x498F   DCmdDIR.exit
0x492E   DCmdDIR.printDirEntry
0x491B   DCmdDIR.nextSector
0x48B6   SF_ExitError.exitWithError
0x4874   DCmdBSAVE.continue
0x48B7   BS_ExitError
0x47F7   DCmdCLOSE.fromBasicProg
0x47D7   sub_47bfh.returnNotOpen
0x47C6   sub_47bfh.nextChar
0x47A9   l47a9h
0x47AC   l47ach
0x47BF   sub_47bfh
0x4790   l4790h
0x4738   ClearDataBuf
0x4703   l4703h
0x46E1   l46e1h
0x46D9   l46d9h
0x46BA   l46bah
0x46A8   l46a8h
0x46B9   l46b9h
0x466B   l466bh
0x4FA5   sub_4fa5h
0x4778   sub_4778h
0x460E   l460eh
0x5378   ParseFilename
0x4562   DoSaveFile.loop2
0x4559   DoSaveFile.loop1
0x4530   DoSaveFile.flushSector
0x4576   DoSaveFile.partialSector
0x453A   DoSaveFile.writeLastSector
0x44E2   DoSaveFile.checkOtherError
0x457C   DoSaveFile.finalizeSave
0x44B3   DoSaveFile.writeNextChunk
0x489A   SF_ExitError
0x4479   DoSaveFile
0x4430   sub_43d3h.loadLastChunk
0x4441   sub_43d3h.exitError
0x43F3   sub_43d3h.loadFileChunk
0x43D3   sub_43d3h
0x43CA   LOADFILE.verifyType
0x52D5   DCmdSTATUS
0x4FFB   DCmdDCOPY
0x4E64   DCmdPR#
0x4D92   DCmdIN#
0x4D78   DCmdDRIVE
0x4B08   DCmdINIT
0x4A80   DCmdREN
0x4994   DCmdERA
0x4906   DCmdDIR
0x48EF   DCmdBRUN
0x48C4   DCmdBLOAD
0x4839   DCmdBSAVE
0x47DD   DCmdCLOSE
0x45F5   DCmdOPEN
0x444E   DCmdSAVE
0x4391   DCmdLOAD
0x4371   DOSCmdPointers
0x4306   ParseCmdText.compareNext
0x42F6   ParseCmdText.searchNext
0x42F4   ParseCmdText.compareCmd
0x432E   DOSCmdNames
0x4315   ExecIdxDOSCmd
0x42EB   TryParseMixedSyntax.backToROM
0x42DC   TryParseMixedSyntax.checkDCOPY
0x42C9   TryParseMixedSyntax
0x4326   ExecDOSCmd
0x45DB   LoadAndRunFile
0x42C5   DOSCheckNextChar.backToROM
0x42B0   DOSCheckNextChar.parse_RUN
0x42EF   ParseCmdText
0x42A6   DOSCheckNextChar.exit
0x42A8   DOSCheckNextChar.startParse
0x428A   DOSError.GotoBASICBreak
0x4281   DOSError.GotoBASICReady
0x5144   ClearBASIC
0x4232   ERR_IllegalWrite
0x4224   ERR_IllegalRead
0x4212   ERR_DiskBufferFull
0x4202   ERR_FileNotFound
0x41EE   ERR_FileTypeMismatch
0x41DA   ERR_UnsupportedDevice
0x41C7   ERR_FileAlreadyOpen
0x41BC   ERR_DiskFull
0x41AC   ERR_DiskIOError
0x419D   ERR_FileNotOpen
0x4187   ERR_DiskWriteProtected
0x4177   ERR_DirectoryFull
0x4162   ERR_FileAlreadyExists
0x4126   ErrorsTable
0x410F   DOSInit.finish
0x4113   TxtDosBasic12
0x4293   DOSCheckNextChar
0x4D5D   SectorGAP2Data
0x4144   ERR_InsufficientMemoryForDOS
0x406A   DOSInit.continue
0x446E   SAVEFILE
0x43B1   LOADFILE
0x5F01   STEPOUT
0x5ECE   STEPIN
0x5EBE   DELAYMS
0x5B27   READSECTOR
0x59A1   WRITESECTOR
0x5968   FINDFREESPACE
0x5913   FINDFILE
0x58BF   FINDEMPTYSEC
0x587B   CREATEDIRENTRY
0x53EA   ReadIDAddressMark
0x53B9   Asc2Hex
0x5367   CSI
0x4B08   DiskInit
0x4754   SaveMap
0x4749   ClearSector
0x4717   ReadMap
0x4241   DOSError
0x5F52   PowerOff
0x5F41   PowerOn
0x4047   DOSInit
0x00E7   MapBuffer
0x004D   SectorBuffer
0x0043   SectorHeader
0x0038   StepPhase
0x0037   CopyTrackPtr
0x0036   CopyTrackCount
0x0034   MapAddress
0x0033   FLCtrlShadow
0x0031   DataBuf
0x0024   FCBlock2
0x0017   FCBlock1
0x0016   NextTrackNo
0x0015   NextSectorNo
0x0014   CurTrackNo
0x0013   RetryCount
0x0012   UserTrackNo
0x0011   UserSectorNo
0x4C99   DI_WriteByte.contBit1
0x0010   CopyDst
0x000E   CopyBuf
0x000D   CopySrc
0x000C   RequestCode
0x000B   SelectedDrive
0x0009   FileType
0x0001   Filename
0x0000   FileNo
0x0038 X DOSVTR.PHASE
0x0037 X DOSVTR.TRKPTR
0x0036 X DOSVTR.TRKCNT
0x0034 X DOSVTR.MAPADR
0x0033 X DOSVTR.LTHCPY
0x5C98   RS_REadIDAM_18.waitClockBit3
0x0031 X DOSVTR.DBFR
0x0030 X DOSVTR.FCB2.ENTRY
0x002F X DOSVTR.FCB2.SCTRNO
0x002E X DOSVTR.FCB2.TRKN0
0x0026 X DOSVTR.FCB2.FNAM
0x0025 X DOSVTR.FCB2.STATUS
0x0024 X DOSVTR.FCB2.OPENFLAG
0x0024 X DOSVTR.FCB2
0x0023 X DOSVTR.FCB1.ENTRY
0x0022 X DOSVTR.FCB1.SCTRNO
0x0021 X DOSVTR.FCB1.TRKN0
0x0019 X DOSVTR.FCB1.FNAM
0x0018 X DOSVTR.FCB1.STATUS
0x0017 X DOSVTR.FCB1.OPENFLAG
0x0017 X DOSVTR.FCB1
0x0016 X DOSVTR.NTRK
0x0015 X DOSVTR.NSCT
0x0014 X DOSVTR.DTRCK
0x0013 X DOSVTR.RETRY
0x0012 X DOSVTR.TRCK
0x0011 X DOSVTR.SCTR
0x0010 X DOSVTR.DESTIN
0x000E X DOSVTR.UBFR
0x000D X DOSVTR.SOURCE
0x000C X DOSVTR.RQST
0x000B X DOSVTR.DK
0x0009 X DOSVTR.TYPE
0x0001 X DOSVTR.FNAM
0x0000 X DOSVTR.FILNO
0x0039 X DOSVTR
0x000C X FCB.ENTRY
0x000B X FCB.SCTRNO
0x000A X FCB.TRKN0
0x0002 X FCB.FNAM
0x0001 X FCB.STATUS
0x0000 X FCB.OPENFLAG
0x000D X FCB
0x0080 X FL_DRV_2_ENABLE
0x0040   FL_WRITE_REQ
0x0020   FL_WRITE_DATA
0x0010 X FL_DRV_1_ENABLE
0x000F   FL_STEPPER_MASK
0x0013   FLWR_PROTECT
0x0012   FLPOOL
0x0011   FLDATA
0x0010   FLCTRL
0x1929   TXT_READY
0x1AE8   SysRunBASICPrg
0x1D1E   SysParseNextExpr
0x36E9   SysExecRUN
0x5219   sub_5219h
0x1D78   SysCheckNextChar
0x0FA7   PrintMsg_IN_LINE
0x1B9A   SysBASICReset
0x1DA0   SysBASICStop
0x1997   SysRaiseSyntaxError
0x1A19   SysStartBASIC
0x28A7   SysMsgOut
0x20F9   SysNewLine
0x032A   SysPrintChar
0x78EC   EditLineNumber
0x78EA   ErrorLineNumber
0x78A2   BasicLineNumber
0x78FD   SYS_ARR_END_PTR
0x78FB   SYS_ARR_START_PTR
0x78F9   SYS_BASIC_END_PTR
0x78A4   SYS_BASIC_START_PTR
0x7AE9   SYS_BASIC_PRG
0x78E8   SYS_BACKSP_STACK
0x78D6   SYS_STRING_SPACE
0x78B1   SYS_MEMTOP_PTR
0x78A0   SYS_BASIC_STACK
0x7804   SysVecParse
0x0002   BreakKeyCol
0x0004   BreakKeybMask
0x68DF   BreakKeybRow
0x0004   SpaceKeyCol
0x68EF   SpaceKeyRow
0x001B   UP
0x000D   CR
